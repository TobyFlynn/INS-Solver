# Require CMake 3.18
cmake_minimum_required(VERSION 3.18)
project(INS-Solver CXX)

enable_language(C)

# Import compiler flags for all build types
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -fopenmp -g -O3")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fopenmp -g -O3")
set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} --disable-warnings -g -O3")

if(NOT ORDER)
  message(FATAL_ERROR "ORDER (the DG order, e.g. 3) is not specified")
endif()
set(COMMON_COMPILER_DEFS DG_ORDER=${ORDER} DG_COL_MAJ MAX_CONST_SIZE=1024)

if(NOT OP2_DIR)
  message(FATAL_ERROR "OP2_DIR is not specified")
endif()
include_directories(${OP2_DIR}/include)

if(NOT OPENBLAS_DIR)
  message(WARNING "OPENBLAS_DIR is not specified")
else()
  include_directories(${OPENBLAS_DIR}/include)
  set(OPENBLAS_LIB "-L${OPENBLAS_DIR}/lib -lopenblas")
  set(COMMON_LIBS ${OPENBLAS_LIB}) 
endif()

if(NOT PETSC_DIR)
  message(FATAL_ERROR "PETSC_DIR is not specified")
endif()
include_directories(${PETSC_DIR}/include)
set(PETSC_LIB "-L${PETSC_DIR}/lib -lpetsc")
list(APPEND COMMON_LIBS ${PETSC_LIB})

if(BUILD_MPI)
  find_package(MPI REQUIRED)

  if(NOT PART_LIB_NAME)
    message(FATAL_ERROR "PART_LIB_NAME is not specified")
  endif()
  list(APPEND COMMON_COMPILER_DEFS OP2_PARTITIONER=${PART_LIB_NAME})

  if(PART_LIB_NAME STREQUAL "PARMETIS")
    if(NOT PARMETIS_DIR)
      message(WARNING "PARMETIS_DIR is not specified")
    else()
      include_directories(${PARMETIS_DIR}/include)
      set(PART_LIB "-L${PARMETIS_DIR}/lib -lparmetis -lmetis -lGKlib")
    endif()
  elseif(PART_LIB_NAME STREQUAL "PTSCOTCH")
    if(NOT PTSCOTCH_DIR)
      message(WARNING "PTSCOTCH_DIR is not specified")
    else()
      include_directories(${PTSCOTCH_DIR}/include)
      set(PART_LIB "-L${PTSCOTCH_DIR}/lib -lptscotch -lscotch -lptscotcherr -lscotcherr -lptscotcherrexit -lscotcherrexit")
    endif()
  else()
    message(FATAL_ERROR "Unrecognised OP2 partitioning library specified in PART_LIB_NAME")
  endif()
endif()

if(NOT OP2DGTOOLKIT_DIR)
  message(FATAL_ERROR "OP2DGTOOLKIT_DIR is not specified")
endif()
include_directories(${OP2DGTOOLKIT_DIR}/include)

if(NOT ARMA_DIR)
  message(WARNING "ARMA_DIR is not specified")
else()
  include_directories(${ARMA_DIR}/include)
  set(ARMA_LIB "-L${ARMA_DIR}/lib64 -larmadillo")
  list(APPEND COMMON_LIBS ${ARMA_LIB}) 
endif()

if(NOT AMGX_DIR)
  message(WARNING "AMGX_DIR is not specified, building without it.")
else()
  include_directories(${AMGX_DIR}/include)
  set(AMGX_LIB "-L${AMGX_DIR}/lib -lamgx")
  list(APPEND COMMON_LIBS ${AMGX_LIB})
  list(APPEND COMMON_COMPILER_DEFS INS_BUILD_WITH_AMGX)
endif()

if(NOT HYPRE_DIR)
  message(WARNING "HYPRE_DIR is not specified, building without it.")
else()
  include_directories(${HYPRE_DIR}/include)
  set(HYPRE_LIB "-L${HYPRE_DIR}/lib -lHYPRE")
  list(APPEND COMMON_LIBS ${HYPRE_LIB})
  list(APPEND COMMON_COMPILER_DEFS INS_BUILD_WITH_HYPRE)
endif()

if(NOT HDF5_DIR)
  message(WARNING "HDF5_DIR is not specified")
else()
  include_directories(${HDF5_DIR}/include)
  set(HDF5_LIB "-L${HDF5_DIR}/lib -lhdf5")
  list(APPEND COMMON_LIBS ${HDF5_LIB})
endif()

if(NOT INIPP_DIR)
  message(FATAL_ERROR "INIPP_DIR is not specified")
endif()
include_directories(${INIPP_DIR})

if(BUILD_GPU)
  enable_language(CUDA)
  find_package(CUDAToolkit)
  include_directories(${CUDAToolkit_INCLUDE_DIRS})
  set(CMAKE_CUDA_COMPILER ${CUDAToolkit_NVCC_EXECUTABLE})
  set(CMAKE_CUDA_ARCHITECTURES 70 75)
  if(NOT HYPRE_DIR)
    set(INS_CUDA_LIBS CUDA::cudart_static CUDA::cublas)
  else()
    set(INS_CUDA_LIBS CUDA::cudart_static CUDA::cublas CUDA::nvToolsExt CUDA::cusparse CUDA::cusolver CUDA::curand)
  endif()
endif()

include_directories(${PROJECT_SOURCE_DIR}/include)

set(DIM 2)
add_subdirectory(gen2d)
set(DIM 3)
add_subdirectory(gen3d)
