//
// auto-generated by op2.py
//

//user function
__device__ void advection_surface_tension_gpu( const double *curv, const double *nx,
                                      const double *ny, const double *step_s,
                                      double *st_x, double *st_y) {
  for(int i = 0; i < 10; i++) {


    double delta = 1.0 - fabs(step_s[i]);
    if(fabs(step_s[i]) >= 1.0) {
      delta = 0.0;
    }
    st_x[i] = delta * (curv[i] * nx[i] / weber_cuda);
    st_y[i] = delta * (curv[i] * ny[i] / weber_cuda);
  }

}

// CUDA kernel function
__global__ void op_cuda_advection_surface_tension(
  const double *__restrict arg0,
  const double *__restrict arg1,
  const double *__restrict arg2,
  const double *__restrict arg3,
  double *arg4,
  double *arg5,
  int   set_size ) {


  //process set elements
  for ( int n=threadIdx.x+blockIdx.x*blockDim.x; n<set_size; n+=blockDim.x*gridDim.x ){

    //user-supplied kernel call
    advection_surface_tension_gpu(arg0+n*10,
                              arg1+n*10,
                              arg2+n*10,
                              arg3+n*10,
                              arg4+n*10,
                              arg5+n*10);
  }
}


//host stub function
void op_par_loop_advection_surface_tension(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5){

  int nargs = 6;
  op_arg args[6];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(33);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[33].name      = name;
  OP_kernels[33].count    += 1;


  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  advection_surface_tension");
  }

  int set_size = op_mpi_halo_exchanges_grouped(set, nargs, args, 2);
  if (set_size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_33
      int nthread = OP_BLOCK_SIZE_33;
    #else
      int nthread = OP_block_size;
    #endif

    int nblocks = 200;

    op_cuda_advection_surface_tension<<<nblocks,nthread>>>(
      (double *) arg0.data_d,
      (double *) arg1.data_d,
      (double *) arg2.data_d,
      (double *) arg3.data_d,
      (double *) arg4.data_d,
      (double *) arg5.data_d,
      set->size );
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[33].time     += wall_t2 - wall_t1;
  OP_kernels[33].transfer += (float)set->size * arg0.size;
  OP_kernels[33].transfer += (float)set->size * arg1.size;
  OP_kernels[33].transfer += (float)set->size * arg2.size;
  OP_kernels[33].transfer += (float)set->size * arg3.size;
  OP_kernels[33].transfer += (float)set->size * arg4.size * 2.0f;
  OP_kernels[33].transfer += (float)set->size * arg5.size * 2.0f;
}
