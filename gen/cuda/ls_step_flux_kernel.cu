//
// auto-generated by op2.py
//

//user function
__device__ void ls_step_flux_gpu( const int *edgeNum, const bool *rev,
                         const double **fscale, const double **step,
                         double **flux) {

  int edgeL = edgeNum[0];
  int edgeR = edgeNum[1];
  bool reverse = *rev;

  int exInd = edgeL * 4;
  int *fmaskL = &FMASK_cuda[edgeL * 4];
  int *fmaskR = &FMASK_cuda[edgeR * 4];

  for(int i = 0; i < 4; i++) {
    int lInd = fmaskL[i];
    int rInd;
    if(reverse) {
      rInd = fmaskR[4 - i - 1];
    } else {
      rInd = fmaskR[i];
    }
    double tmp = step[0][lInd] - (step[0][lInd] + step[1][rInd]) / 2.0;
    flux[0][exInd + i] += fscale[0][exInd + i] * tmp;
  }

  exInd = edgeR * 4;

  for(int i = 0; i < 4; i++) {
    int rInd = fmaskR[i];
    int lInd;
    if(reverse) {
      lInd = fmaskL[4 - i - 1];
    } else {
      lInd = fmaskL[i];
    }
    double tmp = step[1][rInd] - (step[0][lInd] + step[1][rInd]) / 2.0;
    flux[1][exInd + i] += fscale[1][exInd + i] * tmp;
  }

}

// CUDA kernel function
__global__ void op_cuda_ls_step_flux(
  const double *__restrict ind_arg0,
  const double *__restrict ind_arg1,
  double *__restrict ind_arg2,
  const int *__restrict opDat2Map,
  const int *__restrict arg0,
  const bool *__restrict arg1,
  int start,
  int end,
  int   set_size) {
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    double arg6_l[12];
    for ( int d=0; d<12; d++ ){
      arg6_l[d] = ZERO_double;
    }
    double arg7_l[12];
    for ( int d=0; d<12; d++ ){
      arg7_l[d] = ZERO_double;
    }
    int map2idx;
    int map3idx;
    map2idx = opDat2Map[n + set_size * 0];
    map3idx = opDat2Map[n + set_size * 1];
    const double* arg2_vec[] = {
       &ind_arg0[12 * map2idx],
       &ind_arg0[12 * map3idx]};
    const double* arg4_vec[] = {
       &ind_arg1[10 * map2idx],
       &ind_arg1[10 * map3idx]};
    double* arg6_vec[] = {
      arg6_l,
      arg7_l};

    //user-supplied kernel call
    ls_step_flux_gpu(arg0+n*2,
                 arg1+n*1,
                 arg2_vec,
                 arg4_vec,
                 arg6_vec);
    atomicAdd(&ind_arg2[0+map2idx*12],arg6_l[0]);
    atomicAdd(&ind_arg2[1+map2idx*12],arg6_l[1]);
    atomicAdd(&ind_arg2[2+map2idx*12],arg6_l[2]);
    atomicAdd(&ind_arg2[3+map2idx*12],arg6_l[3]);
    atomicAdd(&ind_arg2[4+map2idx*12],arg6_l[4]);
    atomicAdd(&ind_arg2[5+map2idx*12],arg6_l[5]);
    atomicAdd(&ind_arg2[6+map2idx*12],arg6_l[6]);
    atomicAdd(&ind_arg2[7+map2idx*12],arg6_l[7]);
    atomicAdd(&ind_arg2[8+map2idx*12],arg6_l[8]);
    atomicAdd(&ind_arg2[9+map2idx*12],arg6_l[9]);
    atomicAdd(&ind_arg2[10+map2idx*12],arg6_l[10]);
    atomicAdd(&ind_arg2[11+map2idx*12],arg6_l[11]);
    atomicAdd(&ind_arg2[0+map3idx*12],arg7_l[0]);
    atomicAdd(&ind_arg2[1+map3idx*12],arg7_l[1]);
    atomicAdd(&ind_arg2[2+map3idx*12],arg7_l[2]);
    atomicAdd(&ind_arg2[3+map3idx*12],arg7_l[3]);
    atomicAdd(&ind_arg2[4+map3idx*12],arg7_l[4]);
    atomicAdd(&ind_arg2[5+map3idx*12],arg7_l[5]);
    atomicAdd(&ind_arg2[6+map3idx*12],arg7_l[6]);
    atomicAdd(&ind_arg2[7+map3idx*12],arg7_l[7]);
    atomicAdd(&ind_arg2[8+map3idx*12],arg7_l[8]);
    atomicAdd(&ind_arg2[9+map3idx*12],arg7_l[9]);
    atomicAdd(&ind_arg2[10+map3idx*12],arg7_l[10]);
    atomicAdd(&ind_arg2[11+map3idx*12],arg7_l[11]);
  }
}


//host stub function
void op_par_loop_ls_step_flux(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg4,
  op_arg arg6){

  int nargs = 8;
  op_arg args[8];

  args[0] = arg0;
  args[1] = arg1;
  arg2.idx = 0;
  args[2] = arg2;
  for ( int v=1; v<2; v++ ){
    args[2 + v] = op_arg_dat(arg2.dat, v, arg2.map, 12, "double", OP_READ);
  }

  arg4.idx = 0;
  args[4] = arg4;
  for ( int v=1; v<2; v++ ){
    args[4 + v] = op_arg_dat(arg4.dat, v, arg4.map, 10, "double", OP_READ);
  }

  arg6.idx = 0;
  args[6] = arg6;
  for ( int v=1; v<2; v++ ){
    args[6 + v] = op_arg_dat(arg6.dat, v, arg6.map, 12, "double", OP_INC);
  }


  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(35);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[35].name      = name;
  OP_kernels[35].count    += 1;


  int    ninds   = 3;
  int    inds[8] = {-1,-1,0,0,1,1,2,2};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: ls_step_flux\n");
  }
  int set_size = op_mpi_halo_exchanges_grouped(set, nargs, args, 2);
  if (set_size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_35
      int nthread = OP_BLOCK_SIZE_35;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_grouped(nargs, args, 2);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_ls_step_flux<<<nblocks,nthread>>>(
        (double *)arg2.data_d,
        (double *)arg4.data_d,
        (double *)arg6.data_d,
        arg2.map_data_d,
        (int*)arg0.data_d,
        (bool*)arg1.data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[35].time     += wall_t2 - wall_t1;
}
