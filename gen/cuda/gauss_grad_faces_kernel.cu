//
// auto-generated by op2.py
//

//user function
__device__ void gauss_grad_faces_gpu( const int *edgeNum, const double **mDx0,
                             const double **mDy0, const double **mDx1,
                             const double **mDy1, const double **mDx2,
                             const double **mDy2, double **pDx0, double **pDy0,
                             double **pDx1, double **pDy1, double **pDx2,
                             double **pDy2) {

  int edgeL = edgeNum[0];
  int edgeR = edgeNum[1];

  for(int m = 0; m < 3; m++) {
    for(int n = 0; n < 3; n++) {
      int indL = m * 3 + n;
      int indR = m * 3 + n;

      if(edgeL == 0) {
        if(edgeR == 0) {
          pDx0[0][indL] += mDx0[1][indR];
          pDy0[0][indL] += mDy0[1][indR];
          pDx0[1][indR] += mDx0[0][indL];
          pDy0[1][indR] += mDy0[0][indL];
        } else if(edgeR == 1) {
          pDx0[0][indL] += mDx1[1][indR];
          pDy0[0][indL] += mDy1[1][indR];
          pDx1[1][indR] += mDx0[0][indL];
          pDy1[1][indR] += mDy0[0][indL];
        } else {
          pDx0[0][indL] += mDx2[1][indR];
          pDy0[0][indL] += mDy2[1][indR];
          pDx2[1][indR] += mDx0[0][indL];
          pDy2[1][indR] += mDy0[0][indL];
        }
      } else if(edgeL == 1) {
        if(edgeR == 0) {
          pDx1[0][indL] += mDx0[1][indR];
          pDy1[0][indL] += mDy0[1][indR];
          pDx0[1][indR] += mDx1[0][indL];
          pDy0[1][indR] += mDy1[0][indL];
        } else if(edgeR == 1) {
          pDx1[0][indL] += mDx1[1][indR];
          pDy1[0][indL] += mDy1[1][indR];
          pDx1[1][indR] += mDx1[0][indL];
          pDy1[1][indR] += mDy1[0][indL];
        } else {
          pDx1[0][indL] += mDx2[1][indR];
          pDy1[0][indL] += mDy2[1][indR];
          pDx2[1][indR] += mDx1[0][indL];
          pDy2[1][indR] += mDy1[0][indL];
        }
      } else {
        if(edgeR == 0) {
          pDx2[0][indL] += mDx0[1][indR];
          pDy2[0][indL] += mDy0[1][indR];
          pDx0[1][indR] += mDx2[0][indL];
          pDy0[1][indR] += mDy2[0][indL];
        } else if(edgeR == 1) {
          pDx2[0][indL] += mDx1[1][indR];
          pDy2[0][indL] += mDy1[1][indR];
          pDx1[1][indR] += mDx2[0][indL];
          pDy1[1][indR] += mDy2[0][indL];
        } else {
          pDx2[0][indL] += mDx2[1][indR];
          pDy2[0][indL] += mDy2[1][indR];
          pDx2[1][indR] += mDx2[0][indL];
          pDy2[1][indR] += mDy2[0][indL];
        }
      }
    }
  }

}

// CUDA kernel function
__global__ void op_cuda_gauss_grad_faces(
  const double *__restrict ind_arg0,
  const double *__restrict ind_arg1,
  const double *__restrict ind_arg2,
  const double *__restrict ind_arg3,
  const double *__restrict ind_arg4,
  const double *__restrict ind_arg5,
  double *__restrict ind_arg6,
  double *__restrict ind_arg7,
  double *__restrict ind_arg8,
  double *__restrict ind_arg9,
  double *__restrict ind_arg10,
  double *__restrict ind_arg11,
  const int *__restrict opDat1Map,
  const int *__restrict arg0,
  int start,
  int end,
  int   set_size) {
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    double arg13_l[9];
    for ( int d=0; d<9; d++ ){
      arg13_l[d] = ZERO_double;
    }
    double arg14_l[9];
    for ( int d=0; d<9; d++ ){
      arg14_l[d] = ZERO_double;
    }
    double arg15_l[9];
    for ( int d=0; d<9; d++ ){
      arg15_l[d] = ZERO_double;
    }
    double arg16_l[9];
    for ( int d=0; d<9; d++ ){
      arg16_l[d] = ZERO_double;
    }
    double arg17_l[9];
    for ( int d=0; d<9; d++ ){
      arg17_l[d] = ZERO_double;
    }
    double arg18_l[9];
    for ( int d=0; d<9; d++ ){
      arg18_l[d] = ZERO_double;
    }
    double arg19_l[9];
    for ( int d=0; d<9; d++ ){
      arg19_l[d] = ZERO_double;
    }
    double arg20_l[9];
    for ( int d=0; d<9; d++ ){
      arg20_l[d] = ZERO_double;
    }
    double arg21_l[9];
    for ( int d=0; d<9; d++ ){
      arg21_l[d] = ZERO_double;
    }
    double arg22_l[9];
    for ( int d=0; d<9; d++ ){
      arg22_l[d] = ZERO_double;
    }
    double arg23_l[9];
    for ( int d=0; d<9; d++ ){
      arg23_l[d] = ZERO_double;
    }
    double arg24_l[9];
    for ( int d=0; d<9; d++ ){
      arg24_l[d] = ZERO_double;
    }
    int map1idx;
    int map2idx;
    map1idx = opDat1Map[n + set_size * 0];
    map2idx = opDat1Map[n + set_size * 1];
    const double* arg1_vec[] = {
       &ind_arg0[9 * map1idx],
       &ind_arg0[9 * map2idx]};
    const double* arg3_vec[] = {
       &ind_arg1[9 * map1idx],
       &ind_arg1[9 * map2idx]};
    const double* arg5_vec[] = {
       &ind_arg2[9 * map1idx],
       &ind_arg2[9 * map2idx]};
    const double* arg7_vec[] = {
       &ind_arg3[9 * map1idx],
       &ind_arg3[9 * map2idx]};
    const double* arg9_vec[] = {
       &ind_arg4[9 * map1idx],
       &ind_arg4[9 * map2idx]};
    const double* arg11_vec[] = {
       &ind_arg5[9 * map1idx],
       &ind_arg5[9 * map2idx]};
    double* arg13_vec[] = {
      arg13_l,
      arg14_l};
    double* arg15_vec[] = {
      arg15_l,
      arg16_l};
    double* arg17_vec[] = {
      arg17_l,
      arg18_l};
    double* arg19_vec[] = {
      arg19_l,
      arg20_l};
    double* arg21_vec[] = {
      arg21_l,
      arg22_l};
    double* arg23_vec[] = {
      arg23_l,
      arg24_l};

    //user-supplied kernel call
    gauss_grad_faces_gpu(arg0+n*2,
                     arg1_vec,
                     arg3_vec,
                     arg5_vec,
                     arg7_vec,
                     arg9_vec,
                     arg11_vec,
                     arg13_vec,
                     arg15_vec,
                     arg17_vec,
                     arg19_vec,
                     arg21_vec,
                     arg23_vec);
    atomicAdd(&ind_arg6[0+map1idx*9],arg13_l[0]);
    atomicAdd(&ind_arg6[1+map1idx*9],arg13_l[1]);
    atomicAdd(&ind_arg6[2+map1idx*9],arg13_l[2]);
    atomicAdd(&ind_arg6[3+map1idx*9],arg13_l[3]);
    atomicAdd(&ind_arg6[4+map1idx*9],arg13_l[4]);
    atomicAdd(&ind_arg6[5+map1idx*9],arg13_l[5]);
    atomicAdd(&ind_arg6[6+map1idx*9],arg13_l[6]);
    atomicAdd(&ind_arg6[7+map1idx*9],arg13_l[7]);
    atomicAdd(&ind_arg6[8+map1idx*9],arg13_l[8]);
    atomicAdd(&ind_arg6[0+map2idx*9],arg14_l[0]);
    atomicAdd(&ind_arg6[1+map2idx*9],arg14_l[1]);
    atomicAdd(&ind_arg6[2+map2idx*9],arg14_l[2]);
    atomicAdd(&ind_arg6[3+map2idx*9],arg14_l[3]);
    atomicAdd(&ind_arg6[4+map2idx*9],arg14_l[4]);
    atomicAdd(&ind_arg6[5+map2idx*9],arg14_l[5]);
    atomicAdd(&ind_arg6[6+map2idx*9],arg14_l[6]);
    atomicAdd(&ind_arg6[7+map2idx*9],arg14_l[7]);
    atomicAdd(&ind_arg6[8+map2idx*9],arg14_l[8]);
    atomicAdd(&ind_arg7[0+map1idx*9],arg15_l[0]);
    atomicAdd(&ind_arg7[1+map1idx*9],arg15_l[1]);
    atomicAdd(&ind_arg7[2+map1idx*9],arg15_l[2]);
    atomicAdd(&ind_arg7[3+map1idx*9],arg15_l[3]);
    atomicAdd(&ind_arg7[4+map1idx*9],arg15_l[4]);
    atomicAdd(&ind_arg7[5+map1idx*9],arg15_l[5]);
    atomicAdd(&ind_arg7[6+map1idx*9],arg15_l[6]);
    atomicAdd(&ind_arg7[7+map1idx*9],arg15_l[7]);
    atomicAdd(&ind_arg7[8+map1idx*9],arg15_l[8]);
    atomicAdd(&ind_arg7[0+map2idx*9],arg16_l[0]);
    atomicAdd(&ind_arg7[1+map2idx*9],arg16_l[1]);
    atomicAdd(&ind_arg7[2+map2idx*9],arg16_l[2]);
    atomicAdd(&ind_arg7[3+map2idx*9],arg16_l[3]);
    atomicAdd(&ind_arg7[4+map2idx*9],arg16_l[4]);
    atomicAdd(&ind_arg7[5+map2idx*9],arg16_l[5]);
    atomicAdd(&ind_arg7[6+map2idx*9],arg16_l[6]);
    atomicAdd(&ind_arg7[7+map2idx*9],arg16_l[7]);
    atomicAdd(&ind_arg7[8+map2idx*9],arg16_l[8]);
    atomicAdd(&ind_arg8[0+map1idx*9],arg17_l[0]);
    atomicAdd(&ind_arg8[1+map1idx*9],arg17_l[1]);
    atomicAdd(&ind_arg8[2+map1idx*9],arg17_l[2]);
    atomicAdd(&ind_arg8[3+map1idx*9],arg17_l[3]);
    atomicAdd(&ind_arg8[4+map1idx*9],arg17_l[4]);
    atomicAdd(&ind_arg8[5+map1idx*9],arg17_l[5]);
    atomicAdd(&ind_arg8[6+map1idx*9],arg17_l[6]);
    atomicAdd(&ind_arg8[7+map1idx*9],arg17_l[7]);
    atomicAdd(&ind_arg8[8+map1idx*9],arg17_l[8]);
    atomicAdd(&ind_arg8[0+map2idx*9],arg18_l[0]);
    atomicAdd(&ind_arg8[1+map2idx*9],arg18_l[1]);
    atomicAdd(&ind_arg8[2+map2idx*9],arg18_l[2]);
    atomicAdd(&ind_arg8[3+map2idx*9],arg18_l[3]);
    atomicAdd(&ind_arg8[4+map2idx*9],arg18_l[4]);
    atomicAdd(&ind_arg8[5+map2idx*9],arg18_l[5]);
    atomicAdd(&ind_arg8[6+map2idx*9],arg18_l[6]);
    atomicAdd(&ind_arg8[7+map2idx*9],arg18_l[7]);
    atomicAdd(&ind_arg8[8+map2idx*9],arg18_l[8]);
    atomicAdd(&ind_arg9[0+map1idx*9],arg19_l[0]);
    atomicAdd(&ind_arg9[1+map1idx*9],arg19_l[1]);
    atomicAdd(&ind_arg9[2+map1idx*9],arg19_l[2]);
    atomicAdd(&ind_arg9[3+map1idx*9],arg19_l[3]);
    atomicAdd(&ind_arg9[4+map1idx*9],arg19_l[4]);
    atomicAdd(&ind_arg9[5+map1idx*9],arg19_l[5]);
    atomicAdd(&ind_arg9[6+map1idx*9],arg19_l[6]);
    atomicAdd(&ind_arg9[7+map1idx*9],arg19_l[7]);
    atomicAdd(&ind_arg9[8+map1idx*9],arg19_l[8]);
    atomicAdd(&ind_arg9[0+map2idx*9],arg20_l[0]);
    atomicAdd(&ind_arg9[1+map2idx*9],arg20_l[1]);
    atomicAdd(&ind_arg9[2+map2idx*9],arg20_l[2]);
    atomicAdd(&ind_arg9[3+map2idx*9],arg20_l[3]);
    atomicAdd(&ind_arg9[4+map2idx*9],arg20_l[4]);
    atomicAdd(&ind_arg9[5+map2idx*9],arg20_l[5]);
    atomicAdd(&ind_arg9[6+map2idx*9],arg20_l[6]);
    atomicAdd(&ind_arg9[7+map2idx*9],arg20_l[7]);
    atomicAdd(&ind_arg9[8+map2idx*9],arg20_l[8]);
    atomicAdd(&ind_arg10[0+map1idx*9],arg21_l[0]);
    atomicAdd(&ind_arg10[1+map1idx*9],arg21_l[1]);
    atomicAdd(&ind_arg10[2+map1idx*9],arg21_l[2]);
    atomicAdd(&ind_arg10[3+map1idx*9],arg21_l[3]);
    atomicAdd(&ind_arg10[4+map1idx*9],arg21_l[4]);
    atomicAdd(&ind_arg10[5+map1idx*9],arg21_l[5]);
    atomicAdd(&ind_arg10[6+map1idx*9],arg21_l[6]);
    atomicAdd(&ind_arg10[7+map1idx*9],arg21_l[7]);
    atomicAdd(&ind_arg10[8+map1idx*9],arg21_l[8]);
    atomicAdd(&ind_arg10[0+map2idx*9],arg22_l[0]);
    atomicAdd(&ind_arg10[1+map2idx*9],arg22_l[1]);
    atomicAdd(&ind_arg10[2+map2idx*9],arg22_l[2]);
    atomicAdd(&ind_arg10[3+map2idx*9],arg22_l[3]);
    atomicAdd(&ind_arg10[4+map2idx*9],arg22_l[4]);
    atomicAdd(&ind_arg10[5+map2idx*9],arg22_l[5]);
    atomicAdd(&ind_arg10[6+map2idx*9],arg22_l[6]);
    atomicAdd(&ind_arg10[7+map2idx*9],arg22_l[7]);
    atomicAdd(&ind_arg10[8+map2idx*9],arg22_l[8]);
    atomicAdd(&ind_arg11[0+map1idx*9],arg23_l[0]);
    atomicAdd(&ind_arg11[1+map1idx*9],arg23_l[1]);
    atomicAdd(&ind_arg11[2+map1idx*9],arg23_l[2]);
    atomicAdd(&ind_arg11[3+map1idx*9],arg23_l[3]);
    atomicAdd(&ind_arg11[4+map1idx*9],arg23_l[4]);
    atomicAdd(&ind_arg11[5+map1idx*9],arg23_l[5]);
    atomicAdd(&ind_arg11[6+map1idx*9],arg23_l[6]);
    atomicAdd(&ind_arg11[7+map1idx*9],arg23_l[7]);
    atomicAdd(&ind_arg11[8+map1idx*9],arg23_l[8]);
    atomicAdd(&ind_arg11[0+map2idx*9],arg24_l[0]);
    atomicAdd(&ind_arg11[1+map2idx*9],arg24_l[1]);
    atomicAdd(&ind_arg11[2+map2idx*9],arg24_l[2]);
    atomicAdd(&ind_arg11[3+map2idx*9],arg24_l[3]);
    atomicAdd(&ind_arg11[4+map2idx*9],arg24_l[4]);
    atomicAdd(&ind_arg11[5+map2idx*9],arg24_l[5]);
    atomicAdd(&ind_arg11[6+map2idx*9],arg24_l[6]);
    atomicAdd(&ind_arg11[7+map2idx*9],arg24_l[7]);
    atomicAdd(&ind_arg11[8+map2idx*9],arg24_l[8]);
  }
}


//host stub function
void op_par_loop_gauss_grad_faces(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg3,
  op_arg arg5,
  op_arg arg7,
  op_arg arg9,
  op_arg arg11,
  op_arg arg13,
  op_arg arg15,
  op_arg arg17,
  op_arg arg19,
  op_arg arg21,
  op_arg arg23){

  int nargs = 25;
  op_arg args[25];

  args[0] = arg0;
  arg1.idx = 0;
  args[1] = arg1;
  for ( int v=1; v<2; v++ ){
    args[1 + v] = op_arg_dat(arg1.dat, v, arg1.map, 9, "double", OP_READ);
  }

  arg3.idx = 0;
  args[3] = arg3;
  for ( int v=1; v<2; v++ ){
    args[3 + v] = op_arg_dat(arg3.dat, v, arg3.map, 9, "double", OP_READ);
  }

  arg5.idx = 0;
  args[5] = arg5;
  for ( int v=1; v<2; v++ ){
    args[5 + v] = op_arg_dat(arg5.dat, v, arg5.map, 9, "double", OP_READ);
  }

  arg7.idx = 0;
  args[7] = arg7;
  for ( int v=1; v<2; v++ ){
    args[7 + v] = op_arg_dat(arg7.dat, v, arg7.map, 9, "double", OP_READ);
  }

  arg9.idx = 0;
  args[9] = arg9;
  for ( int v=1; v<2; v++ ){
    args[9 + v] = op_arg_dat(arg9.dat, v, arg9.map, 9, "double", OP_READ);
  }

  arg11.idx = 0;
  args[11] = arg11;
  for ( int v=1; v<2; v++ ){
    args[11 + v] = op_arg_dat(arg11.dat, v, arg11.map, 9, "double", OP_READ);
  }

  arg13.idx = 0;
  args[13] = arg13;
  for ( int v=1; v<2; v++ ){
    args[13 + v] = op_arg_dat(arg13.dat, v, arg13.map, 9, "double", OP_INC);
  }

  arg15.idx = 0;
  args[15] = arg15;
  for ( int v=1; v<2; v++ ){
    args[15 + v] = op_arg_dat(arg15.dat, v, arg15.map, 9, "double", OP_INC);
  }

  arg17.idx = 0;
  args[17] = arg17;
  for ( int v=1; v<2; v++ ){
    args[17 + v] = op_arg_dat(arg17.dat, v, arg17.map, 9, "double", OP_INC);
  }

  arg19.idx = 0;
  args[19] = arg19;
  for ( int v=1; v<2; v++ ){
    args[19 + v] = op_arg_dat(arg19.dat, v, arg19.map, 9, "double", OP_INC);
  }

  arg21.idx = 0;
  args[21] = arg21;
  for ( int v=1; v<2; v++ ){
    args[21 + v] = op_arg_dat(arg21.dat, v, arg21.map, 9, "double", OP_INC);
  }

  arg23.idx = 0;
  args[23] = arg23;
  for ( int v=1; v<2; v++ ){
    args[23 + v] = op_arg_dat(arg23.dat, v, arg23.map, 9, "double", OP_INC);
  }


  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(9);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[9].name      = name;
  OP_kernels[9].count    += 1;


  int    ninds   = 12;
  int    inds[25] = {-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: gauss_grad_faces\n");
  }
  int set_size = op_mpi_halo_exchanges_grouped(set, nargs, args, 2);
  if (set_size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_9
      int nthread = OP_BLOCK_SIZE_9;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_grouped(nargs, args, 2);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_gauss_grad_faces<<<nblocks,nthread>>>(
        (double *)arg1.data_d,
        (double *)arg3.data_d,
        (double *)arg5.data_d,
        (double *)arg7.data_d,
        (double *)arg9.data_d,
        (double *)arg11.data_d,
        (double *)arg13.data_d,
        (double *)arg15.data_d,
        (double *)arg17.data_d,
        (double *)arg19.data_d,
        (double *)arg21.data_d,
        (double *)arg23.data_d,
        arg1.map_data_d,
        (int*)arg0.data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[9].time     += wall_t2 - wall_t1;
}
