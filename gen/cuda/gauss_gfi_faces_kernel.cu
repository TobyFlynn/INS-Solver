//
// auto-generated by op2.py
//

//user function
__device__ void gauss_gfi_faces_gpu( const int *edgeNum, const bool *rev,
                            double **gf0, double **gf1, double **gf2) {

  int edgeL = edgeNum[0];
  int edgeR = edgeNum[1];
  bool reverse = *rev;

  for(int m = 0; m < 4; m++) {
    for(int n = 0; n < 6; n++) {
      int indL, indR;
      if(!reverse) {
        indL = m * 6 + n;
        indR = m * 6 + n;
      } else {
        indL = m * 6 + n;
        indR = (4 - 1 - m) * 6 + n;
      }

      if(edgeL == 0) {
        if(edgeR == 0) {
          gf0[0][indL] += gFInterp0_g_cuda[indR];
          gf0[1][indR] += gFInterp0_g_cuda[indL];
        } else if(edgeR == 1) {
          gf0[0][indL] += gFInterp1_g_cuda[indR];
          gf1[1][indR] += gFInterp0_g_cuda[indL];
        } else {
          gf0[0][indL] += gFInterp2_g_cuda[indR];
          gf2[1][indR] += gFInterp0_g_cuda[indL];
        }
      } else if(edgeL == 1) {
        if(edgeR == 0) {
          gf1[0][indL] += gFInterp0_g_cuda[indR];
          gf0[1][indR] += gFInterp1_g_cuda[indL];
        } else if(edgeR == 1) {
          gf1[0][indL] += gFInterp1_g_cuda[indR];
          gf1[1][indR] += gFInterp1_g_cuda[indL];
        } else {
          gf1[0][indL] += gFInterp2_g_cuda[indR];
          gf2[1][indR] += gFInterp1_g_cuda[indL];
        }
      } else {
        if(edgeR == 0) {
          gf2[0][indL] += gFInterp0_g_cuda[indR];
          gf0[1][indR] += gFInterp2_g_cuda[indL];
        } else if(edgeR == 1) {
          gf2[0][indL] += gFInterp1_g_cuda[indR];
          gf1[1][indR] += gFInterp2_g_cuda[indL];
        } else {
          gf2[0][indL] += gFInterp2_g_cuda[indR];
          gf2[1][indR] += gFInterp2_g_cuda[indL];
        }
      }
    }
  }

}

// CUDA kernel function
__global__ void op_cuda_gauss_gfi_faces(
  double *__restrict ind_arg0,
  double *__restrict ind_arg1,
  double *__restrict ind_arg2,
  const int *__restrict opDat2Map,
  const int *__restrict arg0,
  const bool *__restrict arg1,
  int start,
  int end,
  int   set_size) {
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    double arg2_l[24];
    for ( int d=0; d<24; d++ ){
      arg2_l[d] = ZERO_double;
    }
    double arg3_l[24];
    for ( int d=0; d<24; d++ ){
      arg3_l[d] = ZERO_double;
    }
    double arg4_l[24];
    for ( int d=0; d<24; d++ ){
      arg4_l[d] = ZERO_double;
    }
    double arg5_l[24];
    for ( int d=0; d<24; d++ ){
      arg5_l[d] = ZERO_double;
    }
    double arg6_l[24];
    for ( int d=0; d<24; d++ ){
      arg6_l[d] = ZERO_double;
    }
    double arg7_l[24];
    for ( int d=0; d<24; d++ ){
      arg7_l[d] = ZERO_double;
    }
    int map2idx;
    int map3idx;
    map2idx = opDat2Map[n + set_size * 0];
    map3idx = opDat2Map[n + set_size * 1];
    double* arg2_vec[] = {
      arg2_l,
      arg3_l};
    double* arg4_vec[] = {
      arg4_l,
      arg5_l};
    double* arg6_vec[] = {
      arg6_l,
      arg7_l};

    //user-supplied kernel call
    gauss_gfi_faces_gpu(arg0+n*2,
                    arg1+n*1,
                    arg2_vec,
                    arg4_vec,
                    arg6_vec);
    atomicAdd(&ind_arg0[0+map2idx*24],arg2_l[0]);
    atomicAdd(&ind_arg0[1+map2idx*24],arg2_l[1]);
    atomicAdd(&ind_arg0[2+map2idx*24],arg2_l[2]);
    atomicAdd(&ind_arg0[3+map2idx*24],arg2_l[3]);
    atomicAdd(&ind_arg0[4+map2idx*24],arg2_l[4]);
    atomicAdd(&ind_arg0[5+map2idx*24],arg2_l[5]);
    atomicAdd(&ind_arg0[6+map2idx*24],arg2_l[6]);
    atomicAdd(&ind_arg0[7+map2idx*24],arg2_l[7]);
    atomicAdd(&ind_arg0[8+map2idx*24],arg2_l[8]);
    atomicAdd(&ind_arg0[9+map2idx*24],arg2_l[9]);
    atomicAdd(&ind_arg0[10+map2idx*24],arg2_l[10]);
    atomicAdd(&ind_arg0[11+map2idx*24],arg2_l[11]);
    atomicAdd(&ind_arg0[12+map2idx*24],arg2_l[12]);
    atomicAdd(&ind_arg0[13+map2idx*24],arg2_l[13]);
    atomicAdd(&ind_arg0[14+map2idx*24],arg2_l[14]);
    atomicAdd(&ind_arg0[15+map2idx*24],arg2_l[15]);
    atomicAdd(&ind_arg0[16+map2idx*24],arg2_l[16]);
    atomicAdd(&ind_arg0[17+map2idx*24],arg2_l[17]);
    atomicAdd(&ind_arg0[18+map2idx*24],arg2_l[18]);
    atomicAdd(&ind_arg0[19+map2idx*24],arg2_l[19]);
    atomicAdd(&ind_arg0[20+map2idx*24],arg2_l[20]);
    atomicAdd(&ind_arg0[21+map2idx*24],arg2_l[21]);
    atomicAdd(&ind_arg0[22+map2idx*24],arg2_l[22]);
    atomicAdd(&ind_arg0[23+map2idx*24],arg2_l[23]);
    atomicAdd(&ind_arg0[0+map3idx*24],arg3_l[0]);
    atomicAdd(&ind_arg0[1+map3idx*24],arg3_l[1]);
    atomicAdd(&ind_arg0[2+map3idx*24],arg3_l[2]);
    atomicAdd(&ind_arg0[3+map3idx*24],arg3_l[3]);
    atomicAdd(&ind_arg0[4+map3idx*24],arg3_l[4]);
    atomicAdd(&ind_arg0[5+map3idx*24],arg3_l[5]);
    atomicAdd(&ind_arg0[6+map3idx*24],arg3_l[6]);
    atomicAdd(&ind_arg0[7+map3idx*24],arg3_l[7]);
    atomicAdd(&ind_arg0[8+map3idx*24],arg3_l[8]);
    atomicAdd(&ind_arg0[9+map3idx*24],arg3_l[9]);
    atomicAdd(&ind_arg0[10+map3idx*24],arg3_l[10]);
    atomicAdd(&ind_arg0[11+map3idx*24],arg3_l[11]);
    atomicAdd(&ind_arg0[12+map3idx*24],arg3_l[12]);
    atomicAdd(&ind_arg0[13+map3idx*24],arg3_l[13]);
    atomicAdd(&ind_arg0[14+map3idx*24],arg3_l[14]);
    atomicAdd(&ind_arg0[15+map3idx*24],arg3_l[15]);
    atomicAdd(&ind_arg0[16+map3idx*24],arg3_l[16]);
    atomicAdd(&ind_arg0[17+map3idx*24],arg3_l[17]);
    atomicAdd(&ind_arg0[18+map3idx*24],arg3_l[18]);
    atomicAdd(&ind_arg0[19+map3idx*24],arg3_l[19]);
    atomicAdd(&ind_arg0[20+map3idx*24],arg3_l[20]);
    atomicAdd(&ind_arg0[21+map3idx*24],arg3_l[21]);
    atomicAdd(&ind_arg0[22+map3idx*24],arg3_l[22]);
    atomicAdd(&ind_arg0[23+map3idx*24],arg3_l[23]);
    atomicAdd(&ind_arg1[0+map2idx*24],arg4_l[0]);
    atomicAdd(&ind_arg1[1+map2idx*24],arg4_l[1]);
    atomicAdd(&ind_arg1[2+map2idx*24],arg4_l[2]);
    atomicAdd(&ind_arg1[3+map2idx*24],arg4_l[3]);
    atomicAdd(&ind_arg1[4+map2idx*24],arg4_l[4]);
    atomicAdd(&ind_arg1[5+map2idx*24],arg4_l[5]);
    atomicAdd(&ind_arg1[6+map2idx*24],arg4_l[6]);
    atomicAdd(&ind_arg1[7+map2idx*24],arg4_l[7]);
    atomicAdd(&ind_arg1[8+map2idx*24],arg4_l[8]);
    atomicAdd(&ind_arg1[9+map2idx*24],arg4_l[9]);
    atomicAdd(&ind_arg1[10+map2idx*24],arg4_l[10]);
    atomicAdd(&ind_arg1[11+map2idx*24],arg4_l[11]);
    atomicAdd(&ind_arg1[12+map2idx*24],arg4_l[12]);
    atomicAdd(&ind_arg1[13+map2idx*24],arg4_l[13]);
    atomicAdd(&ind_arg1[14+map2idx*24],arg4_l[14]);
    atomicAdd(&ind_arg1[15+map2idx*24],arg4_l[15]);
    atomicAdd(&ind_arg1[16+map2idx*24],arg4_l[16]);
    atomicAdd(&ind_arg1[17+map2idx*24],arg4_l[17]);
    atomicAdd(&ind_arg1[18+map2idx*24],arg4_l[18]);
    atomicAdd(&ind_arg1[19+map2idx*24],arg4_l[19]);
    atomicAdd(&ind_arg1[20+map2idx*24],arg4_l[20]);
    atomicAdd(&ind_arg1[21+map2idx*24],arg4_l[21]);
    atomicAdd(&ind_arg1[22+map2idx*24],arg4_l[22]);
    atomicAdd(&ind_arg1[23+map2idx*24],arg4_l[23]);
    atomicAdd(&ind_arg1[0+map3idx*24],arg5_l[0]);
    atomicAdd(&ind_arg1[1+map3idx*24],arg5_l[1]);
    atomicAdd(&ind_arg1[2+map3idx*24],arg5_l[2]);
    atomicAdd(&ind_arg1[3+map3idx*24],arg5_l[3]);
    atomicAdd(&ind_arg1[4+map3idx*24],arg5_l[4]);
    atomicAdd(&ind_arg1[5+map3idx*24],arg5_l[5]);
    atomicAdd(&ind_arg1[6+map3idx*24],arg5_l[6]);
    atomicAdd(&ind_arg1[7+map3idx*24],arg5_l[7]);
    atomicAdd(&ind_arg1[8+map3idx*24],arg5_l[8]);
    atomicAdd(&ind_arg1[9+map3idx*24],arg5_l[9]);
    atomicAdd(&ind_arg1[10+map3idx*24],arg5_l[10]);
    atomicAdd(&ind_arg1[11+map3idx*24],arg5_l[11]);
    atomicAdd(&ind_arg1[12+map3idx*24],arg5_l[12]);
    atomicAdd(&ind_arg1[13+map3idx*24],arg5_l[13]);
    atomicAdd(&ind_arg1[14+map3idx*24],arg5_l[14]);
    atomicAdd(&ind_arg1[15+map3idx*24],arg5_l[15]);
    atomicAdd(&ind_arg1[16+map3idx*24],arg5_l[16]);
    atomicAdd(&ind_arg1[17+map3idx*24],arg5_l[17]);
    atomicAdd(&ind_arg1[18+map3idx*24],arg5_l[18]);
    atomicAdd(&ind_arg1[19+map3idx*24],arg5_l[19]);
    atomicAdd(&ind_arg1[20+map3idx*24],arg5_l[20]);
    atomicAdd(&ind_arg1[21+map3idx*24],arg5_l[21]);
    atomicAdd(&ind_arg1[22+map3idx*24],arg5_l[22]);
    atomicAdd(&ind_arg1[23+map3idx*24],arg5_l[23]);
    atomicAdd(&ind_arg2[0+map2idx*24],arg6_l[0]);
    atomicAdd(&ind_arg2[1+map2idx*24],arg6_l[1]);
    atomicAdd(&ind_arg2[2+map2idx*24],arg6_l[2]);
    atomicAdd(&ind_arg2[3+map2idx*24],arg6_l[3]);
    atomicAdd(&ind_arg2[4+map2idx*24],arg6_l[4]);
    atomicAdd(&ind_arg2[5+map2idx*24],arg6_l[5]);
    atomicAdd(&ind_arg2[6+map2idx*24],arg6_l[6]);
    atomicAdd(&ind_arg2[7+map2idx*24],arg6_l[7]);
    atomicAdd(&ind_arg2[8+map2idx*24],arg6_l[8]);
    atomicAdd(&ind_arg2[9+map2idx*24],arg6_l[9]);
    atomicAdd(&ind_arg2[10+map2idx*24],arg6_l[10]);
    atomicAdd(&ind_arg2[11+map2idx*24],arg6_l[11]);
    atomicAdd(&ind_arg2[12+map2idx*24],arg6_l[12]);
    atomicAdd(&ind_arg2[13+map2idx*24],arg6_l[13]);
    atomicAdd(&ind_arg2[14+map2idx*24],arg6_l[14]);
    atomicAdd(&ind_arg2[15+map2idx*24],arg6_l[15]);
    atomicAdd(&ind_arg2[16+map2idx*24],arg6_l[16]);
    atomicAdd(&ind_arg2[17+map2idx*24],arg6_l[17]);
    atomicAdd(&ind_arg2[18+map2idx*24],arg6_l[18]);
    atomicAdd(&ind_arg2[19+map2idx*24],arg6_l[19]);
    atomicAdd(&ind_arg2[20+map2idx*24],arg6_l[20]);
    atomicAdd(&ind_arg2[21+map2idx*24],arg6_l[21]);
    atomicAdd(&ind_arg2[22+map2idx*24],arg6_l[22]);
    atomicAdd(&ind_arg2[23+map2idx*24],arg6_l[23]);
    atomicAdd(&ind_arg2[0+map3idx*24],arg7_l[0]);
    atomicAdd(&ind_arg2[1+map3idx*24],arg7_l[1]);
    atomicAdd(&ind_arg2[2+map3idx*24],arg7_l[2]);
    atomicAdd(&ind_arg2[3+map3idx*24],arg7_l[3]);
    atomicAdd(&ind_arg2[4+map3idx*24],arg7_l[4]);
    atomicAdd(&ind_arg2[5+map3idx*24],arg7_l[5]);
    atomicAdd(&ind_arg2[6+map3idx*24],arg7_l[6]);
    atomicAdd(&ind_arg2[7+map3idx*24],arg7_l[7]);
    atomicAdd(&ind_arg2[8+map3idx*24],arg7_l[8]);
    atomicAdd(&ind_arg2[9+map3idx*24],arg7_l[9]);
    atomicAdd(&ind_arg2[10+map3idx*24],arg7_l[10]);
    atomicAdd(&ind_arg2[11+map3idx*24],arg7_l[11]);
    atomicAdd(&ind_arg2[12+map3idx*24],arg7_l[12]);
    atomicAdd(&ind_arg2[13+map3idx*24],arg7_l[13]);
    atomicAdd(&ind_arg2[14+map3idx*24],arg7_l[14]);
    atomicAdd(&ind_arg2[15+map3idx*24],arg7_l[15]);
    atomicAdd(&ind_arg2[16+map3idx*24],arg7_l[16]);
    atomicAdd(&ind_arg2[17+map3idx*24],arg7_l[17]);
    atomicAdd(&ind_arg2[18+map3idx*24],arg7_l[18]);
    atomicAdd(&ind_arg2[19+map3idx*24],arg7_l[19]);
    atomicAdd(&ind_arg2[20+map3idx*24],arg7_l[20]);
    atomicAdd(&ind_arg2[21+map3idx*24],arg7_l[21]);
    atomicAdd(&ind_arg2[22+map3idx*24],arg7_l[22]);
    atomicAdd(&ind_arg2[23+map3idx*24],arg7_l[23]);
  }
}


//host stub function
void op_par_loop_gauss_gfi_faces(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg4,
  op_arg arg6){

  int nargs = 8;
  op_arg args[8];

  args[0] = arg0;
  args[1] = arg1;
  arg2.idx = 0;
  args[2] = arg2;
  for ( int v=1; v<2; v++ ){
    args[2 + v] = op_arg_dat(arg2.dat, v, arg2.map, 24, "double", OP_INC);
  }

  arg4.idx = 0;
  args[4] = arg4;
  for ( int v=1; v<2; v++ ){
    args[4 + v] = op_arg_dat(arg4.dat, v, arg4.map, 24, "double", OP_INC);
  }

  arg6.idx = 0;
  args[6] = arg6;
  for ( int v=1; v<2; v++ ){
    args[6 + v] = op_arg_dat(arg6.dat, v, arg6.map, 24, "double", OP_INC);
  }


  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(11);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[11].name      = name;
  OP_kernels[11].count    += 1;


  int    ninds   = 3;
  int    inds[8] = {-1,-1,0,0,1,1,2,2};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: gauss_gfi_faces\n");
  }
  int set_size = op_mpi_halo_exchanges_grouped(set, nargs, args, 2);
  if (set_size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_11
      int nthread = OP_BLOCK_SIZE_11;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_grouped(nargs, args, 2);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_gauss_gfi_faces<<<nblocks,nthread>>>(
        (double *)arg2.data_d,
        (double *)arg4.data_d,
        (double *)arg6.data_d,
        arg2.map_data_d,
        (int*)arg0.data_d,
        (bool*)arg1.data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[11].time     += wall_t2 - wall_t1;
}
