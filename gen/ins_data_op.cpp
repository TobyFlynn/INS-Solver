//
// auto-generated by op2.py
//

#include "ins_data.h"

#include  "op_lib_cpp.h"

//
// op_par_loop declarations
//
#ifdef OPENACC
#ifdef __cplusplus
extern "C" {
#endif
#endif

void op_par_loop_init_nu_rho(char const *, op_set,
  op_arg,
  op_arg );

void op_par_loop_init_cubature_grad(char const *, op_set,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg );

void op_par_loop_gauss_reverse(char const *, op_set,
  op_arg,
  op_arg,
  op_arg,
  op_arg );

void op_par_loop_init_gauss_grad(char const *, op_set,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg );

void op_par_loop_init_gauss_grad3(char const *, op_set,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg );

void op_par_loop_init_gauss_grad4(char const *, op_set,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg );

void op_par_loop_init_gauss_grad_neighbour(char const *, op_set,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg );

void op_par_loop_init_gauss_grad5(char const *, op_set,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg,
  op_arg );

void op_par_loop_gauss_gfi_faces2(char const *, op_set,
  op_arg,
  op_arg,
  op_arg,
  op_arg );
#ifdef OPENACC
#ifdef __cplusplus
}
#endif
#endif


#include <string>
#include <memory>

#include "dg_blas_calls.h"
#include "dg_compiler_defs.h"
#include "blas_calls.h"

#include "constants.h"

using namespace std;

INSData::INSData(DGMesh *m) {
  mesh = m;

  for(int i = 0; i < 10; i++) {
    tmp_dg_np_data[i] = (double *)calloc(10 * mesh->numCells, sizeof(double));
  }
  for(int i = 0; i < 4; i++) {
    tmp_dg_g_np_data[i] = (double *)calloc(18 * mesh->numCells, sizeof(double));
  }
  for(int i = 0; i < 2; i++) {
    Q_data[0][i]        = (double *)calloc(10 * mesh->numCells, sizeof(double));
    Q_data[1][i]        = (double *)calloc(10 * mesh->numCells, sizeof(double));
    QT_data[i]          = (double *)calloc(10 * mesh->numCells, sizeof(double));
    QTT_data[i]         = (double *)calloc(10 * mesh->numCells, sizeof(double));
    N_data[0][i]        = (double *)calloc(10 * mesh->numCells, sizeof(double));
    N_data[1][i]        = (double *)calloc(10 * mesh->numCells, sizeof(double));
    surf_ten_data[0][i] = (double *)calloc(10 * mesh->numCells, sizeof(double));
    surf_ten_data[1][i] = (double *)calloc(10 * mesh->numCells, sizeof(double));
    dPdN_data[i]        = (double *)calloc(3 * 4 * mesh->numCells, sizeof(double));
    tmp_dg_npf_data[i]  = (double *)calloc(3 * 4 * mesh->numCells, sizeof(double));
  }
  p_data         = (double *)calloc(10 * mesh->numCells, sizeof(double));
  vorticity_data = (double *)calloc(10 * mesh->numCells, sizeof(double));
  save_temp_data = (double *)calloc(9 * mesh->numCells, sizeof(double));
  nu_data        = (double *)calloc(10 * mesh->numCells, sizeof(double));
  gNu_data       = (double *)calloc(18 * mesh->numCells, sizeof(double));
  rho_data       = (double *)calloc(10 * mesh->numCells, sizeof(double));

  Dx_data    = (double *)calloc(36 * 10 * mesh->numCells, sizeof(double));
  Dy_data    = (double *)calloc(36 * 10 * mesh->numCells, sizeof(double));

  grx_data     = (double *)calloc(18 * mesh->numCells, sizeof(double));
  gsx_data     = (double *)calloc(18 * mesh->numCells, sizeof(double));
  gry_data     = (double *)calloc(18 * mesh->numCells, sizeof(double));
  gsy_data     = (double *)calloc(18 * mesh->numCells, sizeof(double));
  reverse_data = (int *)calloc(3 * mesh->numCells, sizeof(int));
  for(int i = 0; i < 3; i++) {
    mDx_data[i]  = (double *)calloc(6 * 10 * mesh->numCells, sizeof(double));
    mDy_data[i]  = (double *)calloc(6 * 10 * mesh->numCells, sizeof(double));
  }

  mDL_data  = (double *)calloc(6 * 10 * mesh->numEdges, sizeof(double));
  mDR_data  = (double *)calloc(6 * 10 * mesh->numEdges, sizeof(double));
  mDBC_data = (double *)calloc(6 * 10 * mesh->numBoundaryEdges, sizeof(double));
  pDL_data  = (double *)calloc(6 * 10 * mesh->numEdges, sizeof(double));
  pDR_data  = (double *)calloc(6 * 10 * mesh->numEdges, sizeof(double));
  gVPL_data = (double *)calloc(6 * 10 * mesh->numEdges, sizeof(double));
  gVPR_data = (double *)calloc(6 * 10 * mesh->numEdges, sizeof(double));

  for(int i = 0; i < 10; i++) {
    string name  = "tmp_dg_np" + to_string(i);
    tmp_dg_np[i] = op_decl_dat(mesh->cells, 10, "double", tmp_dg_np_data[i], name.c_str());
  }
  for(int i = 0; i < 4; i++) {
    string name  = "tmp_dg_g_np" + to_string(i);
    tmp_dg_g_np[i] = op_decl_dat(mesh->cells, 18, "double", tmp_dg_g_np_data[i], name.c_str());
  }
  for(int i = 0; i < 2; i++) {
    string name    = "Q0" + to_string(i);
    Q[0][i]        = op_decl_dat(mesh->cells, 10, "double", Q_data[0][i], name.c_str());
    name           = "Q1" + to_string(i);
    Q[1][i]        = op_decl_dat(mesh->cells, 10, "double", Q_data[1][i], name.c_str());
    name           = "QT" + to_string(i);
    QT[i]          = op_decl_dat(mesh->cells, 10, "double", QT_data[i], name.c_str());
    name           = "QTT" + to_string(i);
    QTT[i]         = op_decl_dat(mesh->cells, 10, "double", QTT_data[i], name.c_str());
    name           = "N0" + to_string(i);
    N[0][i]        = op_decl_dat(mesh->cells, 10, "double", N_data[0][i], name.c_str());
    name           = "N1" + to_string(i);
    N[1][i]        = op_decl_dat(mesh->cells, 10, "double", N_data[1][i], name.c_str());
    name           = "surf_ten0" + to_string(i);
    surf_ten[0][i] = op_decl_dat(mesh->cells, 10, "double", surf_ten_data[0][i], name.c_str());
    name           = "surf_ten1" + to_string(i);
    surf_ten[1][i] = op_decl_dat(mesh->cells, 10, "double", surf_ten_data[1][i], name.c_str());
    name           = "dPdN" + to_string(i);
    dPdN[i]        = op_decl_dat(mesh->cells, 3 * 4, "double", dPdN_data[i], name.c_str());
    name           = "tmp_dg_npf" + to_string(i);
    tmp_dg_npf[i]  = op_decl_dat(mesh->cells, 3 * 4, "double", tmp_dg_npf_data[i], name.c_str());
  }
  p         = op_decl_dat(mesh->cells, 10, "double", p_data, "p");
  vorticity = op_decl_dat(mesh->cells, 10, "double", vorticity_data, "vorticity");
  save_temp = op_decl_dat(mesh->cells, 9, "double", save_temp_data, "save_temp");
  nu        = op_decl_dat(mesh->cells, 10, "double", nu_data, "nu");
  gNu       = op_decl_dat(mesh->cells, 18, "double", gNu_data, "gNu");
  rho       = op_decl_dat(mesh->cells, 10, "double", rho_data, "rho");

  Dx    = op_decl_dat(mesh->cells, 36 * 10, "double", Dx_data, "cub-Dx");
  Dy    = op_decl_dat(mesh->cells, 36 * 10, "double", Dy_data, "cub-Dy");

  grx     = op_decl_dat(mesh->cells, 18, "double", grx_data, "gauss-grx");
  gsx     = op_decl_dat(mesh->cells, 18, "double", gsx_data, "gauss-gsx");
  gry     = op_decl_dat(mesh->cells, 18, "double", gry_data, "gauss-gry");
  gsy     = op_decl_dat(mesh->cells, 18, "double", gsy_data, "gauss-gsy");
  reverse = op_decl_dat(mesh->cells, 3, "int", reverse_data, "gauss-reverse");

  for(int i = 0; i < 3; i++) {
    string name = "gauss-mDx" + to_string(i);
    mDx[i]      = op_decl_dat(mesh->cells, 6 * 10, "double", mDx_data[i], name.c_str());
    name        = "gauss-mDy" + to_string(i);
    mDy[i]      = op_decl_dat(mesh->cells, 6 * 10, "double", mDy_data[i], name.c_str());
  }

  mDL  = op_decl_dat(mesh->edges, 6 * 10, "double", mDL_data, "mDL");
  mDR  = op_decl_dat(mesh->edges, 6 * 10, "double", mDR_data, "mDR");
  mDBC = op_decl_dat(mesh->bedges, 6 * 10, "double", mDBC_data, "mDBC");
  pDL  = op_decl_dat(mesh->edges, 6 * 10, "double", pDL_data, "pDL");
  pDR  = op_decl_dat(mesh->edges, 6 * 10, "double", pDR_data, "pDR");
  gVPL = op_decl_dat(mesh->edges, 6 * 10, "double", gVPL_data, "gVPL");
  gVPR = op_decl_dat(mesh->edges, 6 * 10, "double", gVPR_data, "gVPR");

  op_decl_const2("reynolds",1,"double",&reynolds);
  op_decl_const2("froude",1,"double",&froude);
  op_decl_const2("weber",1,"double",&weber);
  op_decl_const2("nu0",1,"double",&nu0);
  op_decl_const2("nu1",1,"double",&nu1);
  op_decl_const2("rho0",1,"double",&rho0);
  op_decl_const2("rho1",1,"double",&rho1);
  op_decl_const2("FMASK",12,"int",FMASK);
  op_decl_const2("ic_u",1,"double",&ic_u);
  op_decl_const2("ic_v",1,"double",&ic_v);
  op_decl_const2("cubW_g",36,"double",cubW_g);
  op_decl_const2("cubV_g",360,"double",cubV_g);
  op_decl_const2("cubVDr_g",360,"double",cubVDr_g);
  op_decl_const2("cubVDs_g",360,"double",cubVDs_g);
  op_decl_const2("gF0Dr_g",60,"double",gF0Dr_g);
  op_decl_const2("gF0Ds_g",60,"double",gF0Ds_g);
  op_decl_const2("gF1Dr_g",60,"double",gF1Dr_g);
  op_decl_const2("gF1Ds_g",60,"double",gF1Ds_g);
  op_decl_const2("gF2Dr_g",60,"double",gF2Dr_g);
  op_decl_const2("gF2Ds_g",60,"double",gF2Ds_g);
  op_decl_const2("gaussW_g",6,"double",gaussW_g);
  op_decl_const2("gFInterp0_g",60,"double",gFInterp0_g);
  op_decl_const2("gFInterp1_g",60,"double",gFInterp1_g);
  op_decl_const2("gFInterp2_g",60,"double",gFInterp2_g);
  op_decl_const2("gF0DrR_g",60,"double",gF0DrR_g);
  op_decl_const2("gF0DsR_g",60,"double",gF0DsR_g);
  op_decl_const2("gF1DrR_g",60,"double",gF1DrR_g);
  op_decl_const2("gF1DsR_g",60,"double",gF1DsR_g);
  op_decl_const2("gF2DrR_g",60,"double",gF2DrR_g);
  op_decl_const2("gF2DsR_g",60,"double",gF2DsR_g);
  op_decl_const2("gFInterp0R_g",60,"double",gFInterp0R_g);
  op_decl_const2("gFInterp1R_g",60,"double",gFInterp1R_g);
  op_decl_const2("gFInterp2R_g",60,"double",gFInterp2R_g);
}

INSData::~INSData() {
  for(int i = 0; i < 10; i++) {
    free(tmp_dg_np_data[i]);
  }
  for(int i = 0; i < 4; i++) {
    free(tmp_dg_g_np_data[i]);
  }
  for(int i = 0; i < 2; i++) {
    free(Q_data[0][i]);
    free(Q_data[1][i]);
    free(QT_data[i]);
    free(QTT_data[i]);
    free(N_data[0][i]);
    free(N_data[1][i]);
    free(surf_ten_data[0][i]);
    free(surf_ten_data[1][i]);
    free(dPdN_data[i]);
    free(tmp_dg_npf_data[i]);
  }
  free(p_data);
  free(vorticity_data);
  free(save_temp_data);
  free(nu_data);
  free(gNu_data);
  free(rho_data);

  free(Dx_data);
  free(Dy_data);

  free(grx_data);
  free(gsx_data);
  free(gry_data);
  free(gsy_data);
  free(reverse_data);
  for(int i = 0; i < 3; i++) {
    free(mDx_data[i]);
    free(mDy_data[i]);
  }

  free(mDL_data);
  free(mDR_data);
  free(mDBC_data);
  free(pDL_data);
  free(pDR_data);
  free(gVPL_data);
  free(gVPR_data);
}

void INSData::init() {
  // Set up dats that share a storage dat
  F[0] = tmp_dg_np[0];
  F[1] = tmp_dg_np[1];
  F[2] = tmp_dg_np[2];
  F[3] = tmp_dg_np[3];

  divVelT        = tmp_dg_np[0];
  curlVel        = tmp_dg_np[1];
  gradCurlVel[0] = tmp_dg_np[2];
  gradCurlVel[1] = tmp_dg_np[3];

  pRHS       = tmp_dg_np[1];
  dpdx       = tmp_dg_np[2];
  dpdy       = tmp_dg_np[3];
  visRHS[0]  = tmp_dg_np[0];
  visRHS[1]  = tmp_dg_np[1];
  visTemp[0] = tmp_dg_np[2];
  visTemp[1] = tmp_dg_np[3];

  flux[0] = tmp_dg_npf[0];
  flux[1] = tmp_dg_npf[1];
  pFluxX  = tmp_dg_npf[0];
  pFluxY  = tmp_dg_npf[1];

  prBC     = tmp_dg_g_np[0];
  visBC[0] = tmp_dg_g_np[1];
  visBC[1] = tmp_dg_g_np[2];

  // Regular grid point init
  op_par_loop_init_nu_rho("init_nu_rho",mesh->cells,
              op_arg_dat(nu,-1,OP_ID,10,"double",OP_WRITE),
              op_arg_dat(rho,-1,OP_ID,10,"double",OP_WRITE));

  op2_gemv(true, 18, 10, 1.0, constants->get_ptr(DGConstants::GAUSS_INTERP), 10, nu, 0.0, gNu);

  // Cubature grid point init (needed for Poisson solver)
  // Initialise geometric factors for calcuating grad matrix
  op2_gemv(true, 36, 10, 1.0, constants->get_ptr(DGConstants::CUB_VDR), 10, mesh->x, 0.0, mesh->cubature->op_tmp[0]);
  op2_gemv(true, 36, 10, 1.0, constants->get_ptr(DGConstants::CUB_VDS), 10, mesh->x, 0.0, mesh->cubature->op_tmp[1]);
  op2_gemv(true, 36, 10, 1.0, constants->get_ptr(DGConstants::CUB_VDR), 10, mesh->y, 0.0, mesh->cubature->op_tmp[2]);
  op2_gemv(true, 36, 10, 1.0, constants->get_ptr(DGConstants::CUB_VDS), 10, mesh->y, 0.0, mesh->cubature->op_tmp[3]);

  // The Dx and Dy dats contain matrices that are used when calculating the 1st term of Eqn. 10 in Karakus et al.
  op_par_loop_init_cubature_grad("init_cubature_grad",mesh->cells,
              op_arg_dat(mesh->cubature->op_tmp[0],-1,OP_ID,36,"double",OP_RW),
              op_arg_dat(mesh->cubature->op_tmp[1],-1,OP_ID,36,"double",OP_RW),
              op_arg_dat(mesh->cubature->op_tmp[2],-1,OP_ID,36,"double",OP_RW),
              op_arg_dat(mesh->cubature->op_tmp[3],-1,OP_ID,36,"double",OP_RW),
              op_arg_dat(Dx,-1,OP_ID,360,"double",OP_WRITE),
              op_arg_dat(Dy,-1,OP_ID,360,"double",OP_WRITE));
  // Dx and Dy are row-major at this point

  /*****************************************************************************
  *
  * Below contains code used to calculate matrices which are later used to
  * calculate terms 2, 3 and 4 of Eqn. 10 in Karakus et al. You can ignore most
  * of these dats, most are just temp dats, the dats holding the final matrices
  * are mDL, mDR, mDBC, pDL, pDR, gVPL and gVPR.
  *
  * Looking at the following code from the Hesthaven and Warburton textbook can
  * help to understand these matrices and how they are calculated:
  * https://github.com/tcew/nodal-dg/blob/master/Codes1.1/Codes2D/CurvedPoissonIPDG2D.m
  * mDL, mDR and mDBC correspond to gDnM in the MATLAB code. pDL and pDR to gDnP.
  * gVPL and gVPR to gVP. L dats belong to the cell to the left of the edge, R
  * to the right cell.
  *
  *****************************************************************************/

  // Gauss grid point init
  // Check which edges will require matrices to be 'reverse'
  op_par_loop_gauss_reverse("gauss_reverse",mesh->edges,
              op_arg_dat(mesh->edgeNum,-1,OP_ID,2,"int",OP_READ),
              op_arg_dat(mesh->nodeX,-2,mesh->edge2cells,3,"double",OP_READ),
              op_arg_dat(mesh->nodeY,-2,mesh->edge2cells,3,"double",OP_READ),
              op_arg_dat(reverse,-2,mesh->edge2cells,3,"int",OP_INC));

  // Calculate geometric factors used when constructing gradient matrices
  init_gauss_grad_blas(mesh, this);

  // [gDxM, gDyM] = PhysDmatrices2D(x(:,k1), y(:,k1),gVM);
  op_par_loop_init_gauss_grad("init_gauss_grad",mesh->cells,
              op_arg_dat(grx,-1,OP_ID,18,"double",OP_RW),
              op_arg_dat(gsx,-1,OP_ID,18,"double",OP_RW),
              op_arg_dat(gry,-1,OP_ID,18,"double",OP_RW),
              op_arg_dat(gsy,-1,OP_ID,18,"double",OP_RW),
              op_arg_dat(mDx[0],-1,OP_ID,60,"double",OP_WRITE),
              op_arg_dat(mDy[0],-1,OP_ID,60,"double",OP_WRITE),
              op_arg_dat(mDx[1],-1,OP_ID,60,"double",OP_WRITE),
              op_arg_dat(mDy[1],-1,OP_ID,60,"double",OP_WRITE),
              op_arg_dat(mDx[2],-1,OP_ID,60,"double",OP_WRITE),
              op_arg_dat(mDy[2],-1,OP_ID,60,"double",OP_WRITE));

  // gDnM = gnx*gDxM + gny*gDyM;
  op_par_loop_init_gauss_grad3("init_gauss_grad3",mesh->edges,
              op_arg_dat(mesh->edgeNum,-1,OP_ID,2,"int",OP_READ),
              op_arg_dat(mesh->gauss->nx,0,mesh->edge2cells,18,"double",OP_READ),
              op_arg_dat(mesh->gauss->nx,1,mesh->edge2cells,18,"double",OP_READ),
              op_arg_dat(mesh->gauss->ny,0,mesh->edge2cells,18,"double",OP_READ),
              op_arg_dat(mesh->gauss->ny,1,mesh->edge2cells,18,"double",OP_READ),
              op_arg_dat(mDx[0],0,mesh->edge2cells,60,"double",OP_READ),
              op_arg_dat(mDx[0],1,mesh->edge2cells,60,"double",OP_READ),
              op_arg_dat(mDy[0],0,mesh->edge2cells,60,"double",OP_READ),
              op_arg_dat(mDy[0],1,mesh->edge2cells,60,"double",OP_READ),
              op_arg_dat(mDx[1],0,mesh->edge2cells,60,"double",OP_READ),
              op_arg_dat(mDx[1],1,mesh->edge2cells,60,"double",OP_READ),
              op_arg_dat(mDy[1],0,mesh->edge2cells,60,"double",OP_READ),
              op_arg_dat(mDy[1],1,mesh->edge2cells,60,"double",OP_READ),
              op_arg_dat(mDx[2],0,mesh->edge2cells,60,"double",OP_READ),
              op_arg_dat(mDx[2],1,mesh->edge2cells,60,"double",OP_READ),
              op_arg_dat(mDy[2],0,mesh->edge2cells,60,"double",OP_READ),
              op_arg_dat(mDy[2],1,mesh->edge2cells,60,"double",OP_READ),
              op_arg_dat(mDL,-1,OP_ID,60,"double",OP_WRITE),
              op_arg_dat(mDR,-1,OP_ID,60,"double",OP_WRITE));

  op_par_loop_init_gauss_grad4("init_gauss_grad4",mesh->bedges,
              op_arg_dat(mesh->bedgeNum,-1,OP_ID,1,"int",OP_READ),
              op_arg_dat(mesh->gauss->nx,0,mesh->bedge2cells,18,"double",OP_READ),
              op_arg_dat(mesh->gauss->ny,0,mesh->bedge2cells,18,"double",OP_READ),
              op_arg_dat(mDx[0],0,mesh->bedge2cells,60,"double",OP_READ),
              op_arg_dat(mDy[0],0,mesh->bedge2cells,60,"double",OP_READ),
              op_arg_dat(mDx[1],0,mesh->bedge2cells,60,"double",OP_READ),
              op_arg_dat(mDy[1],0,mesh->bedge2cells,60,"double",OP_READ),
              op_arg_dat(mDx[2],0,mesh->bedge2cells,60,"double",OP_READ),
              op_arg_dat(mDy[2],0,mesh->bedge2cells,60,"double",OP_READ),
              op_arg_dat(mDBC,-1,OP_ID,60,"double",OP_WRITE));

  // Calculate geometric factors for grad matrices used by neighbours
  // Matrices are calculated locally, then copied to neighbour elements
  init_gauss_grad_neighbour_blas(mesh, this);

  // [gDxP, gDyP] = PhysDmatrices2D(x(:,k2), y(:,k2),gVP);
  op_par_loop_init_gauss_grad_neighbour("init_gauss_grad_neighbour",mesh->cells,
              op_arg_dat(reverse,-1,OP_ID,3,"int",OP_READ),
              op_arg_dat(grx,-1,OP_ID,18,"double",OP_RW),
              op_arg_dat(gsx,-1,OP_ID,18,"double",OP_RW),
              op_arg_dat(gry,-1,OP_ID,18,"double",OP_RW),
              op_arg_dat(gsy,-1,OP_ID,18,"double",OP_RW),
              op_arg_dat(mDx[0],-1,OP_ID,60,"double",OP_WRITE),
              op_arg_dat(mDy[0],-1,OP_ID,60,"double",OP_WRITE),
              op_arg_dat(mDx[1],-1,OP_ID,60,"double",OP_WRITE),
              op_arg_dat(mDy[1],-1,OP_ID,60,"double",OP_WRITE),
              op_arg_dat(mDx[2],-1,OP_ID,60,"double",OP_WRITE),
              op_arg_dat(mDy[2],-1,OP_ID,60,"double",OP_WRITE));

  // gDnP = gnx*gDxP + gny*gDyP;
  op_par_loop_init_gauss_grad5("init_gauss_grad5",mesh->edges,
              op_arg_dat(mesh->edgeNum,-1,OP_ID,2,"int",OP_READ),
              op_arg_dat(mesh->gauss->nx,0,mesh->edge2cells,18,"double",OP_READ),
              op_arg_dat(mesh->gauss->nx,1,mesh->edge2cells,18,"double",OP_READ),
              op_arg_dat(mesh->gauss->ny,0,mesh->edge2cells,18,"double",OP_READ),
              op_arg_dat(mesh->gauss->ny,1,mesh->edge2cells,18,"double",OP_READ),
              op_arg_dat(mDx[0],0,mesh->edge2cells,60,"double",OP_READ),
              op_arg_dat(mDx[0],1,mesh->edge2cells,60,"double",OP_READ),
              op_arg_dat(mDy[0],0,mesh->edge2cells,60,"double",OP_READ),
              op_arg_dat(mDy[0],1,mesh->edge2cells,60,"double",OP_READ),
              op_arg_dat(mDx[1],0,mesh->edge2cells,60,"double",OP_READ),
              op_arg_dat(mDx[1],1,mesh->edge2cells,60,"double",OP_READ),
              op_arg_dat(mDy[1],0,mesh->edge2cells,60,"double",OP_READ),
              op_arg_dat(mDy[1],1,mesh->edge2cells,60,"double",OP_READ),
              op_arg_dat(mDx[2],0,mesh->edge2cells,60,"double",OP_READ),
              op_arg_dat(mDx[2],1,mesh->edge2cells,60,"double",OP_READ),
              op_arg_dat(mDy[2],0,mesh->edge2cells,60,"double",OP_READ),
              op_arg_dat(mDy[2],1,mesh->edge2cells,60,"double",OP_READ),
              op_arg_dat(pDL,-1,OP_ID,60,"double",OP_WRITE),
              op_arg_dat(pDR,-1,OP_ID,60,"double",OP_WRITE));

  op_par_loop_gauss_gfi_faces2("gauss_gfi_faces2",mesh->edges,
              op_arg_dat(mesh->edgeNum,-1,OP_ID,2,"int",OP_READ),
              op_arg_dat(mesh->reverse,-1,OP_ID,1,"bool",OP_READ),
              op_arg_dat(gVPL,-1,OP_ID,60,"double",OP_WRITE),
              op_arg_dat(gVPR,-1,OP_ID,60,"double",OP_WRITE));
}
