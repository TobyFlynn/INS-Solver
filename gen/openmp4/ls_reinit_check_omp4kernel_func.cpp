//
// auto-generated by op2.py
//

void ls_reinit_check_omp4_kernel(
  double *arg0,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  double *arg4,
  int *arg5,
  int count,
  int num_teams,
  int nthread){

  double arg0_l = *arg0;
  double arg4_l = *arg4;
  int arg5_l = *arg5;
  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data1[0:dat1size],data2[0:dat2size],data3[0:dat3size])\
    map(tofrom: arg4_l, arg5_l) reduction(+:arg4_l) reduction(+:arg5_l)
  #pragma omp distribute parallel for schedule(static,1) reduction(+:arg4_l) reduction(+:arg5_l)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    const double *alpha = &arg0_l;
    const double *s = &data1[6*n_op];
    const double *dsdx = &data2[6*n_op];
    const double *dsdy = &data3[6*n_op];
    double *res = &arg4_l;
    int *count = &arg5_l;

    //inline function
    
    for(int i = 0; i < 6; i++) {
      if(fabs(s[i]) < (*alpha)) {
        *res += dsdx[i] * dsdx[i] + dsdy[i] * dsdy[i];
        *count += 1;
      }
    }
    //end inline func
  }

  *arg0 = arg0_l;
  *arg4 = arg4_l;
  *arg5 = arg5_l;
}
