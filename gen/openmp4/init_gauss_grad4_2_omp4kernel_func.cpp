//
// auto-generated by op2.py
//

void init_gauss_grad4_2_omp4_kernel(
  int *data0,
  int dat0size,
  int *map1,
  int map1size,
  double *data10,
  int dat10size,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  double *data4,
  int dat4size,
  double *data5,
  int dat5size,
  double *data6,
  int dat6size,
  double *data7,
  int dat7size,
  double *data8,
  int dat8size,
  double *data9,
  int dat9size,
  int *col_reord,
  int set_size1,
  int start,
  int end,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data10[0:dat10size])\
    map(to:col_reord[0:set_size1],map1[0:map1size],data1[0:dat1size],data2[0:dat2size],data3[0:dat3size],data4[0:dat4size],data5[0:dat5size],data6[0:dat6size],data7[0:dat7size],data8[0:dat8size],data9[0:dat9size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int e=start; e<end; e++ ){
    int n_op = col_reord[e];
    int map1idx;
    map1idx = map1[n_op + set_size1 * 0];

    //variable mapping
    const int *bedgeNum = &data0[1*n_op];
    const double *nx = &data1[18 * map1idx];
    const double *ny = &data2[18 * map1idx];
    const double *Dx0 = &data3[60 * map1idx];
    const double *Dy0 = &data4[60 * map1idx];
    const double *Dx1 = &data5[60 * map1idx];
    const double *Dy1 = &data6[60 * map1idx];
    const double *Dx2 = &data7[60 * map1idx];
    const double *Dy2 = &data8[60 * map1idx];
    const double *fact = &data9[18 * map1idx];
    double *d = &data10[60*n_op];

    //inline function
    
    const double *Dx, *Dy;

    if(*bedgeNum == 0) {
      Dx = Dx0;
      Dy = Dy0;
    } else if(*bedgeNum == 1) {
      Dx = Dx1;
      Dy = Dy1;
    } else {
      Dx = Dx2;
      Dy = Dy2;
    }

    for(int m = 0; m < 6; m++) {
      for(int n = 0; n < 10; n++) {
        int ind   = m * 10 + n;
        int indBC = *bedgeNum * 6 + m;

        d[ind] = nx[indBC] * fact[indBC] * Dx[ind] + ny[indBC] * fact[indBC] * Dy[ind];
      }
    }
    //end inline func
  }

}
