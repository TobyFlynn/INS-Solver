//
// auto-generated by op2.py
//

void ls_advec_flux_omp4_kernel(
  double *data0,
  int dat0size,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  double *data4,
  int dat4size,
  int count,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size],data2[0:dat2size],data3[0:dat3size],data4[0:dat4size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    const double *q = &data0[3*n_op];
    const double *u = &data1[3*n_op];
    const double *v = &data2[3*n_op];
    double *F = &data3[3*n_op];
    double *G = &data4[3*n_op];

    //inline function
    
    for(int i = 0; i < 3; i++) {
      F[i] = u[i] * q[i];
      G[i] = v[i] * q[i];
    }
    //end inline func
  }

}
