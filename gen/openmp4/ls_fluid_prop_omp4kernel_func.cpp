//
// auto-generated by op2.py
//

void ls_fluid_prop_omp4_kernel(
  double *data0,
  int dat0size,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  int count,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size],data2[0:dat2size]) \
    map(to: nu0_ompkernel, nu1_ompkernel, rho0_ompkernel, rho1_ompkernel)
  #pragma omp distribute parallel for schedule(static,1)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    const double *step = &data0[10*n_op];
    double *nu = &data1[10*n_op];
    double *rho = &data2[10*n_op];

    //inline function
    
    for(int i = 0; i < 10; i++) {
      nu[i] = 0.5 * nu0_ompkernel * (1.0 + step[i]) + 0.5 * nu1_ompkernel * (1.0 - step[i]);
      rho[i] = 0.5 * rho0_ompkernel * (1.0 + step[i]) + 0.5 * rho1_ompkernel * (1.0 - step[i]);
    }
    //end inline func
  }

}
