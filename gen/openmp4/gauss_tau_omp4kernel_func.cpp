//
// auto-generated by op2.py
//

void gauss_tau_omp4_kernel(
  int *data0,
  int dat0size,
  int *map1,
  int map1size,
  double *data1,
  int dat1size,
  double *data3,
  int dat3size,
  int *col_reord,
  int set_size1,
  int start,
  int end,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size])\
    map(to:col_reord[0:set_size1],map1[0:map1size],data1[0:dat1size],data3[0:dat3size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int e=start; e<end; e++ ){
    int n_op = col_reord[e];
    int map1idx;
    int map2idx;
    map1idx = map1[n_op + set_size1 * 0];
    map2idx = map1[n_op + set_size1 * 1];

    const double* arg1_vec[] = {
       &data1[15 * map1idx],
       &data1[15 * map2idx]};
    double* arg3_vec[] = {
       &data3[3 * map1idx],
       &data3[3 * map2idx]};
    //variable mapping
    const int *edgeNum = &data0[2*n_op];
    const double **fscale = arg1_vec;
    double **tau = arg3_vec;

    //inline function
    

    int edgeL = edgeNum[0];
    int edgeR = edgeNum[1];

    if(fscale[0][edgeL * 5] > fscale[1][edgeR * 5]) {
      tau[0][edgeL] += 20 * 25 * fscale[0][edgeL * 5];
      tau[1][edgeR] += 20 * 25 * fscale[0][edgeL * 5];
    } else {
      tau[0][edgeL] += 20 * 25 * fscale[1][edgeR * 5];
      tau[1][edgeR] += 20 * 25 * fscale[1][edgeR * 5];
    }
    //end inline func
  }

}
