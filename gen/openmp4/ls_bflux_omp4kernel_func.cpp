//
// auto-generated by op2.py
//

void ls_bflux_omp4_kernel(
  int *data0,
  int dat0size,
  int *map1,
  int map1size,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  double *data4,
  int dat4size,
  double *data5,
  int dat5size,
  double *data6,
  int dat6size,
  double *data7,
  int dat7size,
  double *data8,
  int dat8size,
  int *col_reord,
  int set_size1,
  int start,
  int end,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size]) \
    map(to: gaussW_g_ompkernel[:4])\
    map(to:col_reord[0:set_size1],map1[0:map1size],data1[0:dat1size],data2[0:dat2size],data3[0:dat3size],data4[0:dat4size],data5[0:dat5size],data6[0:dat6size],data7[0:dat7size],data8[0:dat8size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int e=start; e<end; e++ ){
    int n_op = col_reord[e];
    int map1idx;
    map1idx = map1[n_op + set_size1 * 0];

    //variable mapping
    const int *bedgeNum = &data0[1*n_op];
    const double *sJ = &data1[12 * map1idx];
    const double *nx = &data2[12 * map1idx];
    const double *ny = &data3[12 * map1idx];
    const double *s = &data4[12 * map1idx];
    double *dsldx = &data5[12 * map1idx];
    double *dsrdx = &data6[12 * map1idx];
    double *dsldy = &data7[12 * map1idx];
    double *dsrdy = &data8[12 * map1idx];

    //inline function
    
    int exInd = *bedgeNum * 4;

    for(int i = 0; i < 4; i++) {
      dsldx[exInd + i] += gaussW_g_ompkernel[i] * sJ[exInd + i] * nx[exInd + i] * s[exInd + i];
      dsrdx[exInd + i] += gaussW_g_ompkernel[i] * sJ[exInd + i] * nx[exInd + i] * s[exInd + i];
      dsldy[exInd + i] += gaussW_g_ompkernel[i] * sJ[exInd + i] * ny[exInd + i] * s[exInd + i];
      dsrdy[exInd + i] += gaussW_g_ompkernel[i] * sJ[exInd + i] * ny[exInd + i] * s[exInd + i];
    }
    //end inline func
  }

}
