//
// auto-generated by op2.py
//

void ls_rhs_omp4_kernel(
  double *data0,
  int dat0size,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  double *data4,
  int dat4size,
  double *data5,
  int dat5size,
  int count,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size],data2[0:dat2size],data3[0:dat3size],data4[0:dat4size],data5[0:dat5size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    const double *sign = &data0[10*n_op];
    const double *dpldx = &data1[10*n_op];
    const double *dprdx = &data2[10*n_op];
    const double *dpldy = &data3[10*n_op];
    const double *dprdy = &data4[10*n_op];
    double *rk = &data5[10*n_op];

    //inline function
    
    for(int i = 0; i < 10; i++) {
      if(sign[i] > 0.0) {
        double plmx2 = fmin(dpldx[i], 0.0);
        plmx2 = plmx2 * plmx2;
        double plmy2 = fmin(dpldy[i], 0.0);
        plmy2 = plmy2 * plmy2;
        double prpx2 = fmax(dprdx[i], 0.0);
        prpx2 = prpx2 * prpx2;
        double prpy2 = fmax(dprdy[i], 0.0);
        prpy2 = prpy2 * prpy2;

        double H = sign[i] * (sqrt(fmax(plmx2, prpx2) + fmax(plmy2, prpy2)) - 1.0);
        rk[i] = -H;
      } else {
        double plpx2 = fmax(dpldx[i], 0.0);
        plpx2 = plpx2 * plpx2;
        double plpy2 = fmax(dpldy[i], 0.0);
        plpy2 = plpy2 * plpy2;
        double prmx2 = fmin(dprdx[i], 0.0);
        prmx2 = prmx2 * prmx2;
        double prmy2 = fmin(dprdy[i], 0.0);
        prmy2 = prmy2 * prmy2;

        double H = sign[i] * (sqrt(fmax(plpx2, prmx2) + fmax(plpy2, prmy2)) - 1.0);
        rk[i] = -H;
      }
    }
    //end inline func
  }

}
