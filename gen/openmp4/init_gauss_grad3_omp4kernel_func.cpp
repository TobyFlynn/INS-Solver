//
// auto-generated by op2.py
//

void init_gauss_grad3_omp4_kernel(
  int *data0,
  int dat0size,
  int *map1,
  int map1size,
  double *data17,
  int dat17size,
  double *data18,
  int dat18size,
  double *data1,
  int dat1size,
  double *data3,
  int dat3size,
  double *data5,
  int dat5size,
  double *data7,
  int dat7size,
  double *data9,
  int dat9size,
  double *data11,
  int dat11size,
  double *data13,
  int dat13size,
  double *data15,
  int dat15size,
  int *col_reord,
  int set_size1,
  int start,
  int end,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data17[0:dat17size],data18[0:dat18size])\
    map(to:col_reord[0:set_size1],map1[0:map1size],data1[0:dat1size],data3[0:dat3size],data5[0:dat5size],data7[0:dat7size],data9[0:dat9size],data11[0:dat11size],data13[0:dat13size],data15[0:dat15size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int e=start; e<end; e++ ){
    int n_op = col_reord[e];
    int map1idx;
    int map2idx;
    map1idx = map1[n_op + set_size1 * 0];
    map2idx = map1[n_op + set_size1 * 1];

    //variable mapping
    const int *edgeNum = &data0[2*n_op];
    const double *nxL = &data1[18 * map1idx];
    const double *nxR = &data1[18 * map2idx];
    const double *nyL = &data3[18 * map1idx];
    const double *nyR = &data3[18 * map2idx];
    const double *Dx0L = &data5[60 * map1idx];
    const double *Dx0R = &data5[60 * map2idx];
    const double *Dy0L = &data7[60 * map1idx];
    const double *Dy0R = &data7[60 * map2idx];
    const double *Dx1L = &data9[60 * map1idx];
    const double *Dx1R = &data9[60 * map2idx];
    const double *Dy1L = &data11[60 * map1idx];
    const double *Dy1R = &data11[60 * map2idx];
    const double *Dx2L = &data13[60 * map1idx];
    const double *Dx2R = &data13[60 * map2idx];
    const double *Dy2L = &data15[60 * map1idx];
    const double *Dy2R = &data15[60 * map2idx];
    double *dL = &data17[60*n_op];
    double *dR = &data18[60*n_op];

    //inline function
    

    int edgeL = edgeNum[0];
    int edgeR = edgeNum[1];

    const double *DxL, *DyL, *DxR, *DyR;

    if(edgeL == 0) {
      DxL = Dx0L;
      DyL = Dy0L;
    } else if(edgeL == 1) {
      DxL = Dx1L;
      DyL = Dy1L;
    } else {
      DxL = Dx2L;
      DyL = Dy2L;
    }

    if(edgeR == 0) {
      DxR = Dx0R;
      DyR = Dy0R;
    } else if(edgeR == 1) {
      DxR = Dx1R;
      DyR = Dy1R;
    } else {
      DxR = Dx2R;
      DyR = Dy2R;
    }

    for(int j = 0; j < 10; j++) {
      for(int i = 0; i < 6; i++) {
        int ind  = j * 6 + i;
        int indL = edgeL * 6 + i;
        int indR = edgeR * 6 + i;

        dL[ind] = nxL[indL] * DxL[ind] + nyL[indL] * DyL[ind];
        dR[ind] = nxR[indR] * DxR[ind] + nyR[indR] * DyR[ind];
      }
    }
    //end inline func
  }

}
