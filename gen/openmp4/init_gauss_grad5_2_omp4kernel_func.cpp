//
// auto-generated by op2.py
//

void init_gauss_grad5_2_omp4_kernel(
  int *data0,
  int dat0size,
  bool *data1,
  int dat1size,
  int *map2,
  int map2size,
  double *data20,
  int dat20size,
  double *data21,
  int dat21size,
  double *data2,
  int dat2size,
  double *data4,
  int dat4size,
  double *data6,
  int dat6size,
  double *data8,
  int dat8size,
  double *data10,
  int dat10size,
  double *data12,
  int dat12size,
  double *data14,
  int dat14size,
  double *data16,
  int dat16size,
  double *data18,
  int dat18size,
  int *col_reord,
  int set_size1,
  int start,
  int end,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size],data20[0:dat20size],data21[0:dat21size])\
    map(to:col_reord[0:set_size1],map2[0:map2size],data2[0:dat2size],data4[0:dat4size],data6[0:dat6size],data8[0:dat8size],data10[0:dat10size],data12[0:dat12size],data14[0:dat14size],data16[0:dat16size],data18[0:dat18size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int e=start; e<end; e++ ){
    int n_op = col_reord[e];
    int map2idx;
    int map3idx;
    map2idx = map2[n_op + set_size1 * 0];
    map3idx = map2[n_op + set_size1 * 1];

    //variable mapping
    const int *edgeNum = &data0[2*n_op];
    const bool *rev = &data1[1*n_op];
    const double *nxL = &data2[18 * map2idx];
    const double *nxR = &data2[18 * map3idx];
    const double *nyL = &data4[18 * map2idx];
    const double *nyR = &data4[18 * map3idx];
    const double *Dx0L = &data6[60 * map2idx];
    const double *Dx0R = &data6[60 * map3idx];
    const double *Dy0L = &data8[60 * map2idx];
    const double *Dy0R = &data8[60 * map3idx];
    const double *Dx1L = &data10[60 * map2idx];
    const double *Dx1R = &data10[60 * map3idx];
    const double *Dy1L = &data12[60 * map2idx];
    const double *Dy1R = &data12[60 * map3idx];
    const double *Dx2L = &data14[60 * map2idx];
    const double *Dx2R = &data14[60 * map3idx];
    const double *Dy2L = &data16[60 * map2idx];
    const double *Dy2R = &data16[60 * map3idx];
    const double *factL = &data18[18 * map2idx];
    const double *factR = &data18[18 * map3idx];
    double *dL = &data20[60*n_op];
    double *dR = &data21[60*n_op];

    //inline function
    

    int edgeL = edgeNum[0];
    int edgeR = edgeNum[1];
    bool reverse = *rev;

    const double *DxL, *DyL, *DxR, *DyR;

    if(edgeL == 0) {
      DxR = Dx0L;
      DyR = Dy0L;
    } else if(edgeL == 1) {
      DxR = Dx1L;
      DyR = Dy1L;
    } else {
      DxR = Dx2L;
      DyR = Dy2L;
    }

    if(edgeR == 0) {
      DxL = Dx0R;
      DyL = Dy0R;
    } else if(edgeR == 1) {
      DxL = Dx1R;
      DyL = Dy1R;
    } else {
      DxL = Dx2R;
      DyL = Dy2R;
    }

    for(int m = 0; m < 6; m++) {
      for(int n = 0; n < 10; n++) {
        int ind  = m * 10 + n;
        int indL = edgeL * 6 + m;
        int indR = edgeR * 6 + m;
        int factLInd, factRInd;
        if(reverse) {
          factLInd = edgeL * 6 + 6 - 1 - m;
          factRInd = edgeR * 6 + 6 - 1 - m;
        } else {
          factLInd = edgeL * 6 + m;
          factRInd = edgeR * 6 + m;
        }

        dL[ind] = nxL[indL] * factR[factRInd] * DxL[ind] + nyL[indL] * factR[factRInd] * DyL[ind];
        dR[ind] = nxR[indR] * factL[factLInd] * DxR[ind] + nyR[indR] * factL[factLInd] * DyR[ind];


      }
    }
    //end inline func
  }

}
