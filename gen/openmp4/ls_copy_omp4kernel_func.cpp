//
// auto-generated by op2.py
//

void ls_copy_omp4_kernel(
  double *data0,
  int dat0size,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  double *data4,
  int dat4size,
  double *data5,
  int dat5size,
  int count,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size],data2[0:dat2size],data3[0:dat3size],data4[0:dat4size],data5[0:dat5size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    const double *dsdx = &data0[10*n_op];
    const double *dsdy = &data1[10*n_op];
    double *dpldx = &data2[10*n_op];
    double *dprdx = &data3[10*n_op];
    double *dpldy = &data4[10*n_op];
    double *dprdy = &data5[10*n_op];

    //inline function
    
    for(int i = 0; i < 10; i++) {
      dpldx[i] = dsdx[i];
      dprdx[i] = dsdx[i];
      dpldy[i] = dsdy[i];
      dprdy[i] = dsdy[i];
    }
    //end inline func
  }

}
