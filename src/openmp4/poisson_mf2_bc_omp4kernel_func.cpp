//
// auto-generated by op2.py
//

void poisson_mf2_bc_omp4_kernel(
  double *arg0,
  int *data1,
  int dat1size,
  int *data2,
  int dat2size,
  int *arg3,
  int *arg4,
  int *arg5,
  int *map6,
  int map6size,
  double *data11,
  int dat11size,
  double *data6,
  int dat6size,
  double *data7,
  int dat7size,
  double *data8,
  int dat8size,
  double *data9,
  int dat9size,
  double *data10,
  int dat10size,
  int *col_reord,
  int set_size1,
  int start,
  int end,
  int num_teams,
  int nthread){

  double arg0_l = *arg0;
  int arg3_l = *arg3;
  int arg4_l = *arg4;
  int arg5_l = *arg5;
  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data1[0:dat1size],data2[0:dat2size],data11[0:dat11size]) \
    map(to: gaussW_g_ompkernel[:7], gFInterp0_g_ompkernel[:105], gFInterp1_g_ompkernel[:105], gFInterp2_g_ompkernel[:105])\
    map(to:col_reord[0:set_size1],map6[0:map6size],data6[0:dat6size],data7[0:dat7size],data8[0:dat8size],data9[0:dat9size],data10[0:dat10size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int e=start; e<end; e++ ){
    int n_op = col_reord[e];
    int map6idx;
    map6idx = map6[n_op + set_size1 * 0];

    //variable mapping
    const double *tol = &arg0_l;
    const int *bedge_type = &data1[1*n_op];
    const int *bedgeNum = &data2[1*n_op];
    const int *d0 = &arg3_l;
    const int *d1 = &arg4_l;
    const int *d2 = &arg5_l;
    const double *mD0 = &data6[105 * map6idx];
    const double *mD1 = &data7[105 * map6idx];
    const double *mD2 = &data8[105 * map6idx];
    const double *sJ = &data9[21 * map6idx];
    const double *tau = &data10[3 * map6idx];
    double *op = &data11[105*n_op];

    //inline function
    
    if(*bedge_type == *d0 || *bedge_type == *d1 || *bedge_type == *d2) {
      for(int j = 0; j < 7 * 15; j++) {
        int indT = (j % 7) * 15 + (j / 7);
        int col  = j % 7;
        int row  = j / 7;
        double val = gaussW_g_ompkernel[j % 7] * sJ[*bedgeNum * 7 + (j % 7)] * tau[*bedgeNum];
        double mD;
        if(*bedgeNum == 0) {
          val *= gFInterp0_g_ompkernel[indT];
          mD = mD0[indT];
        } else if(*bedgeNum == 1) {
          val *= gFInterp1_g_ompkernel[indT];
          mD = mD1[indT];
        } else {
          val *= gFInterp2_g_ompkernel[indT];
          mD = mD2[indT];
        }
        val -= mD * gaussW_g_ompkernel[j % 7] * sJ[*bedgeNum * 7 + (j % 7)];
        if(fabs(val) > *tol)
          op[row * 7 + col] += val;
      }
    } else {
      for(int j = 0; j < 7 * 15; j++) {
        int indT = (j % 7) * 15 + (j / 7);
        int col  = j % 7;
        int row  = j / 7;
        double val = gaussW_g_ompkernel[j % 7] * sJ[*bedgeNum * 7 + (j % 7)];
        if(*bedgeNum == 0) {
          val *= gFInterp0_g_ompkernel[indT];
        } else if(*bedgeNum == 1) {
          val *= gFInterp1_g_ompkernel[indT];
        } else {
          val *= gFInterp2_g_ompkernel[indT];
        }
        if(fabs(val) > *tol)
          op[row * 7 + col] += val;
      }
    }
    //end inline func
  }

  *arg0 = arg0_l;
  *arg3 = arg3_l;
  *arg4 = arg4_l;
  *arg5 = arg5_l;
}
