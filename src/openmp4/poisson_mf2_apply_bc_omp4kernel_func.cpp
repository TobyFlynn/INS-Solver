//
// auto-generated by op2.py
//

void poisson_mf2_apply_bc_omp4_kernel(
  int *data0,
  int dat0size,
  double *data1,
  int dat1size,
  int *map2,
  int map2size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  double *data4,
  int dat4size,
  int *col_reord,
  int set_size1,
  int start,
  int end,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size])\
    map(to:col_reord[0:set_size1],map2[0:map2size],data2[0:dat2size],data3[0:dat3size],data4[0:dat4size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int e=start; e<end; e++ ){
    int n_op = col_reord[e];
    int map2idx;
    map2idx = map2[n_op + set_size1 * 0];

    //variable mapping
    const int *bedgeNum = &data0[1*n_op];
    const double *op = &data1[105*n_op];
    const double *nu = &data2[15 * map2idx];
    const double *bc = &data3[21 * map2idx];
    double *rhs = &data4[15 * map2idx];

    //inline function
    
    int exInd = 0;
    if(*bedgeNum == 1) exInd = 7;
    else if(*bedgeNum == 2) exInd = 14;

    for(int m = 0; m < 15; m++) {
      int ind = m * 7;
      double val = 0.0;
      for(int n = 0; n < 7; n++) {
        val += op[ind + n] * bc[exInd + n];
      }
      rhs[m] += nu[m] * val;
    }
    //end inline func
  }

}
