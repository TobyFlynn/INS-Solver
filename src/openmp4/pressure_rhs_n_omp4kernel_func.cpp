//
// auto-generated by op2.py
//

void pressure_rhs_n_omp4_kernel(
  double *arg0,
  double *arg1,
  double *arg2,
  double *arg3,
  double *data4,
  int dat4size,
  double *data5,
  int dat5size,
  double *data6,
  int dat6size,
  double *data7,
  int dat7size,
  double *data8,
  int dat8size,
  double *data9,
  int dat9size,
  int count,
  int num_teams,
  int nthread){

  double arg0_l = *arg0;
  double arg1_l = *arg1;
  double arg2_l = *arg2;
  double arg3_l = *arg3;
  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data4[0:dat4size],data5[0:dat5size],data6[0:dat6size],data7[0:dat7size],data8[0:dat8size],data9[0:dat9size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    const double *b0 = &arg0_l;
    const double *b1 = &arg1_l;
    const double *g0 = &arg2_l;
    const double *dt = &arg3_l;
    const double *J = &data4[15*n_op];
    const double *nBCx = &data5[15*n_op];
    const double *nBCy = &data6[15*n_op];
    double *nBCxOld = &data7[15*n_op];
    double *nBCyOld = &data8[15*n_op];
    double *divVelT = &data9[15*n_op];

    //inline function
    
    for(int i = 0; i < 15; i++) {
      divVelT[i] = J[i] * (-divVelT[i] * *g0 / *dt);
      nBCxOld[i] = (*b0 * nBCx[i] + *b1 * nBCxOld[i]);
      nBCyOld[i] = (*b0 * nBCy[i] + *b1 * nBCyOld[i]);
    }
    //end inline func
  }

  *arg0 = arg0_l;
  *arg1 = arg1_l;
  *arg2 = arg2_l;
  *arg3 = arg3_l;
}
