//
// auto-generated by op2.py
//

void poisson_mf2_faces_omp4_kernel(
  int *data0,
  int dat0size,
  int *map1,
  int map1size,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  double *data4,
  int dat4size,
  double *data5,
  int dat5size,
  int *col_reord,
  int set_size1,
  int start,
  int end,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size])\
    map(to:col_reord[0:set_size1],map1[0:map1size],data1[0:dat1size],data2[0:dat2size],data3[0:dat3size],data4[0:dat4size],data5[0:dat5size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int e=start; e<end; e++ ){
    int n_op = col_reord[e];
    int map1idx;
    int map6idx;
    map1idx = map1[n_op + set_size1 * 0];
    map6idx = map1[n_op + set_size1 * 1];

    //variable mapping
    const int *edgeNum = &data0[2*n_op];
    const double *uL = &data1[15 * map1idx];
    const double *op0L = &data2[225 * map1idx];
    const double *op1L = &data3[225 * map1idx];
    const double *op2L = &data4[225 * map1idx];
    double *rhsL = &data5[15 * map1idx];
    const double *uR = &data1[15 * map6idx];
    const double *op0R = &data2[225 * map6idx];
    const double *op1R = &data3[225 * map6idx];
    const double *op2R = &data4[225 * map6idx];
    double *rhsR = &data5[15 * map6idx];

    //inline function
    

    int edgeL = edgeNum[0];
    int edgeR = edgeNum[1];

    if(edgeL == 0) {
      for(int m = 0; m < 15; m++) {
        int ind = m * 15;
        double val = 0.0;
        for(int n = 0; n < 15; n++) {
          val += op0L[ind + n] * uR[n];
        }
        rhsL[m] += val;
      }
    } else if(edgeL == 1) {
      for(int m = 0; m < 15; m++) {
        int ind = m * 15;
        double val = 0.0;
        for(int n = 0; n < 15; n++) {
          val += op1L[ind + n] * uR[n];
        }
        rhsL[m] += val;
      }
    } else {
      for(int m = 0; m < 15; m++) {
        int ind = m * 15;
        double val = 0.0;
        for(int n = 0; n < 15; n++) {
          val += op2L[ind + n] * uR[n];
        }
        rhsL[m] += val;
      }
    }

    if(edgeR == 0) {
      for(int m = 0; m < 15; m++) {
        int ind = m * 15;
        double val = 0.0;
        for(int n = 0; n < 15; n++) {
          val += op0R[ind + n] * uL[n];
        }
        rhsR[m] += val;
      }
    } else if(edgeR == 1) {
      for(int m = 0; m < 15; m++) {
        int ind = m * 15;
        double val = 0.0;
        for(int n = 0; n < 15; n++) {
          val += op1R[ind + n] * uL[n];
        }
        rhsR[m] += val;
      }
    } else {
      for(int m = 0; m < 15; m++) {
        int ind = m * 15;
        double val = 0.0;
        for(int n = 0; n < 15; n++) {
          val += op2R[ind + n] * uL[n];
        }
        rhsR[m] += val;
      }
    }
    //end inline func
  }

}
