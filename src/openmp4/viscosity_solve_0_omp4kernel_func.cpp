//
// auto-generated by op2.py
//

void viscosity_solve_0_omp4_kernel(
  double *data0,
  int dat0size,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  double *data4,
  int dat4size,
  double *arg5,
  double *data6,
  int dat6size,
  double *data7,
  int dat7size,
  double *data8,
  int dat8size,
  int count,
  int num_teams,
  int nthread){

  double arg5_l = *arg5;
  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size],data2[0:dat2size],data3[0:dat3size],data4[0:dat4size],data6[0:dat6size],data7[0:dat7size],data8[0:dat8size]) \
    map(to: cubW_g_ompkernel[:46])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    const double *J = &data0[46*n_op];
    const double *Dx = &data1[690*n_op];
    const double *Dy = &data2[690*n_op];
    const double *mu = &data3[46*n_op];
    const double *rho = &data4[15*n_op];
    const double *factor = &arg5_l;
    const double *mm = &data6[225*n_op];
    const double *u = &data7[15*n_op];
    double *rhs = &data8[15*n_op];

    //inline function
    
    double tmpX[46*15];
    double tmpY[46*15];

    for(int m = 0; m < 46; m++) {
      for(int n = 0; n < 15; n++) {
        int ind = m * 15 + n;
        tmpX[ind] = J[m] * cubW_g_ompkernel[m] * Dx[ind] * mu[m];
        tmpY[ind] = J[m] * cubW_g_ompkernel[m] * Dy[ind] * mu[m];
      }
    }

    double op[15*15];
    for(int i = 0; i < 15; i++) {
      for(int j = 0; j < 15; j++) {
        int c_ind = i * 15 + j;
        op[c_ind] = 0.0;
        for(int k = 0; k < 46; k++) {

          int b_ind = k * 15 + j;

          int a_ind = k * 15 + i;
          op[c_ind] += Dx[a_ind] * tmpX[b_ind] + Dy[a_ind] * tmpY[b_ind];
        }
      }
    }

    for(int i = 0; i < 15; i++) {
      rhs[i] = 0.0;
      for(int j = 0; j < 15; j++) {
        int op_ind = i * 15 + j;
        rhs[i] += op[op_ind] * u[j];
        rhs[i] += mm[op_ind] * u[j] * rho[j] * (*factor);

      }
    }
    //end inline func
  }

  *arg5 = arg5_l;
}
