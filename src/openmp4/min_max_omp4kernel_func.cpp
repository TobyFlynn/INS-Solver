//
// auto-generated by op2.py
//

void min_max_omp4_kernel(
  double *arg0,
  double *arg1,
  double *data2,
  int dat2size,
  int count,
  int num_teams,
  int nthread){

  double arg0_l = *arg0;
  double arg1_l = *arg1;
  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data2[0:dat2size])\
    map(tofrom: arg0_l, arg1_l) reduction(min:arg0_l) reduction(max:arg1_l)
  #pragma omp distribute parallel for schedule(static,1) reduction(min:arg0_l) reduction(max:arg1_l)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    double *min = &arg0_l;
    double *max = &arg1_l;
    const double *arr = &data2[15*n_op];

    //inline function
    
    for(int i = 0; i < 15; i++) {
      if(arr[i] > *max) {
        *max = arr[i];
      }
      if(arr[i] < *min) {
        *min = arr[i];
      }
    }
    //end inline func
  }

  *arg0 = arg0_l;
  *arg1 = arg1_l;
}
