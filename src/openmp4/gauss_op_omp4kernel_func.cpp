//
// auto-generated by op2.py
//

void gauss_op_omp4_kernel(
  double *data0,
  int dat0size,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  double *data4,
  int dat4size,
  double *data5,
  int dat5size,
  double *data6,
  int dat6size,
  double *data7,
  int dat7size,
  double *data8,
  int dat8size,
  double *data9,
  int dat9size,
  double *data10,
  int dat10size,
  double *data11,
  int dat11size,
  double *data12,
  int dat12size,
  double *data13,
  int dat13size,
  int count,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size],data2[0:dat2size],data3[0:dat3size],data4[0:dat4size],data5[0:dat5size],data6[0:dat6size],data7[0:dat7size],data8[0:dat8size],data9[0:dat9size],data10[0:dat10size],data11[0:dat11size],data12[0:dat12size],data13[0:dat13size]) \
    map(to: gaussW_ompkernel[:7], gFInterp0_ompkernel[:105], gFInterp1_ompkernel[:105], gFInterp2_ompkernel[:105])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    const double *tau = &data0[3*n_op];
    const double *sJ = &data1[21*n_op];
    const double *mD0 = &data2[105*n_op];
    double *f0_0 = &data3[105*n_op];
    double *f0_1 = &data4[105*n_op];
    double *f0_2 = &data5[105*n_op];
    const double *mD1 = &data6[105*n_op];
    double *f1_0 = &data7[105*n_op];
    double *f1_1 = &data8[105*n_op];
    double *f1_2 = &data9[105*n_op];
    const double *mD2 = &data10[105*n_op];
    double *f2_0 = &data11[105*n_op];
    double *f2_1 = &data12[105*n_op];
    double *f2_2 = &data13[105*n_op];

    //inline function
    

    for(int m = 0; m < 7; m++) {
      for(int n = 0; n < 15; n++) {
        int ind = m * 15 + n;
        f0_0[ind] = gaussW_ompkernel[m] * sJ[m] * tau[0] * gFInterp0_ompkernel[ind];
        f0_1[ind] = gaussW_ompkernel[m] * sJ[m] * gFInterp0_ompkernel[ind];
        f0_2[ind] = gaussW_ompkernel[m] * sJ[m] * mD0[ind];
      }
    }

    for(int m = 0; m < 7; m++) {
      for(int n = 0; n < 15; n++) {
        int ind = m * 15 + n;
        f1_0[ind] = gaussW_ompkernel[m] * sJ[m + 7] * tau[1] * gFInterp1_ompkernel[ind];
        f1_1[ind] = gaussW_ompkernel[m] * sJ[m + 7] * gFInterp1_ompkernel[ind];
        f1_2[ind] = gaussW_ompkernel[m] * sJ[m + 7] * mD1[ind];
      }
    }

    for(int m = 0; m < 7; m++) {
      for(int n = 0; n < 15; n++) {
        int ind = m * 15 + n;
        f2_0[ind] = gaussW_ompkernel[m] * sJ[m + 14] * tau[2] * gFInterp2_ompkernel[ind];
        f2_1[ind] = gaussW_ompkernel[m] * sJ[m + 14] * gFInterp2_ompkernel[ind];
        f2_2[ind] = gaussW_ompkernel[m] * sJ[m + 14] * mD2[ind];
      }
    }
    //end inline func
  }

}
