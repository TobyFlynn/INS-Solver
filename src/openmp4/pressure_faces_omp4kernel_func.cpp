//
// auto-generated by op2.py
//

void pressure_faces_omp4_kernel(
  int *data0,
  int dat0size,
  int *map1,
  int map1size,
  double *data1,
  int dat1size,
  double *data3,
  int dat3size,
  int *col_reord,
  int set_size1,
  int start,
  int end,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size]) \
    map(to: FMASK_ompkernel[:15])\
    map(to:col_reord[0:set_size1],map1[0:map1size],data1[0:dat1size],data3[0:dat3size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int e=start; e<end; e++ ){
    int n_op = col_reord[e];
    int map1idx;
    int map2idx;
    map1idx = map1[n_op + set_size1 * 0];
    map2idx = map1[n_op + set_size1 * 1];

    const double* arg1_vec[] = {
       &data1[15 * map1idx],
       &data1[15 * map2idx]};
    double* arg3_vec[] = {
       &data3[15 * map1idx],
       &data3[15 * map2idx]};
    //variable mapping
    const int *edgeNum = &data0[2*n_op];
    const double **pRHS = arg1_vec;
    double **exP = arg3_vec;

    //inline function
    

    int edgeL = edgeNum[0];
    int edgeR = edgeNum[1];

    int exInd = 0;
    if(edgeL == 1) exInd = 5;
    else if(edgeL == 2) exInd = 2 * 5;

    int *fmask;

    if(edgeL == 0) {
      fmask = FMASK_ompkernel;
    } else if(edgeL == 1) {
      fmask = &FMASK_ompkernel[5];
    } else {
      fmask = &FMASK_ompkernel[2 * 5];
    }

    for(int i = 0; i < 5; i++) {
      int lInd = fmask[i];
      exP[0][exInd + i] += pRHS[0][lInd];
    }

    exInd = 0;
    if(edgeR == 1) exInd = 5;
    else if(edgeR == 2) exInd = 2 * 5;

    if(edgeR == 0) {
      fmask = FMASK_ompkernel;
    } else if(edgeR == 1) {
      fmask = &FMASK_ompkernel[5];
    } else {
      fmask = &FMASK_ompkernel[2 * 5];
    }

    for(int i = 0; i < 5; i++) {
      int rInd = fmask[i];
      exP[1][exInd + i] += pRHS[1][rInd];
    }
    //end inline func
  }

}
