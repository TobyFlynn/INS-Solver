//
// auto-generated by op2.py
//

void advection_numerical_flux_omp4_kernel(
  double *data0,
  int dat0size,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  double *data4,
  int dat4size,
  double *data5,
  int dat5size,
  double *data6,
  int dat6size,
  double *data7,
  int dat7size,
  double *data8,
  int dat8size,
  int count,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size],data2[0:dat2size],data3[0:dat3size],data4[0:dat4size],data5[0:dat5size],data6[0:dat6size],data7[0:dat7size],data8[0:dat8size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    const double *fscale = &data0[15*n_op];
    const double *nx = &data1[15*n_op];
    const double *ny = &data2[15*n_op];
    const double *q0 = &data3[15*n_op];
    const double *q1 = &data4[15*n_op];
    double *exQ0 = &data5[15*n_op];
    double *exQ1 = &data6[15*n_op];
    double *flux0 = &data7[15*n_op];
    double *flux1 = &data8[15*n_op];

    //inline function
    
    //end inline func
  }

}
