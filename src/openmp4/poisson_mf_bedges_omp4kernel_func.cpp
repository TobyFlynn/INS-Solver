//
// auto-generated by op2.py
//

void poisson_mf_bedges_omp4_kernel(
  int *data0,
  int dat0size,
  int *data1,
  int dat1size,
  int *arg2,
  int *arg3,
  int *arg4,
  int *map5,
  int map5size,
  double *data5,
  int dat5size,
  double *data6,
  int dat6size,
  double *data7,
  int dat7size,
  double *data8,
  int dat8size,
  double *data9,
  int dat9size,
  double *data10,
  int dat10size,
  double *data11,
  int dat11size,
  double *data12,
  int dat12size,
  double *data13,
  int dat13size,
  double *data14,
  int dat14size,
  int *col_reord,
  int set_size1,
  int start,
  int end,
  int num_teams,
  int nthread){

  int arg2_l = *arg2;
  int arg3_l = *arg3;
  int arg4_l = *arg4;
  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size]) \
    map(to: gaussW_g_ompkernel[:7])\
    map(to:col_reord[0:set_size1],map5[0:map5size],data5[0:dat5size],data6[0:dat6size],data7[0:dat7size],data8[0:dat8size],data9[0:dat9size],data10[0:dat10size],data11[0:dat11size],data12[0:dat12size],data13[0:dat13size],data14[0:dat14size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int e=start; e<end; e++ ){
    int n_op = col_reord[e];
    int map5idx;
    map5idx = map5[n_op + set_size1 * 0];

    //variable mapping
    const int *bedgeType = &data0[1*n_op];
    const int *bedgeNum = &data1[1*n_op];
    const int *d0 = &arg2_l;
    const int *d1 = &arg3_l;
    const int *d2 = &arg4_l;
    const double *sJ = &data5[21 * map5idx];
    const double *nx = &data6[21 * map5idx];
    const double *ny = &data7[21 * map5idx];
    const double *tau = &data8[3 * map5idx];
    const double *u = &data9[21 * map5idx];
    const double *dudx = &data10[21 * map5idx];
    const double *dudy = &data11[21 * map5idx];
    double *fluxX = &data12[21 * map5idx];
    double *fluxY = &data13[21 * map5idx];
    double *flux = &data14[21 * map5idx];

    //inline function
    
    int exInd = 0;
    if(*bedgeNum == 1) exInd = 7;
    else if(*bedgeNum == 2) exInd = 2 * 7;

    if(*bedgeType == *d0 || *bedgeType == *d1 || *bedgeType == *d2) {
      for(int i = 0; i < 7; i++) {
        flux[exInd + i] += gaussW_g_ompkernel[i] * sJ[exInd + i] * (nx[exInd + i] * dudx[exInd + i] + ny[exInd + i] * dudy[exInd + i] - tau[*bedgeNum] * (u[exInd + i]));
      }
    } else {
      for(int i = 0; i < 7; i++) {
        fluxX[exInd + i] += nx[exInd + i] * gaussW_g_ompkernel[i] * sJ[exInd + i] * u[exInd + i];
        fluxY[exInd + i] += ny[exInd + i] * gaussW_g_ompkernel[i] * sJ[exInd + i] * u[exInd + i];
      }
    }
    //end inline func
  }

  *arg2 = arg2_l;
  *arg3 = arg3_l;
  *arg4 = arg4_l;
}
