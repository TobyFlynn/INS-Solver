//
// auto-generated by op2.py
//

void poisson_mf2_opf_omp4_kernel(
  double *arg0,
  int *data1,
  int dat1size,
  int *map2,
  int map2size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  double *data4,
  int dat4size,
  double *data5,
  int dat5size,
  double *data6,
  int dat6size,
  double *data7,
  int dat7size,
  double *data8,
  int dat8size,
  double *data9,
  int dat9size,
  double *data10,
  int dat10size,
  double *data11,
  int dat11size,
  int *col_reord,
  int set_size1,
  int start,
  int end,
  int num_teams,
  int nthread){

  double arg0_l = *arg0;
  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data1[0:dat1size])\
    map(to:col_reord[0:set_size1],map2[0:map2size],data2[0:dat2size],data3[0:dat3size],data4[0:dat4size],data5[0:dat5size],data6[0:dat6size],data7[0:dat7size],data8[0:dat8size],data9[0:dat9size],data10[0:dat10size],data11[0:dat11size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int e=start; e<end; e++ ){
    int n_op = col_reord[e];
    int map2idx;
    int map12idx;
    map2idx = map2[n_op + set_size1 * 0];
    map12idx = map2[n_op + set_size1 * 1];

    //variable mapping
    const double *tol = &arg0_l;
    const int *edgeNum = &data1[2*n_op];
    const double *gop0L = &data2[225 * map2idx];
    const double *gop1L = &data3[225 * map2idx];
    const double *gop2L = &data4[225 * map2idx];
    const double *gopf0L = &data5[225 * map2idx];
    const double *gopf1L = &data6[225 * map2idx];
    const double *gopf2L = &data7[225 * map2idx];
    double *op20L = &data8[225 * map2idx];
    double *op21L = &data9[225 * map2idx];
    double *op22L = &data10[225 * map2idx];
    double *op1L = &data11[225 * map2idx];
    const double *gop0R = &data2[225 * map12idx];
    const double *gop1R = &data3[225 * map12idx];
    const double *gop2R = &data4[225 * map12idx];
    const double *gopf0R = &data5[225 * map12idx];
    const double *gopf1R = &data6[225 * map12idx];
    const double *gopf2R = &data7[225 * map12idx];
    double *op20R = &data8[225 * map12idx];
    double *op21R = &data9[225 * map12idx];
    double *op22R = &data10[225 * map12idx];
    double *op1R = &data11[225 * map12idx];

    //inline function
    
    int edgeL = edgeNum[0];
    int edgeR = edgeNum[1];

    if(edgeL == 0) {
      for(int m = 0; m < 15; m++) {
        for(int n = 0; n < 15; n++) {
          int ind = m * 15 + n;
          int colInd = n * 15 + m;
          double val = 0.5 * gop0L[colInd];

            op1L[ind] += val;

          val = -0.5 * gopf0L[colInd];

            op20L[ind] += val;

        }
      }
    } else if(edgeL == 1) {
      for(int m = 0; m < 15; m++) {
        for(int n = 0; n < 15; n++) {
          int ind = m * 15 + n;
          int colInd = n * 15 + m;
          double val = 0.5 * gop1L[colInd];

            op1L[ind] += val;

          val = -0.5 * gopf1L[colInd];

            op21L[ind] += val;

        }
      }
    } else {
      for(int m = 0; m < 15; m++) {
        for(int n = 0; n < 15; n++) {
          int ind = m * 15 + n;
          int colInd = n * 15 + m;
          double val = 0.5 * gop2L[colInd];

            op1L[ind] += val;

          val = -0.5 * gopf2L[colInd];

            op22L[ind] += val;

        }
      }
    }

    if(edgeR == 0) {
      for(int m = 0; m < 15; m++) {
        for(int n = 0; n < 15; n++) {
          int ind = m * 15 + n;
          int colInd = n * 15 + m;
          double val = 0.5 * gop0R[colInd];

            op1R[ind] += val;

          val = -0.5 * gopf0R[colInd];

            op20R[ind] += val;

        }
      }
    } else if(edgeR == 1) {
      for(int m = 0; m < 15; m++) {
        for(int n = 0; n < 15; n++) {
          int ind = m * 15 + n;
          int colInd = n * 15 + m;
          double val = 0.5 * gop1R[colInd];

            op1R[ind] += val;

          val = -0.5 * gopf1R[colInd];

            op21R[ind] += val;

        }
      }
    } else {
      for(int m = 0; m < 15; m++) {
        for(int n = 0; n < 15; n++) {
          int ind = m * 15 + n;
          int colInd = n * 15 + m;
          double val = 0.5 * gop2R[colInd];

            op1R[ind] += val;

          val = -0.5 * gopf2R[colInd];

            op22R[ind] += val;

        }
      }
    }
    //end inline func
  }

  *arg0 = arg0_l;
}
