//
// auto-generated by op2.py
//

void ls_step_omp4_kernel(
  double *arg0,
  double *data1,
  int dat1size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  int count,
  int num_teams,
  int nthread){

  double arg0_l = *arg0;
  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data1[0:dat1size],data2[0:dat2size],data3[0:dat3size]) \
    map(to: nu0_ompkernel, nu1_ompkernel)
  #pragma omp distribute parallel for schedule(static,1)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    const double *alpha = &arg0_l;
    const double *s = &data1[15*n_op];
    double *step = &data2[15*n_op];
    double *nu = &data3[15*n_op];

    //inline function
    
    const double PI = 3.141592653589793238463;
    for(int i = 0; i < 15; i++) {
      step[i] = tanh(PI * s[i] / *alpha);
      nu[i] = nu0_ompkernel * step[i] + nu1_ompkernel * (1.0 - step[i]);
    }
    //end inline func
  }

  *arg0 = arg0_l;
}
