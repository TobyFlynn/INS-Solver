//
// auto-generated by op2.py
//

void poisson_mf2_op_omp4_kernel(
  double *data0,
  int dat0size,
  double *arg1,
  double *data2,
  int dat2size,
  int count,
  int num_teams,
  int nthread){

  double arg1_l = *arg1;
  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data2[0:dat2size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int n_op=0; n_op<count; n_op++ ){
    //variable mapping
    const double *cub_op = &data0[225*n_op];
    const double *tol = &arg1_l;
    double *op1 = &data2[225*n_op];

    //inline function
    
    for(int m = 0; m < 15; m++) {
      for(int n = 0; n < 15; n++) {
        int ind = m * 15 + n;
        int colInd = n * 15 + m;
        if(fabs(cub_op[colInd]) > *tol) {
          op1[ind] = cub_op[colInd];
        }
      }
    }
    //end inline func
  }

  *arg1 = arg1_l;
}
