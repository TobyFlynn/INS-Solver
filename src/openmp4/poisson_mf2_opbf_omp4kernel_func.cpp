//
// auto-generated by op2.py
//

void poisson_mf2_opbf_omp4_kernel(
  double *arg0,
  int *data1,
  int dat1size,
  int *data2,
  int dat2size,
  int *arg3,
  int *arg4,
  int *arg5,
  int *map6,
  int map6size,
  double *data6,
  int dat6size,
  double *data7,
  int dat7size,
  double *data8,
  int dat8size,
  double *data9,
  int dat9size,
  int *col_reord,
  int set_size1,
  int start,
  int end,
  int num_teams,
  int nthread){

  double arg0_l = *arg0;
  int arg3_l = *arg3;
  int arg4_l = *arg4;
  int arg5_l = *arg5;
  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data1[0:dat1size],data2[0:dat2size])\
    map(to:col_reord[0:set_size1],map6[0:map6size],data6[0:dat6size],data7[0:dat7size],data8[0:dat8size],data9[0:dat9size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int e=start; e<end; e++ ){
    int n_op = col_reord[e];
    int map6idx;
    map6idx = map6[n_op + set_size1 * 0];

    //variable mapping
    const double *tol = &arg0_l;
    const int *btype = &data1[1*n_op];
    const int *edgeNum = &data2[1*n_op];
    const int *d0 = &arg3_l;
    const int *d1 = &arg4_l;
    const int *d2 = &arg5_l;
    const double *gop0 = &data6[225 * map6idx];
    const double *gop1 = &data7[225 * map6idx];
    const double *gop2 = &data8[225 * map6idx];
    double *op1 = &data9[225 * map6idx];

    //inline function
    
    if(*btype == *d0 || *btype == *d1 || *btype == *d2) {
      if(*edgeNum == 0) {
        for(int m = 0; m < 15; m++) {
          for(int n = 0; n < 15; n++) {
            int ind = m * 15 + n;
            int colInd = n * 15 + m;
            double val = gop0[colInd];
            if(fabs(val) > *tol) {
              op1[ind] += val;
            }
          }
        }
      } else if(*edgeNum == 1) {
        for(int m = 0; m < 15; m++) {
          for(int n = 0; n < 15; n++) {
            int ind = m * 15 + n;
            int colInd = n * 15 + m;
            double val = gop1[colInd];
            if(fabs(val) > *tol) {
              op1[ind] += val;
            }
          }
        }
      } else {
        for(int m = 0; m < 15; m++) {
          for(int n = 0; n < 15; n++) {
            int ind = m * 15 + n;
            int colInd = n * 15 + m;
            double val = gop2[colInd];
            if(fabs(val) > *tol) {
              op1[ind] += val;
            }
          }
        }
      }
    }
    //end inline func
  }

  *arg0 = arg0_l;
  *arg3 = arg3_l;
  *arg4 = arg4_l;
  *arg5 = arg5_l;
}
