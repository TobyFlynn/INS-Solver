//
// auto-generated by op2.py
//

void gauss_gfi_faces_omp4_kernel(
  int *data0,
  int dat0size,
  bool *data1,
  int dat1size,
  int *map2,
  int map2size,
  double *data2,
  int dat2size,
  double *data4,
  int dat4size,
  double *data6,
  int dat6size,
  int *col_reord,
  int set_size1,
  int start,
  int end,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size]) \
    map(to: gFInterp0_g_ompkernel[:105], gFInterp1_g_ompkernel[:105], gFInterp2_g_ompkernel[:105])\
    map(to:col_reord[0:set_size1],map2[0:map2size],data2[0:dat2size],data4[0:dat4size],data6[0:dat6size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int e=start; e<end; e++ ){
    int n_op = col_reord[e];
    int map2idx;
    int map3idx;
    map2idx = map2[n_op + set_size1 * 0];
    map3idx = map2[n_op + set_size1 * 1];

    double* arg2_vec[] = {
       &data2[105 * map2idx],
       &data2[105 * map3idx]};
    double* arg4_vec[] = {
       &data4[105 * map2idx],
       &data4[105 * map3idx]};
    double* arg6_vec[] = {
       &data6[105 * map2idx],
       &data6[105 * map3idx]};
    //variable mapping
    const int *edgeNum = &data0[2*n_op];
    const bool *rev = &data1[1*n_op];
    double **gf0 = arg2_vec;
    double **gf1 = arg4_vec;
    double **gf2 = arg6_vec;

    //inline function
    

    int edgeL = edgeNum[0];
    int edgeR = edgeNum[1];
    bool reverse = *rev;

    for(int m = 0; m < 7; m++) {
      for(int n = 0; n < 15; n++) {
        int indL, indR;
        if(!reverse) {
          indL = m * 15 + n;
          indR = m * 15 + n;
        } else {
          indL = m * 15 + n;
          indR = (6 - m) * 15 + n;
        }

        if(edgeL == 0) {
          if(edgeR == 0) {
            gf0[0][indL] += gFInterp0_g_ompkernel[indR];
            gf0[1][indR] += gFInterp0_g_ompkernel[indL];
          } else if(edgeR == 1) {
            gf0[0][indL] += gFInterp1_g_ompkernel[indR];
            gf1[1][indR] += gFInterp0_g_ompkernel[indL];
          } else {
            gf0[0][indL] += gFInterp2_g_ompkernel[indR];
            gf2[1][indR] += gFInterp0_g_ompkernel[indL];
          }
        } else if(edgeL == 1) {
          if(edgeR == 0) {
            gf1[0][indL] += gFInterp0_g_ompkernel[indR];
            gf0[1][indR] += gFInterp1_g_ompkernel[indL];
          } else if(edgeR == 1) {
            gf1[0][indL] += gFInterp1_g_ompkernel[indR];
            gf1[1][indR] += gFInterp1_g_ompkernel[indL];
          } else {
            gf1[0][indL] += gFInterp2_g_ompkernel[indR];
            gf2[1][indR] += gFInterp1_g_ompkernel[indL];
          }
        } else {
          if(edgeR == 0) {
            gf2[0][indL] += gFInterp0_g_ompkernel[indR];
            gf0[1][indR] += gFInterp2_g_ompkernel[indL];
          } else if(edgeR == 1) {
            gf2[0][indL] += gFInterp1_g_ompkernel[indR];
            gf1[1][indR] += gFInterp2_g_ompkernel[indL];
          } else {
            gf2[0][indL] += gFInterp2_g_ompkernel[indR];
            gf2[1][indR] += gFInterp2_g_ompkernel[indL];
          }
        }
      }
    }
    //end inline func
  }

}
