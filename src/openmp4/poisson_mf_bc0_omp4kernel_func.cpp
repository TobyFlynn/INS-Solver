//
// auto-generated by op2.py
//

void poisson_mf_bc0_omp4_kernel(
  int *data0,
  int dat0size,
  int *data1,
  int dat1size,
  int *map2,
  int map2size,
  double *data2,
  int dat2size,
  double *data3,
  int dat3size,
  double *data4,
  int dat4size,
  double *data5,
  int dat5size,
  double *data6,
  int dat6size,
  double *data7,
  int dat7size,
  double *data8,
  int dat8size,
  double *data9,
  int dat9size,
  int *col_reord,
  int set_size1,
  int start,
  int end,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size],data1[0:dat1size]) \
    map(to: gaussW_g_ompkernel[:7])\
    map(to:col_reord[0:set_size1],map2[0:map2size],data2[0:dat2size],data3[0:dat3size],data4[0:dat4size],data5[0:dat5size],data6[0:dat6size],data7[0:dat7size],data8[0:dat8size],data9[0:dat9size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int e=start; e<end; e++ ){
    int n_op = col_reord[e];
    int map2idx;
    map2idx = map2[n_op + set_size1 * 0];

    //variable mapping
    const int *bedgeType = &data0[1*n_op];
    const int *bedgeNum = &data1[1*n_op];
    const double *sJ = &data2[21 * map2idx];
    const double *nx = &data3[21 * map2idx];
    const double *ny = &data4[21 * map2idx];
    const double *tau = &data5[3 * map2idx];
    const double *bc = &data6[21 * map2idx];
    double *fluxX = &data7[21 * map2idx];
    double *fluxY = &data8[21 * map2idx];
    double *flux = &data9[21 * map2idx];

    //inline function
    
    int exInd = 0;
    if(*bedgeNum == 1) exInd = 7;
    else if(*bedgeNum == 2) exInd = 2 * 7;

    for(int i = 0; i < 7; i++) {
      fluxX[exInd + i] += nx[exInd + i] * gaussW_g_ompkernel[i] * sJ[exInd + i] * bc[exInd + i];
      fluxY[exInd + i] += ny[exInd + i] * gaussW_g_ompkernel[i] * sJ[exInd + i] * bc[exInd + i];
      flux[exInd + i] += gaussW_g_ompkernel[i] * sJ[exInd + i] * tau[*bedgeNum] * bc[exInd + i];
    }
    //end inline func
  }

}
