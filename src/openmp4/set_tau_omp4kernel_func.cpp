//
// auto-generated by op2.py
//

void set_tau_omp4_kernel(
  int *data0,
  int dat0size,
  int *map1,
  int map1size,
  double *data1,
  int dat1size,
  double *data3,
  int dat3size,
  double *data5,
  int dat5size,
  double *data7,
  int dat7size,
  double *data9,
  int dat9size,
  int *col_reord,
  int set_size1,
  int start,
  int end,
  int num_teams,
  int nthread){

  #pragma omp target teams num_teams(num_teams) thread_limit(nthread) map(to:data0[0:dat0size]) \
    map(to: FMASK_ompkernel[:15])\
    map(to:col_reord[0:set_size1],map1[0:map1size],data1[0:dat1size],data3[0:dat3size],data5[0:dat5size],data7[0:dat7size],data9[0:dat9size])
  #pragma omp distribute parallel for schedule(static,1)
  for ( int e=start; e<end; e++ ){
    int n_op = col_reord[e];
    int map1idx;
    int map2idx;
    map1idx = map1[n_op + set_size1 * 0];
    map2idx = map1[n_op + set_size1 * 1];

    const double* arg1_vec[] = {
       &data1[3 * map1idx],
       &data1[3 * map2idx]};
    const double* arg3_vec[] = {
       &data3[3 * map1idx],
       &data3[3 * map2idx]};
    const double* arg5_vec[] = {
       &data5[15 * map1idx],
       &data5[15 * map2idx]};
    const double* arg7_vec[] = {
       &data7[15 * map1idx],
       &data7[15 * map2idx]};
    double* arg9_vec[] = {
       &data9[15 * map1idx],
       &data9[15 * map2idx]};
    //variable mapping
    const int *edgeNum = &data0[2*n_op];
    const double **x = arg1_vec;
    const double **y = arg3_vec;
    const double **J = arg5_vec;
    const double **sJ = arg7_vec;
    double **tau = arg9_vec;

    //inline function
    

    int edgeL = edgeNum[0];
    int edgeR = edgeNum[1];
    bool reverse;

    if(edgeR == 0) {
      if(edgeL == 0) {
        reverse = !(x[0][0] == x[1][0] && y[0][0] == y[1][0]);
      } else if(edgeL == 1) {
        reverse = !(x[0][1] == x[1][0] && y[0][1] == y[1][0]);
      } else {
        reverse = !(x[0][2] == x[1][0] && y[0][2] == y[1][0]);
      }
    } else if(edgeR == 1) {
      if(edgeL == 0) {
        reverse = !(x[0][0] == x[1][1] && y[0][0] == y[1][1]);
      } else if(edgeL == 1) {
        reverse = !(x[0][1] == x[1][1] && y[0][1] == y[1][1]);
      } else {
        reverse = !(x[0][2] == x[1][1] && y[0][2] == y[1][1]);
      }
    } else {
      if(edgeL == 0) {
        reverse = !(x[0][0] == x[1][2] && y[0][0] == y[1][2]);
      } else if(edgeL == 1) {
        reverse = !(x[0][1] == x[1][2] && y[0][1] == y[1][2]);
      } else {
        reverse = !(x[0][2] == x[1][2] && y[0][2] == y[1][2]);
      }
    }

    int exIndL = 0;
    if(edgeL == 1) exIndL = 5;
    else if(edgeL == 2) exIndL = 2 * 5;

    int exIndR = 0;
    if(edgeR == 1) exIndR = 5;
    else if(edgeR == 2) exIndR = 2 * 5;

    int *fmaskR;

    if(edgeR == 0) {
      fmaskR = FMASK_ompkernel;
    } else if(edgeR == 1) {
      fmaskR = &FMASK_ompkernel[5];
    } else {
      fmaskR = &FMASK_ompkernel[2 * 5];
    }

    int *fmaskL;

    if(edgeL == 0) {
      fmaskL = FMASK_ompkernel;
    } else if(edgeL == 1) {
      fmaskL = &FMASK_ompkernel[5];
    } else {
      fmaskL = &FMASK_ompkernel[2 * 5];
    }

    for(int i = 0; i < 5; i++) {
      int rIndF, lIndF, rInd, lInd;
      if(reverse) {
        rIndF = fmaskR[5 - i - 1];
        rInd = exIndR + 5 - i - 1;
      } else {
        rIndF = fmaskR[i];
        rInd = exIndR + i;
      }
      lIndF = fmaskL[i];
      lInd = exIndL + i;

      double lH = J[0][lIndF] / sJ[0][lInd];
      double rH = J[1][rIndF] / sJ[1][rInd];
      if(lH < rH) {
        tau[0][lInd] += 100.0*2.0*25.0*25.0 / lH;
        tau[1][rInd] += 100.0*2.0*25.0*25.0 / lH;
      } else {
        tau[0][lInd] += 100.0*2.0*25.0*25.0 / rH;
        tau[1][rInd] += 100.0*2.0*25.0*25.0 / rH;
      }
    }
    //end inline func
  }

}
