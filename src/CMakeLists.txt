set(COMMON_SRC solver_op.cpp poisson_op/poisson_op.cpp poisson_op/poisson_sub_mat_op.cpp)
list(APPEND COMMON_SRC ins_data_op.cpp timing_op.cpp io/shared_save_functions.cpp)
list(APPEND COMMON_SRC ls_op/ls_op.cpp ls/ls_reinit_poly.cpp)
set(CPU_SRC poisson_op/poisson_cpu_op.cpp utils_op.cpp )
set(GPU_SRC poisson_op/poisson_gpu_op.cu utils_op.cu ls_op/ls_reinit_op.cu ls/ls_reinit_poly_eval_cuda.cu)
set(SN_SRC ls/kd_tree.cpp io_op/save_solution_op.cpp io/load_mesh.cpp)
set(MPI_SRC ls/kd_tree_mpi.cpp io_op/save_solution_mpi_op.cpp io/load_mesh_mpi.cpp mpi_helper_func.cpp)

if(BUILD_SN AND BUILD_CPU)
  add_executable(ins_openmp ins_op.cpp ${COMMON_SRC} ${CPU_SRC} ${SN_SRC} openmp/ins_kernels.cpp)
  target_link_libraries(ins_openmp -L${OP2_DIR}/lib -lop2_openmp -lop2_hdf5 ${CGNS_LIB} ${PETSC_LIB} ${ARMA_LIB} ${OPENBLAS_LIB} -L${OP2DGTOOLKIT_DIR}/lib -lop2dgtoolkit_openmp -ldgtoolkit ${EXTRA_LIBS})
  target_compile_definitions(ins_openmp PRIVATE DG_ORDER=2 OP2_PARTITIONER=${PART_LIB_NAME})
endif()

if(BUILD_SN AND BUILD_GPU)
  add_executable(ins_cuda ins_op.cpp ${COMMON_SRC} ${GPU_SRC} ${SN_SRC} cuda/ins_kernels.cu)
  target_link_libraries(ins_cuda -L${OP2_DIR}/lib -lop2_cuda -lop2_hdf5 ${CGNS_LIB} ${PETSC_LIB} ${ARMA_LIB} ${OPENBLAS_LIB} CUDA::cudart_static CUDA::cublas -L${OP2DGTOOLKIT_DIR}/lib -lop2dgtoolkit_cuda -ldgtoolkit ${EXTRA_LIBS})
  target_compile_definitions(ins_cuda PRIVATE BUILD_CUDA OP2_DG_CUDA INS_CUDA DG_ORDER=2 OP2_PARTITIONER=${PART_LIB_NAME})
endif()

if(BUILD_MPI AND BUILD_CPU)
  add_executable(ins_mpi_openmp ins_op.cpp ${COMMON_SRC} ${CPU_SRC} ${MPI_SRC} ls_op/ls_reinit_mpi_op.cpp openmp/ins_kernels.cpp)
  target_include_directories(ins_mpi_openmp PRIVATE ${MPI_CXX_INCLUDE_PATH})
  target_link_libraries(ins_mpi_openmp -L${OP2_DIR}/lib -lop2_mpi -lop2_openmp -lop2_hdf5 ${CGNS_LIB} ${PETSC_LIB} ${ARMA_LIB} ${OPENBLAS_LIB} -L${OP2DGTOOLKIT_DIR}/lib -lop2dgtoolkit_mpi_openmp -ldgtoolkit ${PART_LIB} ${EXTRA_LIBS} ${MPI_CXX_LIBRARIES})
  target_compile_definitions(ins_mpi_openmp PRIVATE INS_MPI DG_ORDER=2 OP2_PARTITIONER=${PART_LIB_NAME})
endif()

if(BUILD_MPI AND BUILD_GPU)
  add_executable(ins_mpi_cuda ins_op.cpp ${COMMON_SRC} ${GPU_SRC} ${MPI_SRC} cuda/ins_kernels.cu)
  target_include_directories(ins_mpi_cuda PRIVATE ${MPI_CXX_INCLUDE_PATH})
  target_link_libraries(ins_mpi_cuda -L${OP2_DIR}/lib -lop2_mpi_cuda -lop2_hdf5 ${CGNS_LIB} ${PETSC_LIB} ${ARMA_LIB} CUDA::cudart_static CUDA::cublas -L${OP2DGTOOLKIT_DIR}/lib -lop2dgtoolkit_mpi_cuda -ldgtoolkit ${PART_LIB} ${EXTRA_LIBS} ${MPI_CXX_LIBRARIES})
  target_compile_definitions(ins_mpi_cuda PRIVATE BUILD_CUDA OP2_DG_CUDA INS_CUDA INS_MPI DG_ORDER=2 OP2_PARTITIONER=${PART_LIB_NAME})
endif()
