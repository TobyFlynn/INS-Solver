if(DIM EQUAL 2)
  set(COMMON_SRC ins2d_op.cpp solvers_op/2d/advection_solver_over_int_op.cpp)
  list(APPEND COMMON_SRC solvers_op/2d/advection_solver_op.cpp)
  list(APPEND COMMON_SRC solvers_op/2d/ls_solver_op.cpp)
  list(APPEND COMMON_SRC solvers/2d/ls_utils/ls_reinit_poly.cpp)
  list(APPEND COMMON_SRC solvers_op/2d/mp_ins_solver_over_int_op.cpp)
  list(APPEND COMMON_SRC solvers_op/2d/ins_solver_base_op.cpp)
  list(APPEND COMMON_SRC solvers_op/2d/ins_solver_op.cpp)
  list(APPEND COMMON_SRC solvers_op/2d/mp_ins_solver_op.cpp)
  list(APPEND COMMON_SRC solvers_op/2d/ins_solver_over_int_op.cpp)
  list(APPEND COMMON_SRC solvers_op/2d/ce_solver_over_int_op.cpp)

  set(CPU_SRC solvers/2d/ls_utils/ls_reinit.cpp)

  #set(GPU_SRC solvers/2d/ls_utils/ls_reinit_poly_eval_cuda.cu solvers/2d/ls_utils/ls_reinit.cu)
  #set(HIP_SRC solvers/2d/ls_utils/ls_reinit_poly_eval_hip.cpp solvers/2d/ls_utils/ls_reinit_hip.cpp)

  set(GPU_SRC solvers/2d/ls_utils/ls_reinit.cu)
  set(HIP_SRC solvers/2d/ls_utils/ls_reinit_hip.cpp)

  set(SN_SRC solvers/2d/ls_utils/kd_tree.cpp)
  set(MPI_SRC solvers/2d/ls_utils/kd_tree_mpi.cpp)
  set(SN_CPU_SRC "")
  set(SN_GPU_SRC "")
  set(MPI_CPU_SRC "")
  set(MPI_GPU_SRC "")

  set(DIM_POSTFIX 2d)
elseif(DIM EQUAL 3)
  set(COMMON_SRC ins3d_op.cpp solvers_op/3d/advection_solver_op.cpp)
  list(APPEND COMMON_SRC solvers_op/3d/ins_solver_base_op.cpp)
  list(APPEND COMMON_SRC solvers_op/3d/ins_solver_op.cpp)
  list(APPEND COMMON_SRC solvers_op/3d/ls_solver_op.cpp)
  list(APPEND COMMON_SRC solvers/3d/ls_utils/poly_approx.cpp)
  list(APPEND COMMON_SRC solvers/3d/ls_utils/kd_tree.cpp)
  list(APPEND COMMON_SRC solvers_op/3d/mp_ins_solver_op.cpp)

  set(CPU_SRC solvers/3d/ls_solver_cpu.cpp)
  set(GPU_SRC solvers/3d/ls_solver_gpu.cu)
  set(HIP_SRC solvers/3d/ls_solver_hip.cpp)
  list(APPEND MPI_SRC solvers/3d/ls_utils/kd_tree_mpi.cpp)

  set(DIM_POSTFIX 3d)
endif()

if(SOA EQUAL 1)
  set(DG_COMPILER_DEFS USE_OP2_KERNELS DG_OP2_SOA)
else()
  if(DIM EQUAL 2)
    set(DG_COMPILER_DEFS USE_OP2_KERNELS)
  else()
    set(DG_COMPILER_DEFS "")
  endif()
endif()

if(BUILD_SN AND BUILD_CPU)
  add_executable(ins${DIM_POSTFIX}_openmp ${COMMON_SRC} ${CPU_SRC} ${SN_SRC} ${SN_CPU_SRC} openmp/ins${DIM_POSTFIX}_kernels.cpp)
  target_link_libraries(ins${DIM_POSTFIX}_openmp -L${OP2_DIR}/lib -lop2_openmp -lop2_hdf5 ${COMMON_LIBS} -L${OP2DGTOOLKIT_DIR}/lib -lop2dgtoolkit_${DIM_POSTFIX}_openmp -ldgtoolkit ${EXTRA_LIBS})
  target_compile_definitions(ins${DIM_POSTFIX}_openmp PRIVATE DG_DIM=${DIM} ${COMMON_COMPILER_DEFS})
endif()

if(BUILD_SN AND BUILD_GPU)
  add_executable(ins${DIM_POSTFIX}_cuda ${COMMON_SRC} ${GPU_SRC} ${SN_SRC} ${SN_GPU_SRC} cuda/ins${DIM_POSTFIX}_kernels.cu)
  target_link_libraries(ins${DIM_POSTFIX}_cuda -L${OP2_DIR}/lib -lop2_cuda -lop2_hdf5 ${COMMON_LIBS} ${AMGX_LIB} ${INS_CUDA_LIBS} -L${OP2DGTOOLKIT_DIR}/lib -lop2dgtoolkit_${DIM_POSTFIX}_cuda -ldgtoolkit ${EXTRA_LIBS})
  target_compile_definitions(ins${DIM_POSTFIX}_cuda PRIVATE ${DG_COMPILER_DEFS} OP2_DG_CUDA INS_CUDA DG_DIM=${DIM} ${COMMON_COMPILER_DEFS})

  set_property(TARGET ins${DIM_POSTFIX}_cuda PROPERTY CUDA_SEPARABLE_COMPILATION ON)
endif()

if(BUILD_SN AND BUILD_HIP)
  
  add_executable(ins${DIM_POSTFIX}_hip ${COMMON_SRC} ${HIP_SRC} ${SN_SRC} ${SN_GPU_SRC} hip/ins${DIM_POSTFIX}_kernels.cpp)
  target_link_libraries(ins${DIM_POSTFIX}_hip -L${OP2_DIR}/lib -lop2_cuda -lop2_hdf5 ${COMMON_LIBS} ${AMGX_LIB} ${INS_CUDA_LIBS} -L${OP2DGTOOLKIT_DIR}/lib -lop2dgtoolkit_${DIM_POSTFIX}_cuda -ldgtoolkit ${EXTRA_LIBS})
  target_compile_definitions(ins${DIM_POSTFIX}_hip PRIVATE ${DG_COMPILER_DEFS} OP2_DG_CUDA INS_CUDA DG_DIM=${DIM} ${COMMON_COMPILER_DEFS})
endif()

if(BUILD_MPI AND BUILD_CPU)
  add_executable(ins${DIM_POSTFIX}_mpi_openmp ${COMMON_SRC} ${CPU_SRC} ${MPI_SRC} ${MPI_CPU_SRC} openmp/ins${DIM_POSTFIX}_kernels.cpp)
  target_include_directories(ins${DIM_POSTFIX}_mpi_openmp PRIVATE ${MPI_CXX_INCLUDE_PATH})
  target_link_libraries(ins${DIM_POSTFIX}_mpi_openmp -L${OP2_DIR}/lib -lop2_mpi ${COMMON_LIBS} -L${OP2DGTOOLKIT_DIR}/lib -lop2dgtoolkit_${DIM_POSTFIX}_mpi_openmp -ldgtoolkit ${PART_LIB} ${EXTRA_LIBS} ${MPI_CXX_LIBRARIES})
  target_compile_definitions(ins${DIM_POSTFIX}_mpi_openmp PRIVATE INS_MPI DG_DIM=${DIM} ${COMMON_COMPILER_DEFS})

  add_executable(ins${DIM_POSTFIX}_mpi ${COMMON_SRC} ${CPU_SRC} ${MPI_SRC} ${MPI_CPU_SRC} seq/ins${DIM_POSTFIX}_seqkernels.cpp)
  target_include_directories(ins${DIM_POSTFIX}_mpi PRIVATE ${MPI_CXX_INCLUDE_PATH})
  target_link_libraries(ins${DIM_POSTFIX}_mpi -L${OP2_DIR}/lib -lop2_mpi ${COMMON_LIBS} -L${OP2DGTOOLKIT_DIR}/lib -lop2dgtoolkit_${DIM_POSTFIX}_mpi -ldgtoolkit ${PART_LIB} ${EXTRA_LIBS} ${MPI_CXX_LIBRARIES})
  target_compile_definitions(ins${DIM_POSTFIX}_mpi PRIVATE INS_MPI DG_DIM=${DIM} ${COMMON_COMPILER_DEFS})
endif()

if(BUILD_MPI AND BUILD_GPU)
  add_executable(ins${DIM_POSTFIX}_mpi_cuda ${COMMON_SRC} ${GPU_SRC} ${MPI_SRC} ${MPI_GPU_SRC} cuda/ins${DIM_POSTFIX}_kernels.cu)
  target_include_directories(ins${DIM_POSTFIX}_mpi_cuda PRIVATE ${MPI_CXX_INCLUDE_PATH})
  target_link_libraries(ins${DIM_POSTFIX}_mpi_cuda -L${OP2_DIR}/lib -lop2_mpi_cuda ${AMGX_LIB} ${INS_CUDA_LIBS} -L${OP2DGTOOLKIT_DIR}/lib -lop2dgtoolkit_${DIM_POSTFIX}_mpi_cuda -ldgtoolkit ${PART_LIB} ${EXTRA_LIBS} ${COMMON_LIBS} ${MPI_CXX_LIBRARIES})
  target_compile_definitions(ins${DIM_POSTFIX}_mpi_cuda PRIVATE ${DG_COMPILER_DEFS} OP2_DG_CUDA INS_CUDA INS_MPI DG_DIM=${DIM} ${COMMON_COMPILER_DEFS})

  set_property(TARGET ins${DIM_POSTFIX}_mpi_cuda PROPERTY CUDA_SEPARABLE_COMPILATION ON)
endif()
