//
// auto-generated by op2.py
//

//user function
__device__ void gauss_grad_faces_gpu( const int *edgeNum, const double **x,
                             const double **y, const double **mDx0,
                             const double **mDy0, const double **mDx1,
                             const double **mDy1, const double **mDx2,
                             const double **mDy2, double **pDx0, double **pDy0,
                             double **pDx1, double **pDy1, double **pDx2,
                             double **pDy2) {

  int edgeL = edgeNum[0];
  int edgeR = edgeNum[1];
  bool reverse;

  if(edgeR == 0) {
    if(edgeL == 0) {
      reverse = !(x[0][0] == x[1][0] && y[0][0] == y[1][0]);
    } else if(edgeL == 1) {
      reverse = !(x[0][1] == x[1][0] && y[0][1] == y[1][0]);
    } else {
      reverse = !(x[0][2] == x[1][0] && y[0][2] == y[1][0]);
    }
  } else if(edgeR == 1) {
    if(edgeL == 0) {
      reverse = !(x[0][0] == x[1][1] && y[0][0] == y[1][1]);
    } else if(edgeL == 1) {
      reverse = !(x[0][1] == x[1][1] && y[0][1] == y[1][1]);
    } else {
      reverse = !(x[0][2] == x[1][1] && y[0][2] == y[1][1]);
    }
  } else {
    if(edgeL == 0) {
      reverse = !(x[0][0] == x[1][2] && y[0][0] == y[1][2]);
    } else if(edgeL == 1) {
      reverse = !(x[0][1] == x[1][2] && y[0][1] == y[1][2]);
    } else {
      reverse = !(x[0][2] == x[1][2] && y[0][2] == y[1][2]);
    }
  }

  for(int m = 0; m < 7; m++) {
    for(int n = 0; n < 15; n++) {
      int indL, indR;
      if(reverse) {
        indL = m * 15 + n;
        indR = m * 15 + n;
      } else {
        indL = m * 15 + n;
        indR = (6 - m) * 15 + n;
      }

      if(edgeL == 0) {
        if(edgeR == 0) {
          pDx0[0][indL] += mDx0[1][indR];
          pDy0[0][indL] += mDy0[1][indR];
          pDx0[1][indR] += mDx0[0][indL];
          pDx0[1][indR] += mDx0[0][indL];
        } else if(edgeR == 1) {
          pDx0[0][indL] += mDx1[1][indR];
          pDy0[0][indL] += mDy1[1][indR];
          pDx1[1][indR] += mDx0[0][indL];
          pDx1[1][indR] += mDx0[0][indL];
        } else {
          pDx0[0][indL] += mDx2[1][indR];
          pDy0[0][indL] += mDy2[1][indR];
          pDx2[1][indR] += mDx0[0][indL];
          pDx2[1][indR] += mDx0[0][indL];
        }
      } else if(edgeL == 1) {
        if(edgeR == 0) {
          pDx1[0][indL] += mDx0[1][indR];
          pDy1[0][indL] += mDy0[1][indR];
          pDx0[1][indR] += mDx1[0][indL];
          pDx0[1][indR] += mDx1[0][indL];
        } else if(edgeR == 1) {
          pDx1[0][indL] += mDx1[1][indR];
          pDy1[0][indL] += mDy1[1][indR];
          pDx1[1][indR] += mDx1[0][indL];
          pDx1[1][indR] += mDx1[0][indL];
        } else {
          pDx1[0][indL] += mDx2[1][indR];
          pDy1[0][indL] += mDy2[1][indR];
          pDx2[1][indR] += mDx1[0][indL];
          pDx2[1][indR] += mDx1[0][indL];
        }
      } else {
        if(edgeR == 0) {
          pDx2[0][indL] += mDx0[1][indR];
          pDy2[0][indL] += mDy0[1][indR];
          pDx0[1][indR] += mDx2[0][indL];
          pDx0[1][indR] += mDx2[0][indL];
        } else if(edgeR == 1) {
          pDx2[0][indL] += mDx1[1][indR];
          pDy2[0][indL] += mDy1[1][indR];
          pDx1[1][indR] += mDx2[0][indL];
          pDx1[1][indR] += mDx2[0][indL];
        } else {
          pDx2[0][indL] += mDx2[1][indR];
          pDy2[0][indL] += mDy2[1][indR];
          pDx2[1][indR] += mDx2[0][indL];
          pDx2[1][indR] += mDx2[0][indL];
        }
      }
    }
  }

}

// CUDA kernel function
__global__ void op_cuda_gauss_grad_faces(
  const double *__restrict ind_arg0,
  const double *__restrict ind_arg1,
  const double *__restrict ind_arg2,
  const double *__restrict ind_arg3,
  const double *__restrict ind_arg4,
  const double *__restrict ind_arg5,
  const double *__restrict ind_arg6,
  const double *__restrict ind_arg7,
  double *__restrict ind_arg8,
  double *__restrict ind_arg9,
  double *__restrict ind_arg10,
  double *__restrict ind_arg11,
  double *__restrict ind_arg12,
  double *__restrict ind_arg13,
  const int *__restrict opDat1Map,
  const int *__restrict arg0,
  int start,
  int end,
  int   set_size) {
  double arg17_l[105];
  double arg18_l[105];
  double arg19_l[105];
  double arg20_l[105];
  double arg21_l[105];
  double arg22_l[105];
  double arg23_l[105];
  double arg24_l[105];
  double arg25_l[105];
  double arg26_l[105];
  double arg27_l[105];
  double arg28_l[105];
  double *arg17_vec[2] = {
    arg17_l,
    arg18_l,
  };
  double *arg19_vec[2] = {
    arg19_l,
    arg20_l,
  };
  double *arg21_vec[2] = {
    arg21_l,
    arg22_l,
  };
  double *arg23_vec[2] = {
    arg23_l,
    arg24_l,
  };
  double *arg25_vec[2] = {
    arg25_l,
    arg26_l,
  };
  double *arg27_vec[2] = {
    arg27_l,
    arg28_l,
  };
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    double arg17_l[105];
    for ( int d=0; d<105; d++ ){
      arg17_l[d] = ZERO_double;
    }
    double arg18_l[105];
    for ( int d=0; d<105; d++ ){
      arg18_l[d] = ZERO_double;
    }
    double arg19_l[105];
    for ( int d=0; d<105; d++ ){
      arg19_l[d] = ZERO_double;
    }
    double arg20_l[105];
    for ( int d=0; d<105; d++ ){
      arg20_l[d] = ZERO_double;
    }
    double arg21_l[105];
    for ( int d=0; d<105; d++ ){
      arg21_l[d] = ZERO_double;
    }
    double arg22_l[105];
    for ( int d=0; d<105; d++ ){
      arg22_l[d] = ZERO_double;
    }
    double arg23_l[105];
    for ( int d=0; d<105; d++ ){
      arg23_l[d] = ZERO_double;
    }
    double arg24_l[105];
    for ( int d=0; d<105; d++ ){
      arg24_l[d] = ZERO_double;
    }
    double arg25_l[105];
    for ( int d=0; d<105; d++ ){
      arg25_l[d] = ZERO_double;
    }
    double arg26_l[105];
    for ( int d=0; d<105; d++ ){
      arg26_l[d] = ZERO_double;
    }
    double arg27_l[105];
    for ( int d=0; d<105; d++ ){
      arg27_l[d] = ZERO_double;
    }
    double arg28_l[105];
    for ( int d=0; d<105; d++ ){
      arg28_l[d] = ZERO_double;
    }
    int map1idx;
    int map2idx;
    map1idx = opDat1Map[n + set_size * 0];
    map2idx = opDat1Map[n + set_size * 1];
    const double* arg1_vec[] = {
       &ind_arg0[3 * map1idx],
       &ind_arg0[3 * map2idx]};
    const double* arg3_vec[] = {
       &ind_arg1[3 * map1idx],
       &ind_arg1[3 * map2idx]};
    const double* arg5_vec[] = {
       &ind_arg2[105 * map1idx],
       &ind_arg2[105 * map2idx]};
    const double* arg7_vec[] = {
       &ind_arg3[105 * map1idx],
       &ind_arg3[105 * map2idx]};
    const double* arg9_vec[] = {
       &ind_arg4[105 * map1idx],
       &ind_arg4[105 * map2idx]};
    const double* arg11_vec[] = {
       &ind_arg5[105 * map1idx],
       &ind_arg5[105 * map2idx]};
    const double* arg13_vec[] = {
       &ind_arg6[105 * map1idx],
       &ind_arg6[105 * map2idx]};
    const double* arg15_vec[] = {
       &ind_arg7[105 * map1idx],
       &ind_arg7[105 * map2idx]};
    double* arg17_vec[] = {
       &ind_arg8[105 * map1idx],
       &ind_arg8[105 * map2idx]};
    double* arg19_vec[] = {
       &ind_arg9[105 * map1idx],
       &ind_arg9[105 * map2idx]};
    double* arg21_vec[] = {
       &ind_arg10[105 * map1idx],
       &ind_arg10[105 * map2idx]};
    double* arg23_vec[] = {
       &ind_arg11[105 * map1idx],
       &ind_arg11[105 * map2idx]};
    double* arg25_vec[] = {
       &ind_arg12[105 * map1idx],
       &ind_arg12[105 * map2idx]};
    double* arg27_vec[] = {
       &ind_arg13[105 * map1idx],
       &ind_arg13[105 * map2idx]};

    //user-supplied kernel call
    gauss_grad_faces_gpu(arg0+n*2,
                     arg1_vec,
                     arg3_vec,
                     arg5_vec,
                     arg7_vec,
                     arg9_vec,
                     arg11_vec,
                     arg13_vec,
                     arg15_vec,
                     arg17_vec,
                     arg19_vec,
                     arg21_vec,
                     arg23_vec,
                     arg25_vec,
                     arg27_vec);
    atomicAdd(&ind_arg8[0+map1idx*105],arg17_l[0]);
    atomicAdd(&ind_arg8[1+map1idx*105],arg17_l[1]);
    atomicAdd(&ind_arg8[2+map1idx*105],arg17_l[2]);
    atomicAdd(&ind_arg8[3+map1idx*105],arg17_l[3]);
    atomicAdd(&ind_arg8[4+map1idx*105],arg17_l[4]);
    atomicAdd(&ind_arg8[5+map1idx*105],arg17_l[5]);
    atomicAdd(&ind_arg8[6+map1idx*105],arg17_l[6]);
    atomicAdd(&ind_arg8[7+map1idx*105],arg17_l[7]);
    atomicAdd(&ind_arg8[8+map1idx*105],arg17_l[8]);
    atomicAdd(&ind_arg8[9+map1idx*105],arg17_l[9]);
    atomicAdd(&ind_arg8[10+map1idx*105],arg17_l[10]);
    atomicAdd(&ind_arg8[11+map1idx*105],arg17_l[11]);
    atomicAdd(&ind_arg8[12+map1idx*105],arg17_l[12]);
    atomicAdd(&ind_arg8[13+map1idx*105],arg17_l[13]);
    atomicAdd(&ind_arg8[14+map1idx*105],arg17_l[14]);
    atomicAdd(&ind_arg8[15+map1idx*105],arg17_l[15]);
    atomicAdd(&ind_arg8[16+map1idx*105],arg17_l[16]);
    atomicAdd(&ind_arg8[17+map1idx*105],arg17_l[17]);
    atomicAdd(&ind_arg8[18+map1idx*105],arg17_l[18]);
    atomicAdd(&ind_arg8[19+map1idx*105],arg17_l[19]);
    atomicAdd(&ind_arg8[20+map1idx*105],arg17_l[20]);
    atomicAdd(&ind_arg8[21+map1idx*105],arg17_l[21]);
    atomicAdd(&ind_arg8[22+map1idx*105],arg17_l[22]);
    atomicAdd(&ind_arg8[23+map1idx*105],arg17_l[23]);
    atomicAdd(&ind_arg8[24+map1idx*105],arg17_l[24]);
    atomicAdd(&ind_arg8[25+map1idx*105],arg17_l[25]);
    atomicAdd(&ind_arg8[26+map1idx*105],arg17_l[26]);
    atomicAdd(&ind_arg8[27+map1idx*105],arg17_l[27]);
    atomicAdd(&ind_arg8[28+map1idx*105],arg17_l[28]);
    atomicAdd(&ind_arg8[29+map1idx*105],arg17_l[29]);
    atomicAdd(&ind_arg8[30+map1idx*105],arg17_l[30]);
    atomicAdd(&ind_arg8[31+map1idx*105],arg17_l[31]);
    atomicAdd(&ind_arg8[32+map1idx*105],arg17_l[32]);
    atomicAdd(&ind_arg8[33+map1idx*105],arg17_l[33]);
    atomicAdd(&ind_arg8[34+map1idx*105],arg17_l[34]);
    atomicAdd(&ind_arg8[35+map1idx*105],arg17_l[35]);
    atomicAdd(&ind_arg8[36+map1idx*105],arg17_l[36]);
    atomicAdd(&ind_arg8[37+map1idx*105],arg17_l[37]);
    atomicAdd(&ind_arg8[38+map1idx*105],arg17_l[38]);
    atomicAdd(&ind_arg8[39+map1idx*105],arg17_l[39]);
    atomicAdd(&ind_arg8[40+map1idx*105],arg17_l[40]);
    atomicAdd(&ind_arg8[41+map1idx*105],arg17_l[41]);
    atomicAdd(&ind_arg8[42+map1idx*105],arg17_l[42]);
    atomicAdd(&ind_arg8[43+map1idx*105],arg17_l[43]);
    atomicAdd(&ind_arg8[44+map1idx*105],arg17_l[44]);
    atomicAdd(&ind_arg8[45+map1idx*105],arg17_l[45]);
    atomicAdd(&ind_arg8[46+map1idx*105],arg17_l[46]);
    atomicAdd(&ind_arg8[47+map1idx*105],arg17_l[47]);
    atomicAdd(&ind_arg8[48+map1idx*105],arg17_l[48]);
    atomicAdd(&ind_arg8[49+map1idx*105],arg17_l[49]);
    atomicAdd(&ind_arg8[50+map1idx*105],arg17_l[50]);
    atomicAdd(&ind_arg8[51+map1idx*105],arg17_l[51]);
    atomicAdd(&ind_arg8[52+map1idx*105],arg17_l[52]);
    atomicAdd(&ind_arg8[53+map1idx*105],arg17_l[53]);
    atomicAdd(&ind_arg8[54+map1idx*105],arg17_l[54]);
    atomicAdd(&ind_arg8[55+map1idx*105],arg17_l[55]);
    atomicAdd(&ind_arg8[56+map1idx*105],arg17_l[56]);
    atomicAdd(&ind_arg8[57+map1idx*105],arg17_l[57]);
    atomicAdd(&ind_arg8[58+map1idx*105],arg17_l[58]);
    atomicAdd(&ind_arg8[59+map1idx*105],arg17_l[59]);
    atomicAdd(&ind_arg8[60+map1idx*105],arg17_l[60]);
    atomicAdd(&ind_arg8[61+map1idx*105],arg17_l[61]);
    atomicAdd(&ind_arg8[62+map1idx*105],arg17_l[62]);
    atomicAdd(&ind_arg8[63+map1idx*105],arg17_l[63]);
    atomicAdd(&ind_arg8[64+map1idx*105],arg17_l[64]);
    atomicAdd(&ind_arg8[65+map1idx*105],arg17_l[65]);
    atomicAdd(&ind_arg8[66+map1idx*105],arg17_l[66]);
    atomicAdd(&ind_arg8[67+map1idx*105],arg17_l[67]);
    atomicAdd(&ind_arg8[68+map1idx*105],arg17_l[68]);
    atomicAdd(&ind_arg8[69+map1idx*105],arg17_l[69]);
    atomicAdd(&ind_arg8[70+map1idx*105],arg17_l[70]);
    atomicAdd(&ind_arg8[71+map1idx*105],arg17_l[71]);
    atomicAdd(&ind_arg8[72+map1idx*105],arg17_l[72]);
    atomicAdd(&ind_arg8[73+map1idx*105],arg17_l[73]);
    atomicAdd(&ind_arg8[74+map1idx*105],arg17_l[74]);
    atomicAdd(&ind_arg8[75+map1idx*105],arg17_l[75]);
    atomicAdd(&ind_arg8[76+map1idx*105],arg17_l[76]);
    atomicAdd(&ind_arg8[77+map1idx*105],arg17_l[77]);
    atomicAdd(&ind_arg8[78+map1idx*105],arg17_l[78]);
    atomicAdd(&ind_arg8[79+map1idx*105],arg17_l[79]);
    atomicAdd(&ind_arg8[80+map1idx*105],arg17_l[80]);
    atomicAdd(&ind_arg8[81+map1idx*105],arg17_l[81]);
    atomicAdd(&ind_arg8[82+map1idx*105],arg17_l[82]);
    atomicAdd(&ind_arg8[83+map1idx*105],arg17_l[83]);
    atomicAdd(&ind_arg8[84+map1idx*105],arg17_l[84]);
    atomicAdd(&ind_arg8[85+map1idx*105],arg17_l[85]);
    atomicAdd(&ind_arg8[86+map1idx*105],arg17_l[86]);
    atomicAdd(&ind_arg8[87+map1idx*105],arg17_l[87]);
    atomicAdd(&ind_arg8[88+map1idx*105],arg17_l[88]);
    atomicAdd(&ind_arg8[89+map1idx*105],arg17_l[89]);
    atomicAdd(&ind_arg8[90+map1idx*105],arg17_l[90]);
    atomicAdd(&ind_arg8[91+map1idx*105],arg17_l[91]);
    atomicAdd(&ind_arg8[92+map1idx*105],arg17_l[92]);
    atomicAdd(&ind_arg8[93+map1idx*105],arg17_l[93]);
    atomicAdd(&ind_arg8[94+map1idx*105],arg17_l[94]);
    atomicAdd(&ind_arg8[95+map1idx*105],arg17_l[95]);
    atomicAdd(&ind_arg8[96+map1idx*105],arg17_l[96]);
    atomicAdd(&ind_arg8[97+map1idx*105],arg17_l[97]);
    atomicAdd(&ind_arg8[98+map1idx*105],arg17_l[98]);
    atomicAdd(&ind_arg8[99+map1idx*105],arg17_l[99]);
    atomicAdd(&ind_arg8[100+map1idx*105],arg17_l[100]);
    atomicAdd(&ind_arg8[101+map1idx*105],arg17_l[101]);
    atomicAdd(&ind_arg8[102+map1idx*105],arg17_l[102]);
    atomicAdd(&ind_arg8[103+map1idx*105],arg17_l[103]);
    atomicAdd(&ind_arg8[104+map1idx*105],arg17_l[104]);
    atomicAdd(&ind_arg8[0+map2idx*105],arg18_l[0]);
    atomicAdd(&ind_arg8[1+map2idx*105],arg18_l[1]);
    atomicAdd(&ind_arg8[2+map2idx*105],arg18_l[2]);
    atomicAdd(&ind_arg8[3+map2idx*105],arg18_l[3]);
    atomicAdd(&ind_arg8[4+map2idx*105],arg18_l[4]);
    atomicAdd(&ind_arg8[5+map2idx*105],arg18_l[5]);
    atomicAdd(&ind_arg8[6+map2idx*105],arg18_l[6]);
    atomicAdd(&ind_arg8[7+map2idx*105],arg18_l[7]);
    atomicAdd(&ind_arg8[8+map2idx*105],arg18_l[8]);
    atomicAdd(&ind_arg8[9+map2idx*105],arg18_l[9]);
    atomicAdd(&ind_arg8[10+map2idx*105],arg18_l[10]);
    atomicAdd(&ind_arg8[11+map2idx*105],arg18_l[11]);
    atomicAdd(&ind_arg8[12+map2idx*105],arg18_l[12]);
    atomicAdd(&ind_arg8[13+map2idx*105],arg18_l[13]);
    atomicAdd(&ind_arg8[14+map2idx*105],arg18_l[14]);
    atomicAdd(&ind_arg8[15+map2idx*105],arg18_l[15]);
    atomicAdd(&ind_arg8[16+map2idx*105],arg18_l[16]);
    atomicAdd(&ind_arg8[17+map2idx*105],arg18_l[17]);
    atomicAdd(&ind_arg8[18+map2idx*105],arg18_l[18]);
    atomicAdd(&ind_arg8[19+map2idx*105],arg18_l[19]);
    atomicAdd(&ind_arg8[20+map2idx*105],arg18_l[20]);
    atomicAdd(&ind_arg8[21+map2idx*105],arg18_l[21]);
    atomicAdd(&ind_arg8[22+map2idx*105],arg18_l[22]);
    atomicAdd(&ind_arg8[23+map2idx*105],arg18_l[23]);
    atomicAdd(&ind_arg8[24+map2idx*105],arg18_l[24]);
    atomicAdd(&ind_arg8[25+map2idx*105],arg18_l[25]);
    atomicAdd(&ind_arg8[26+map2idx*105],arg18_l[26]);
    atomicAdd(&ind_arg8[27+map2idx*105],arg18_l[27]);
    atomicAdd(&ind_arg8[28+map2idx*105],arg18_l[28]);
    atomicAdd(&ind_arg8[29+map2idx*105],arg18_l[29]);
    atomicAdd(&ind_arg8[30+map2idx*105],arg18_l[30]);
    atomicAdd(&ind_arg8[31+map2idx*105],arg18_l[31]);
    atomicAdd(&ind_arg8[32+map2idx*105],arg18_l[32]);
    atomicAdd(&ind_arg8[33+map2idx*105],arg18_l[33]);
    atomicAdd(&ind_arg8[34+map2idx*105],arg18_l[34]);
    atomicAdd(&ind_arg8[35+map2idx*105],arg18_l[35]);
    atomicAdd(&ind_arg8[36+map2idx*105],arg18_l[36]);
    atomicAdd(&ind_arg8[37+map2idx*105],arg18_l[37]);
    atomicAdd(&ind_arg8[38+map2idx*105],arg18_l[38]);
    atomicAdd(&ind_arg8[39+map2idx*105],arg18_l[39]);
    atomicAdd(&ind_arg8[40+map2idx*105],arg18_l[40]);
    atomicAdd(&ind_arg8[41+map2idx*105],arg18_l[41]);
    atomicAdd(&ind_arg8[42+map2idx*105],arg18_l[42]);
    atomicAdd(&ind_arg8[43+map2idx*105],arg18_l[43]);
    atomicAdd(&ind_arg8[44+map2idx*105],arg18_l[44]);
    atomicAdd(&ind_arg8[45+map2idx*105],arg18_l[45]);
    atomicAdd(&ind_arg8[46+map2idx*105],arg18_l[46]);
    atomicAdd(&ind_arg8[47+map2idx*105],arg18_l[47]);
    atomicAdd(&ind_arg8[48+map2idx*105],arg18_l[48]);
    atomicAdd(&ind_arg8[49+map2idx*105],arg18_l[49]);
    atomicAdd(&ind_arg8[50+map2idx*105],arg18_l[50]);
    atomicAdd(&ind_arg8[51+map2idx*105],arg18_l[51]);
    atomicAdd(&ind_arg8[52+map2idx*105],arg18_l[52]);
    atomicAdd(&ind_arg8[53+map2idx*105],arg18_l[53]);
    atomicAdd(&ind_arg8[54+map2idx*105],arg18_l[54]);
    atomicAdd(&ind_arg8[55+map2idx*105],arg18_l[55]);
    atomicAdd(&ind_arg8[56+map2idx*105],arg18_l[56]);
    atomicAdd(&ind_arg8[57+map2idx*105],arg18_l[57]);
    atomicAdd(&ind_arg8[58+map2idx*105],arg18_l[58]);
    atomicAdd(&ind_arg8[59+map2idx*105],arg18_l[59]);
    atomicAdd(&ind_arg8[60+map2idx*105],arg18_l[60]);
    atomicAdd(&ind_arg8[61+map2idx*105],arg18_l[61]);
    atomicAdd(&ind_arg8[62+map2idx*105],arg18_l[62]);
    atomicAdd(&ind_arg8[63+map2idx*105],arg18_l[63]);
    atomicAdd(&ind_arg8[64+map2idx*105],arg18_l[64]);
    atomicAdd(&ind_arg8[65+map2idx*105],arg18_l[65]);
    atomicAdd(&ind_arg8[66+map2idx*105],arg18_l[66]);
    atomicAdd(&ind_arg8[67+map2idx*105],arg18_l[67]);
    atomicAdd(&ind_arg8[68+map2idx*105],arg18_l[68]);
    atomicAdd(&ind_arg8[69+map2idx*105],arg18_l[69]);
    atomicAdd(&ind_arg8[70+map2idx*105],arg18_l[70]);
    atomicAdd(&ind_arg8[71+map2idx*105],arg18_l[71]);
    atomicAdd(&ind_arg8[72+map2idx*105],arg18_l[72]);
    atomicAdd(&ind_arg8[73+map2idx*105],arg18_l[73]);
    atomicAdd(&ind_arg8[74+map2idx*105],arg18_l[74]);
    atomicAdd(&ind_arg8[75+map2idx*105],arg18_l[75]);
    atomicAdd(&ind_arg8[76+map2idx*105],arg18_l[76]);
    atomicAdd(&ind_arg8[77+map2idx*105],arg18_l[77]);
    atomicAdd(&ind_arg8[78+map2idx*105],arg18_l[78]);
    atomicAdd(&ind_arg8[79+map2idx*105],arg18_l[79]);
    atomicAdd(&ind_arg8[80+map2idx*105],arg18_l[80]);
    atomicAdd(&ind_arg8[81+map2idx*105],arg18_l[81]);
    atomicAdd(&ind_arg8[82+map2idx*105],arg18_l[82]);
    atomicAdd(&ind_arg8[83+map2idx*105],arg18_l[83]);
    atomicAdd(&ind_arg8[84+map2idx*105],arg18_l[84]);
    atomicAdd(&ind_arg8[85+map2idx*105],arg18_l[85]);
    atomicAdd(&ind_arg8[86+map2idx*105],arg18_l[86]);
    atomicAdd(&ind_arg8[87+map2idx*105],arg18_l[87]);
    atomicAdd(&ind_arg8[88+map2idx*105],arg18_l[88]);
    atomicAdd(&ind_arg8[89+map2idx*105],arg18_l[89]);
    atomicAdd(&ind_arg8[90+map2idx*105],arg18_l[90]);
    atomicAdd(&ind_arg8[91+map2idx*105],arg18_l[91]);
    atomicAdd(&ind_arg8[92+map2idx*105],arg18_l[92]);
    atomicAdd(&ind_arg8[93+map2idx*105],arg18_l[93]);
    atomicAdd(&ind_arg8[94+map2idx*105],arg18_l[94]);
    atomicAdd(&ind_arg8[95+map2idx*105],arg18_l[95]);
    atomicAdd(&ind_arg8[96+map2idx*105],arg18_l[96]);
    atomicAdd(&ind_arg8[97+map2idx*105],arg18_l[97]);
    atomicAdd(&ind_arg8[98+map2idx*105],arg18_l[98]);
    atomicAdd(&ind_arg8[99+map2idx*105],arg18_l[99]);
    atomicAdd(&ind_arg8[100+map2idx*105],arg18_l[100]);
    atomicAdd(&ind_arg8[101+map2idx*105],arg18_l[101]);
    atomicAdd(&ind_arg8[102+map2idx*105],arg18_l[102]);
    atomicAdd(&ind_arg8[103+map2idx*105],arg18_l[103]);
    atomicAdd(&ind_arg8[104+map2idx*105],arg18_l[104]);
    atomicAdd(&ind_arg9[0+map1idx*105],arg19_l[0]);
    atomicAdd(&ind_arg9[1+map1idx*105],arg19_l[1]);
    atomicAdd(&ind_arg9[2+map1idx*105],arg19_l[2]);
    atomicAdd(&ind_arg9[3+map1idx*105],arg19_l[3]);
    atomicAdd(&ind_arg9[4+map1idx*105],arg19_l[4]);
    atomicAdd(&ind_arg9[5+map1idx*105],arg19_l[5]);
    atomicAdd(&ind_arg9[6+map1idx*105],arg19_l[6]);
    atomicAdd(&ind_arg9[7+map1idx*105],arg19_l[7]);
    atomicAdd(&ind_arg9[8+map1idx*105],arg19_l[8]);
    atomicAdd(&ind_arg9[9+map1idx*105],arg19_l[9]);
    atomicAdd(&ind_arg9[10+map1idx*105],arg19_l[10]);
    atomicAdd(&ind_arg9[11+map1idx*105],arg19_l[11]);
    atomicAdd(&ind_arg9[12+map1idx*105],arg19_l[12]);
    atomicAdd(&ind_arg9[13+map1idx*105],arg19_l[13]);
    atomicAdd(&ind_arg9[14+map1idx*105],arg19_l[14]);
    atomicAdd(&ind_arg9[15+map1idx*105],arg19_l[15]);
    atomicAdd(&ind_arg9[16+map1idx*105],arg19_l[16]);
    atomicAdd(&ind_arg9[17+map1idx*105],arg19_l[17]);
    atomicAdd(&ind_arg9[18+map1idx*105],arg19_l[18]);
    atomicAdd(&ind_arg9[19+map1idx*105],arg19_l[19]);
    atomicAdd(&ind_arg9[20+map1idx*105],arg19_l[20]);
    atomicAdd(&ind_arg9[21+map1idx*105],arg19_l[21]);
    atomicAdd(&ind_arg9[22+map1idx*105],arg19_l[22]);
    atomicAdd(&ind_arg9[23+map1idx*105],arg19_l[23]);
    atomicAdd(&ind_arg9[24+map1idx*105],arg19_l[24]);
    atomicAdd(&ind_arg9[25+map1idx*105],arg19_l[25]);
    atomicAdd(&ind_arg9[26+map1idx*105],arg19_l[26]);
    atomicAdd(&ind_arg9[27+map1idx*105],arg19_l[27]);
    atomicAdd(&ind_arg9[28+map1idx*105],arg19_l[28]);
    atomicAdd(&ind_arg9[29+map1idx*105],arg19_l[29]);
    atomicAdd(&ind_arg9[30+map1idx*105],arg19_l[30]);
    atomicAdd(&ind_arg9[31+map1idx*105],arg19_l[31]);
    atomicAdd(&ind_arg9[32+map1idx*105],arg19_l[32]);
    atomicAdd(&ind_arg9[33+map1idx*105],arg19_l[33]);
    atomicAdd(&ind_arg9[34+map1idx*105],arg19_l[34]);
    atomicAdd(&ind_arg9[35+map1idx*105],arg19_l[35]);
    atomicAdd(&ind_arg9[36+map1idx*105],arg19_l[36]);
    atomicAdd(&ind_arg9[37+map1idx*105],arg19_l[37]);
    atomicAdd(&ind_arg9[38+map1idx*105],arg19_l[38]);
    atomicAdd(&ind_arg9[39+map1idx*105],arg19_l[39]);
    atomicAdd(&ind_arg9[40+map1idx*105],arg19_l[40]);
    atomicAdd(&ind_arg9[41+map1idx*105],arg19_l[41]);
    atomicAdd(&ind_arg9[42+map1idx*105],arg19_l[42]);
    atomicAdd(&ind_arg9[43+map1idx*105],arg19_l[43]);
    atomicAdd(&ind_arg9[44+map1idx*105],arg19_l[44]);
    atomicAdd(&ind_arg9[45+map1idx*105],arg19_l[45]);
    atomicAdd(&ind_arg9[46+map1idx*105],arg19_l[46]);
    atomicAdd(&ind_arg9[47+map1idx*105],arg19_l[47]);
    atomicAdd(&ind_arg9[48+map1idx*105],arg19_l[48]);
    atomicAdd(&ind_arg9[49+map1idx*105],arg19_l[49]);
    atomicAdd(&ind_arg9[50+map1idx*105],arg19_l[50]);
    atomicAdd(&ind_arg9[51+map1idx*105],arg19_l[51]);
    atomicAdd(&ind_arg9[52+map1idx*105],arg19_l[52]);
    atomicAdd(&ind_arg9[53+map1idx*105],arg19_l[53]);
    atomicAdd(&ind_arg9[54+map1idx*105],arg19_l[54]);
    atomicAdd(&ind_arg9[55+map1idx*105],arg19_l[55]);
    atomicAdd(&ind_arg9[56+map1idx*105],arg19_l[56]);
    atomicAdd(&ind_arg9[57+map1idx*105],arg19_l[57]);
    atomicAdd(&ind_arg9[58+map1idx*105],arg19_l[58]);
    atomicAdd(&ind_arg9[59+map1idx*105],arg19_l[59]);
    atomicAdd(&ind_arg9[60+map1idx*105],arg19_l[60]);
    atomicAdd(&ind_arg9[61+map1idx*105],arg19_l[61]);
    atomicAdd(&ind_arg9[62+map1idx*105],arg19_l[62]);
    atomicAdd(&ind_arg9[63+map1idx*105],arg19_l[63]);
    atomicAdd(&ind_arg9[64+map1idx*105],arg19_l[64]);
    atomicAdd(&ind_arg9[65+map1idx*105],arg19_l[65]);
    atomicAdd(&ind_arg9[66+map1idx*105],arg19_l[66]);
    atomicAdd(&ind_arg9[67+map1idx*105],arg19_l[67]);
    atomicAdd(&ind_arg9[68+map1idx*105],arg19_l[68]);
    atomicAdd(&ind_arg9[69+map1idx*105],arg19_l[69]);
    atomicAdd(&ind_arg9[70+map1idx*105],arg19_l[70]);
    atomicAdd(&ind_arg9[71+map1idx*105],arg19_l[71]);
    atomicAdd(&ind_arg9[72+map1idx*105],arg19_l[72]);
    atomicAdd(&ind_arg9[73+map1idx*105],arg19_l[73]);
    atomicAdd(&ind_arg9[74+map1idx*105],arg19_l[74]);
    atomicAdd(&ind_arg9[75+map1idx*105],arg19_l[75]);
    atomicAdd(&ind_arg9[76+map1idx*105],arg19_l[76]);
    atomicAdd(&ind_arg9[77+map1idx*105],arg19_l[77]);
    atomicAdd(&ind_arg9[78+map1idx*105],arg19_l[78]);
    atomicAdd(&ind_arg9[79+map1idx*105],arg19_l[79]);
    atomicAdd(&ind_arg9[80+map1idx*105],arg19_l[80]);
    atomicAdd(&ind_arg9[81+map1idx*105],arg19_l[81]);
    atomicAdd(&ind_arg9[82+map1idx*105],arg19_l[82]);
    atomicAdd(&ind_arg9[83+map1idx*105],arg19_l[83]);
    atomicAdd(&ind_arg9[84+map1idx*105],arg19_l[84]);
    atomicAdd(&ind_arg9[85+map1idx*105],arg19_l[85]);
    atomicAdd(&ind_arg9[86+map1idx*105],arg19_l[86]);
    atomicAdd(&ind_arg9[87+map1idx*105],arg19_l[87]);
    atomicAdd(&ind_arg9[88+map1idx*105],arg19_l[88]);
    atomicAdd(&ind_arg9[89+map1idx*105],arg19_l[89]);
    atomicAdd(&ind_arg9[90+map1idx*105],arg19_l[90]);
    atomicAdd(&ind_arg9[91+map1idx*105],arg19_l[91]);
    atomicAdd(&ind_arg9[92+map1idx*105],arg19_l[92]);
    atomicAdd(&ind_arg9[93+map1idx*105],arg19_l[93]);
    atomicAdd(&ind_arg9[94+map1idx*105],arg19_l[94]);
    atomicAdd(&ind_arg9[95+map1idx*105],arg19_l[95]);
    atomicAdd(&ind_arg9[96+map1idx*105],arg19_l[96]);
    atomicAdd(&ind_arg9[97+map1idx*105],arg19_l[97]);
    atomicAdd(&ind_arg9[98+map1idx*105],arg19_l[98]);
    atomicAdd(&ind_arg9[99+map1idx*105],arg19_l[99]);
    atomicAdd(&ind_arg9[100+map1idx*105],arg19_l[100]);
    atomicAdd(&ind_arg9[101+map1idx*105],arg19_l[101]);
    atomicAdd(&ind_arg9[102+map1idx*105],arg19_l[102]);
    atomicAdd(&ind_arg9[103+map1idx*105],arg19_l[103]);
    atomicAdd(&ind_arg9[104+map1idx*105],arg19_l[104]);
    atomicAdd(&ind_arg9[0+map2idx*105],arg20_l[0]);
    atomicAdd(&ind_arg9[1+map2idx*105],arg20_l[1]);
    atomicAdd(&ind_arg9[2+map2idx*105],arg20_l[2]);
    atomicAdd(&ind_arg9[3+map2idx*105],arg20_l[3]);
    atomicAdd(&ind_arg9[4+map2idx*105],arg20_l[4]);
    atomicAdd(&ind_arg9[5+map2idx*105],arg20_l[5]);
    atomicAdd(&ind_arg9[6+map2idx*105],arg20_l[6]);
    atomicAdd(&ind_arg9[7+map2idx*105],arg20_l[7]);
    atomicAdd(&ind_arg9[8+map2idx*105],arg20_l[8]);
    atomicAdd(&ind_arg9[9+map2idx*105],arg20_l[9]);
    atomicAdd(&ind_arg9[10+map2idx*105],arg20_l[10]);
    atomicAdd(&ind_arg9[11+map2idx*105],arg20_l[11]);
    atomicAdd(&ind_arg9[12+map2idx*105],arg20_l[12]);
    atomicAdd(&ind_arg9[13+map2idx*105],arg20_l[13]);
    atomicAdd(&ind_arg9[14+map2idx*105],arg20_l[14]);
    atomicAdd(&ind_arg9[15+map2idx*105],arg20_l[15]);
    atomicAdd(&ind_arg9[16+map2idx*105],arg20_l[16]);
    atomicAdd(&ind_arg9[17+map2idx*105],arg20_l[17]);
    atomicAdd(&ind_arg9[18+map2idx*105],arg20_l[18]);
    atomicAdd(&ind_arg9[19+map2idx*105],arg20_l[19]);
    atomicAdd(&ind_arg9[20+map2idx*105],arg20_l[20]);
    atomicAdd(&ind_arg9[21+map2idx*105],arg20_l[21]);
    atomicAdd(&ind_arg9[22+map2idx*105],arg20_l[22]);
    atomicAdd(&ind_arg9[23+map2idx*105],arg20_l[23]);
    atomicAdd(&ind_arg9[24+map2idx*105],arg20_l[24]);
    atomicAdd(&ind_arg9[25+map2idx*105],arg20_l[25]);
    atomicAdd(&ind_arg9[26+map2idx*105],arg20_l[26]);
    atomicAdd(&ind_arg9[27+map2idx*105],arg20_l[27]);
    atomicAdd(&ind_arg9[28+map2idx*105],arg20_l[28]);
    atomicAdd(&ind_arg9[29+map2idx*105],arg20_l[29]);
    atomicAdd(&ind_arg9[30+map2idx*105],arg20_l[30]);
    atomicAdd(&ind_arg9[31+map2idx*105],arg20_l[31]);
    atomicAdd(&ind_arg9[32+map2idx*105],arg20_l[32]);
    atomicAdd(&ind_arg9[33+map2idx*105],arg20_l[33]);
    atomicAdd(&ind_arg9[34+map2idx*105],arg20_l[34]);
    atomicAdd(&ind_arg9[35+map2idx*105],arg20_l[35]);
    atomicAdd(&ind_arg9[36+map2idx*105],arg20_l[36]);
    atomicAdd(&ind_arg9[37+map2idx*105],arg20_l[37]);
    atomicAdd(&ind_arg9[38+map2idx*105],arg20_l[38]);
    atomicAdd(&ind_arg9[39+map2idx*105],arg20_l[39]);
    atomicAdd(&ind_arg9[40+map2idx*105],arg20_l[40]);
    atomicAdd(&ind_arg9[41+map2idx*105],arg20_l[41]);
    atomicAdd(&ind_arg9[42+map2idx*105],arg20_l[42]);
    atomicAdd(&ind_arg9[43+map2idx*105],arg20_l[43]);
    atomicAdd(&ind_arg9[44+map2idx*105],arg20_l[44]);
    atomicAdd(&ind_arg9[45+map2idx*105],arg20_l[45]);
    atomicAdd(&ind_arg9[46+map2idx*105],arg20_l[46]);
    atomicAdd(&ind_arg9[47+map2idx*105],arg20_l[47]);
    atomicAdd(&ind_arg9[48+map2idx*105],arg20_l[48]);
    atomicAdd(&ind_arg9[49+map2idx*105],arg20_l[49]);
    atomicAdd(&ind_arg9[50+map2idx*105],arg20_l[50]);
    atomicAdd(&ind_arg9[51+map2idx*105],arg20_l[51]);
    atomicAdd(&ind_arg9[52+map2idx*105],arg20_l[52]);
    atomicAdd(&ind_arg9[53+map2idx*105],arg20_l[53]);
    atomicAdd(&ind_arg9[54+map2idx*105],arg20_l[54]);
    atomicAdd(&ind_arg9[55+map2idx*105],arg20_l[55]);
    atomicAdd(&ind_arg9[56+map2idx*105],arg20_l[56]);
    atomicAdd(&ind_arg9[57+map2idx*105],arg20_l[57]);
    atomicAdd(&ind_arg9[58+map2idx*105],arg20_l[58]);
    atomicAdd(&ind_arg9[59+map2idx*105],arg20_l[59]);
    atomicAdd(&ind_arg9[60+map2idx*105],arg20_l[60]);
    atomicAdd(&ind_arg9[61+map2idx*105],arg20_l[61]);
    atomicAdd(&ind_arg9[62+map2idx*105],arg20_l[62]);
    atomicAdd(&ind_arg9[63+map2idx*105],arg20_l[63]);
    atomicAdd(&ind_arg9[64+map2idx*105],arg20_l[64]);
    atomicAdd(&ind_arg9[65+map2idx*105],arg20_l[65]);
    atomicAdd(&ind_arg9[66+map2idx*105],arg20_l[66]);
    atomicAdd(&ind_arg9[67+map2idx*105],arg20_l[67]);
    atomicAdd(&ind_arg9[68+map2idx*105],arg20_l[68]);
    atomicAdd(&ind_arg9[69+map2idx*105],arg20_l[69]);
    atomicAdd(&ind_arg9[70+map2idx*105],arg20_l[70]);
    atomicAdd(&ind_arg9[71+map2idx*105],arg20_l[71]);
    atomicAdd(&ind_arg9[72+map2idx*105],arg20_l[72]);
    atomicAdd(&ind_arg9[73+map2idx*105],arg20_l[73]);
    atomicAdd(&ind_arg9[74+map2idx*105],arg20_l[74]);
    atomicAdd(&ind_arg9[75+map2idx*105],arg20_l[75]);
    atomicAdd(&ind_arg9[76+map2idx*105],arg20_l[76]);
    atomicAdd(&ind_arg9[77+map2idx*105],arg20_l[77]);
    atomicAdd(&ind_arg9[78+map2idx*105],arg20_l[78]);
    atomicAdd(&ind_arg9[79+map2idx*105],arg20_l[79]);
    atomicAdd(&ind_arg9[80+map2idx*105],arg20_l[80]);
    atomicAdd(&ind_arg9[81+map2idx*105],arg20_l[81]);
    atomicAdd(&ind_arg9[82+map2idx*105],arg20_l[82]);
    atomicAdd(&ind_arg9[83+map2idx*105],arg20_l[83]);
    atomicAdd(&ind_arg9[84+map2idx*105],arg20_l[84]);
    atomicAdd(&ind_arg9[85+map2idx*105],arg20_l[85]);
    atomicAdd(&ind_arg9[86+map2idx*105],arg20_l[86]);
    atomicAdd(&ind_arg9[87+map2idx*105],arg20_l[87]);
    atomicAdd(&ind_arg9[88+map2idx*105],arg20_l[88]);
    atomicAdd(&ind_arg9[89+map2idx*105],arg20_l[89]);
    atomicAdd(&ind_arg9[90+map2idx*105],arg20_l[90]);
    atomicAdd(&ind_arg9[91+map2idx*105],arg20_l[91]);
    atomicAdd(&ind_arg9[92+map2idx*105],arg20_l[92]);
    atomicAdd(&ind_arg9[93+map2idx*105],arg20_l[93]);
    atomicAdd(&ind_arg9[94+map2idx*105],arg20_l[94]);
    atomicAdd(&ind_arg9[95+map2idx*105],arg20_l[95]);
    atomicAdd(&ind_arg9[96+map2idx*105],arg20_l[96]);
    atomicAdd(&ind_arg9[97+map2idx*105],arg20_l[97]);
    atomicAdd(&ind_arg9[98+map2idx*105],arg20_l[98]);
    atomicAdd(&ind_arg9[99+map2idx*105],arg20_l[99]);
    atomicAdd(&ind_arg9[100+map2idx*105],arg20_l[100]);
    atomicAdd(&ind_arg9[101+map2idx*105],arg20_l[101]);
    atomicAdd(&ind_arg9[102+map2idx*105],arg20_l[102]);
    atomicAdd(&ind_arg9[103+map2idx*105],arg20_l[103]);
    atomicAdd(&ind_arg9[104+map2idx*105],arg20_l[104]);
    atomicAdd(&ind_arg10[0+map1idx*105],arg21_l[0]);
    atomicAdd(&ind_arg10[1+map1idx*105],arg21_l[1]);
    atomicAdd(&ind_arg10[2+map1idx*105],arg21_l[2]);
    atomicAdd(&ind_arg10[3+map1idx*105],arg21_l[3]);
    atomicAdd(&ind_arg10[4+map1idx*105],arg21_l[4]);
    atomicAdd(&ind_arg10[5+map1idx*105],arg21_l[5]);
    atomicAdd(&ind_arg10[6+map1idx*105],arg21_l[6]);
    atomicAdd(&ind_arg10[7+map1idx*105],arg21_l[7]);
    atomicAdd(&ind_arg10[8+map1idx*105],arg21_l[8]);
    atomicAdd(&ind_arg10[9+map1idx*105],arg21_l[9]);
    atomicAdd(&ind_arg10[10+map1idx*105],arg21_l[10]);
    atomicAdd(&ind_arg10[11+map1idx*105],arg21_l[11]);
    atomicAdd(&ind_arg10[12+map1idx*105],arg21_l[12]);
    atomicAdd(&ind_arg10[13+map1idx*105],arg21_l[13]);
    atomicAdd(&ind_arg10[14+map1idx*105],arg21_l[14]);
    atomicAdd(&ind_arg10[15+map1idx*105],arg21_l[15]);
    atomicAdd(&ind_arg10[16+map1idx*105],arg21_l[16]);
    atomicAdd(&ind_arg10[17+map1idx*105],arg21_l[17]);
    atomicAdd(&ind_arg10[18+map1idx*105],arg21_l[18]);
    atomicAdd(&ind_arg10[19+map1idx*105],arg21_l[19]);
    atomicAdd(&ind_arg10[20+map1idx*105],arg21_l[20]);
    atomicAdd(&ind_arg10[21+map1idx*105],arg21_l[21]);
    atomicAdd(&ind_arg10[22+map1idx*105],arg21_l[22]);
    atomicAdd(&ind_arg10[23+map1idx*105],arg21_l[23]);
    atomicAdd(&ind_arg10[24+map1idx*105],arg21_l[24]);
    atomicAdd(&ind_arg10[25+map1idx*105],arg21_l[25]);
    atomicAdd(&ind_arg10[26+map1idx*105],arg21_l[26]);
    atomicAdd(&ind_arg10[27+map1idx*105],arg21_l[27]);
    atomicAdd(&ind_arg10[28+map1idx*105],arg21_l[28]);
    atomicAdd(&ind_arg10[29+map1idx*105],arg21_l[29]);
    atomicAdd(&ind_arg10[30+map1idx*105],arg21_l[30]);
    atomicAdd(&ind_arg10[31+map1idx*105],arg21_l[31]);
    atomicAdd(&ind_arg10[32+map1idx*105],arg21_l[32]);
    atomicAdd(&ind_arg10[33+map1idx*105],arg21_l[33]);
    atomicAdd(&ind_arg10[34+map1idx*105],arg21_l[34]);
    atomicAdd(&ind_arg10[35+map1idx*105],arg21_l[35]);
    atomicAdd(&ind_arg10[36+map1idx*105],arg21_l[36]);
    atomicAdd(&ind_arg10[37+map1idx*105],arg21_l[37]);
    atomicAdd(&ind_arg10[38+map1idx*105],arg21_l[38]);
    atomicAdd(&ind_arg10[39+map1idx*105],arg21_l[39]);
    atomicAdd(&ind_arg10[40+map1idx*105],arg21_l[40]);
    atomicAdd(&ind_arg10[41+map1idx*105],arg21_l[41]);
    atomicAdd(&ind_arg10[42+map1idx*105],arg21_l[42]);
    atomicAdd(&ind_arg10[43+map1idx*105],arg21_l[43]);
    atomicAdd(&ind_arg10[44+map1idx*105],arg21_l[44]);
    atomicAdd(&ind_arg10[45+map1idx*105],arg21_l[45]);
    atomicAdd(&ind_arg10[46+map1idx*105],arg21_l[46]);
    atomicAdd(&ind_arg10[47+map1idx*105],arg21_l[47]);
    atomicAdd(&ind_arg10[48+map1idx*105],arg21_l[48]);
    atomicAdd(&ind_arg10[49+map1idx*105],arg21_l[49]);
    atomicAdd(&ind_arg10[50+map1idx*105],arg21_l[50]);
    atomicAdd(&ind_arg10[51+map1idx*105],arg21_l[51]);
    atomicAdd(&ind_arg10[52+map1idx*105],arg21_l[52]);
    atomicAdd(&ind_arg10[53+map1idx*105],arg21_l[53]);
    atomicAdd(&ind_arg10[54+map1idx*105],arg21_l[54]);
    atomicAdd(&ind_arg10[55+map1idx*105],arg21_l[55]);
    atomicAdd(&ind_arg10[56+map1idx*105],arg21_l[56]);
    atomicAdd(&ind_arg10[57+map1idx*105],arg21_l[57]);
    atomicAdd(&ind_arg10[58+map1idx*105],arg21_l[58]);
    atomicAdd(&ind_arg10[59+map1idx*105],arg21_l[59]);
    atomicAdd(&ind_arg10[60+map1idx*105],arg21_l[60]);
    atomicAdd(&ind_arg10[61+map1idx*105],arg21_l[61]);
    atomicAdd(&ind_arg10[62+map1idx*105],arg21_l[62]);
    atomicAdd(&ind_arg10[63+map1idx*105],arg21_l[63]);
    atomicAdd(&ind_arg10[64+map1idx*105],arg21_l[64]);
    atomicAdd(&ind_arg10[65+map1idx*105],arg21_l[65]);
    atomicAdd(&ind_arg10[66+map1idx*105],arg21_l[66]);
    atomicAdd(&ind_arg10[67+map1idx*105],arg21_l[67]);
    atomicAdd(&ind_arg10[68+map1idx*105],arg21_l[68]);
    atomicAdd(&ind_arg10[69+map1idx*105],arg21_l[69]);
    atomicAdd(&ind_arg10[70+map1idx*105],arg21_l[70]);
    atomicAdd(&ind_arg10[71+map1idx*105],arg21_l[71]);
    atomicAdd(&ind_arg10[72+map1idx*105],arg21_l[72]);
    atomicAdd(&ind_arg10[73+map1idx*105],arg21_l[73]);
    atomicAdd(&ind_arg10[74+map1idx*105],arg21_l[74]);
    atomicAdd(&ind_arg10[75+map1idx*105],arg21_l[75]);
    atomicAdd(&ind_arg10[76+map1idx*105],arg21_l[76]);
    atomicAdd(&ind_arg10[77+map1idx*105],arg21_l[77]);
    atomicAdd(&ind_arg10[78+map1idx*105],arg21_l[78]);
    atomicAdd(&ind_arg10[79+map1idx*105],arg21_l[79]);
    atomicAdd(&ind_arg10[80+map1idx*105],arg21_l[80]);
    atomicAdd(&ind_arg10[81+map1idx*105],arg21_l[81]);
    atomicAdd(&ind_arg10[82+map1idx*105],arg21_l[82]);
    atomicAdd(&ind_arg10[83+map1idx*105],arg21_l[83]);
    atomicAdd(&ind_arg10[84+map1idx*105],arg21_l[84]);
    atomicAdd(&ind_arg10[85+map1idx*105],arg21_l[85]);
    atomicAdd(&ind_arg10[86+map1idx*105],arg21_l[86]);
    atomicAdd(&ind_arg10[87+map1idx*105],arg21_l[87]);
    atomicAdd(&ind_arg10[88+map1idx*105],arg21_l[88]);
    atomicAdd(&ind_arg10[89+map1idx*105],arg21_l[89]);
    atomicAdd(&ind_arg10[90+map1idx*105],arg21_l[90]);
    atomicAdd(&ind_arg10[91+map1idx*105],arg21_l[91]);
    atomicAdd(&ind_arg10[92+map1idx*105],arg21_l[92]);
    atomicAdd(&ind_arg10[93+map1idx*105],arg21_l[93]);
    atomicAdd(&ind_arg10[94+map1idx*105],arg21_l[94]);
    atomicAdd(&ind_arg10[95+map1idx*105],arg21_l[95]);
    atomicAdd(&ind_arg10[96+map1idx*105],arg21_l[96]);
    atomicAdd(&ind_arg10[97+map1idx*105],arg21_l[97]);
    atomicAdd(&ind_arg10[98+map1idx*105],arg21_l[98]);
    atomicAdd(&ind_arg10[99+map1idx*105],arg21_l[99]);
    atomicAdd(&ind_arg10[100+map1idx*105],arg21_l[100]);
    atomicAdd(&ind_arg10[101+map1idx*105],arg21_l[101]);
    atomicAdd(&ind_arg10[102+map1idx*105],arg21_l[102]);
    atomicAdd(&ind_arg10[103+map1idx*105],arg21_l[103]);
    atomicAdd(&ind_arg10[104+map1idx*105],arg21_l[104]);
    atomicAdd(&ind_arg10[0+map2idx*105],arg22_l[0]);
    atomicAdd(&ind_arg10[1+map2idx*105],arg22_l[1]);
    atomicAdd(&ind_arg10[2+map2idx*105],arg22_l[2]);
    atomicAdd(&ind_arg10[3+map2idx*105],arg22_l[3]);
    atomicAdd(&ind_arg10[4+map2idx*105],arg22_l[4]);
    atomicAdd(&ind_arg10[5+map2idx*105],arg22_l[5]);
    atomicAdd(&ind_arg10[6+map2idx*105],arg22_l[6]);
    atomicAdd(&ind_arg10[7+map2idx*105],arg22_l[7]);
    atomicAdd(&ind_arg10[8+map2idx*105],arg22_l[8]);
    atomicAdd(&ind_arg10[9+map2idx*105],arg22_l[9]);
    atomicAdd(&ind_arg10[10+map2idx*105],arg22_l[10]);
    atomicAdd(&ind_arg10[11+map2idx*105],arg22_l[11]);
    atomicAdd(&ind_arg10[12+map2idx*105],arg22_l[12]);
    atomicAdd(&ind_arg10[13+map2idx*105],arg22_l[13]);
    atomicAdd(&ind_arg10[14+map2idx*105],arg22_l[14]);
    atomicAdd(&ind_arg10[15+map2idx*105],arg22_l[15]);
    atomicAdd(&ind_arg10[16+map2idx*105],arg22_l[16]);
    atomicAdd(&ind_arg10[17+map2idx*105],arg22_l[17]);
    atomicAdd(&ind_arg10[18+map2idx*105],arg22_l[18]);
    atomicAdd(&ind_arg10[19+map2idx*105],arg22_l[19]);
    atomicAdd(&ind_arg10[20+map2idx*105],arg22_l[20]);
    atomicAdd(&ind_arg10[21+map2idx*105],arg22_l[21]);
    atomicAdd(&ind_arg10[22+map2idx*105],arg22_l[22]);
    atomicAdd(&ind_arg10[23+map2idx*105],arg22_l[23]);
    atomicAdd(&ind_arg10[24+map2idx*105],arg22_l[24]);
    atomicAdd(&ind_arg10[25+map2idx*105],arg22_l[25]);
    atomicAdd(&ind_arg10[26+map2idx*105],arg22_l[26]);
    atomicAdd(&ind_arg10[27+map2idx*105],arg22_l[27]);
    atomicAdd(&ind_arg10[28+map2idx*105],arg22_l[28]);
    atomicAdd(&ind_arg10[29+map2idx*105],arg22_l[29]);
    atomicAdd(&ind_arg10[30+map2idx*105],arg22_l[30]);
    atomicAdd(&ind_arg10[31+map2idx*105],arg22_l[31]);
    atomicAdd(&ind_arg10[32+map2idx*105],arg22_l[32]);
    atomicAdd(&ind_arg10[33+map2idx*105],arg22_l[33]);
    atomicAdd(&ind_arg10[34+map2idx*105],arg22_l[34]);
    atomicAdd(&ind_arg10[35+map2idx*105],arg22_l[35]);
    atomicAdd(&ind_arg10[36+map2idx*105],arg22_l[36]);
    atomicAdd(&ind_arg10[37+map2idx*105],arg22_l[37]);
    atomicAdd(&ind_arg10[38+map2idx*105],arg22_l[38]);
    atomicAdd(&ind_arg10[39+map2idx*105],arg22_l[39]);
    atomicAdd(&ind_arg10[40+map2idx*105],arg22_l[40]);
    atomicAdd(&ind_arg10[41+map2idx*105],arg22_l[41]);
    atomicAdd(&ind_arg10[42+map2idx*105],arg22_l[42]);
    atomicAdd(&ind_arg10[43+map2idx*105],arg22_l[43]);
    atomicAdd(&ind_arg10[44+map2idx*105],arg22_l[44]);
    atomicAdd(&ind_arg10[45+map2idx*105],arg22_l[45]);
    atomicAdd(&ind_arg10[46+map2idx*105],arg22_l[46]);
    atomicAdd(&ind_arg10[47+map2idx*105],arg22_l[47]);
    atomicAdd(&ind_arg10[48+map2idx*105],arg22_l[48]);
    atomicAdd(&ind_arg10[49+map2idx*105],arg22_l[49]);
    atomicAdd(&ind_arg10[50+map2idx*105],arg22_l[50]);
    atomicAdd(&ind_arg10[51+map2idx*105],arg22_l[51]);
    atomicAdd(&ind_arg10[52+map2idx*105],arg22_l[52]);
    atomicAdd(&ind_arg10[53+map2idx*105],arg22_l[53]);
    atomicAdd(&ind_arg10[54+map2idx*105],arg22_l[54]);
    atomicAdd(&ind_arg10[55+map2idx*105],arg22_l[55]);
    atomicAdd(&ind_arg10[56+map2idx*105],arg22_l[56]);
    atomicAdd(&ind_arg10[57+map2idx*105],arg22_l[57]);
    atomicAdd(&ind_arg10[58+map2idx*105],arg22_l[58]);
    atomicAdd(&ind_arg10[59+map2idx*105],arg22_l[59]);
    atomicAdd(&ind_arg10[60+map2idx*105],arg22_l[60]);
    atomicAdd(&ind_arg10[61+map2idx*105],arg22_l[61]);
    atomicAdd(&ind_arg10[62+map2idx*105],arg22_l[62]);
    atomicAdd(&ind_arg10[63+map2idx*105],arg22_l[63]);
    atomicAdd(&ind_arg10[64+map2idx*105],arg22_l[64]);
    atomicAdd(&ind_arg10[65+map2idx*105],arg22_l[65]);
    atomicAdd(&ind_arg10[66+map2idx*105],arg22_l[66]);
    atomicAdd(&ind_arg10[67+map2idx*105],arg22_l[67]);
    atomicAdd(&ind_arg10[68+map2idx*105],arg22_l[68]);
    atomicAdd(&ind_arg10[69+map2idx*105],arg22_l[69]);
    atomicAdd(&ind_arg10[70+map2idx*105],arg22_l[70]);
    atomicAdd(&ind_arg10[71+map2idx*105],arg22_l[71]);
    atomicAdd(&ind_arg10[72+map2idx*105],arg22_l[72]);
    atomicAdd(&ind_arg10[73+map2idx*105],arg22_l[73]);
    atomicAdd(&ind_arg10[74+map2idx*105],arg22_l[74]);
    atomicAdd(&ind_arg10[75+map2idx*105],arg22_l[75]);
    atomicAdd(&ind_arg10[76+map2idx*105],arg22_l[76]);
    atomicAdd(&ind_arg10[77+map2idx*105],arg22_l[77]);
    atomicAdd(&ind_arg10[78+map2idx*105],arg22_l[78]);
    atomicAdd(&ind_arg10[79+map2idx*105],arg22_l[79]);
    atomicAdd(&ind_arg10[80+map2idx*105],arg22_l[80]);
    atomicAdd(&ind_arg10[81+map2idx*105],arg22_l[81]);
    atomicAdd(&ind_arg10[82+map2idx*105],arg22_l[82]);
    atomicAdd(&ind_arg10[83+map2idx*105],arg22_l[83]);
    atomicAdd(&ind_arg10[84+map2idx*105],arg22_l[84]);
    atomicAdd(&ind_arg10[85+map2idx*105],arg22_l[85]);
    atomicAdd(&ind_arg10[86+map2idx*105],arg22_l[86]);
    atomicAdd(&ind_arg10[87+map2idx*105],arg22_l[87]);
    atomicAdd(&ind_arg10[88+map2idx*105],arg22_l[88]);
    atomicAdd(&ind_arg10[89+map2idx*105],arg22_l[89]);
    atomicAdd(&ind_arg10[90+map2idx*105],arg22_l[90]);
    atomicAdd(&ind_arg10[91+map2idx*105],arg22_l[91]);
    atomicAdd(&ind_arg10[92+map2idx*105],arg22_l[92]);
    atomicAdd(&ind_arg10[93+map2idx*105],arg22_l[93]);
    atomicAdd(&ind_arg10[94+map2idx*105],arg22_l[94]);
    atomicAdd(&ind_arg10[95+map2idx*105],arg22_l[95]);
    atomicAdd(&ind_arg10[96+map2idx*105],arg22_l[96]);
    atomicAdd(&ind_arg10[97+map2idx*105],arg22_l[97]);
    atomicAdd(&ind_arg10[98+map2idx*105],arg22_l[98]);
    atomicAdd(&ind_arg10[99+map2idx*105],arg22_l[99]);
    atomicAdd(&ind_arg10[100+map2idx*105],arg22_l[100]);
    atomicAdd(&ind_arg10[101+map2idx*105],arg22_l[101]);
    atomicAdd(&ind_arg10[102+map2idx*105],arg22_l[102]);
    atomicAdd(&ind_arg10[103+map2idx*105],arg22_l[103]);
    atomicAdd(&ind_arg10[104+map2idx*105],arg22_l[104]);
    atomicAdd(&ind_arg11[0+map1idx*105],arg23_l[0]);
    atomicAdd(&ind_arg11[1+map1idx*105],arg23_l[1]);
    atomicAdd(&ind_arg11[2+map1idx*105],arg23_l[2]);
    atomicAdd(&ind_arg11[3+map1idx*105],arg23_l[3]);
    atomicAdd(&ind_arg11[4+map1idx*105],arg23_l[4]);
    atomicAdd(&ind_arg11[5+map1idx*105],arg23_l[5]);
    atomicAdd(&ind_arg11[6+map1idx*105],arg23_l[6]);
    atomicAdd(&ind_arg11[7+map1idx*105],arg23_l[7]);
    atomicAdd(&ind_arg11[8+map1idx*105],arg23_l[8]);
    atomicAdd(&ind_arg11[9+map1idx*105],arg23_l[9]);
    atomicAdd(&ind_arg11[10+map1idx*105],arg23_l[10]);
    atomicAdd(&ind_arg11[11+map1idx*105],arg23_l[11]);
    atomicAdd(&ind_arg11[12+map1idx*105],arg23_l[12]);
    atomicAdd(&ind_arg11[13+map1idx*105],arg23_l[13]);
    atomicAdd(&ind_arg11[14+map1idx*105],arg23_l[14]);
    atomicAdd(&ind_arg11[15+map1idx*105],arg23_l[15]);
    atomicAdd(&ind_arg11[16+map1idx*105],arg23_l[16]);
    atomicAdd(&ind_arg11[17+map1idx*105],arg23_l[17]);
    atomicAdd(&ind_arg11[18+map1idx*105],arg23_l[18]);
    atomicAdd(&ind_arg11[19+map1idx*105],arg23_l[19]);
    atomicAdd(&ind_arg11[20+map1idx*105],arg23_l[20]);
    atomicAdd(&ind_arg11[21+map1idx*105],arg23_l[21]);
    atomicAdd(&ind_arg11[22+map1idx*105],arg23_l[22]);
    atomicAdd(&ind_arg11[23+map1idx*105],arg23_l[23]);
    atomicAdd(&ind_arg11[24+map1idx*105],arg23_l[24]);
    atomicAdd(&ind_arg11[25+map1idx*105],arg23_l[25]);
    atomicAdd(&ind_arg11[26+map1idx*105],arg23_l[26]);
    atomicAdd(&ind_arg11[27+map1idx*105],arg23_l[27]);
    atomicAdd(&ind_arg11[28+map1idx*105],arg23_l[28]);
    atomicAdd(&ind_arg11[29+map1idx*105],arg23_l[29]);
    atomicAdd(&ind_arg11[30+map1idx*105],arg23_l[30]);
    atomicAdd(&ind_arg11[31+map1idx*105],arg23_l[31]);
    atomicAdd(&ind_arg11[32+map1idx*105],arg23_l[32]);
    atomicAdd(&ind_arg11[33+map1idx*105],arg23_l[33]);
    atomicAdd(&ind_arg11[34+map1idx*105],arg23_l[34]);
    atomicAdd(&ind_arg11[35+map1idx*105],arg23_l[35]);
    atomicAdd(&ind_arg11[36+map1idx*105],arg23_l[36]);
    atomicAdd(&ind_arg11[37+map1idx*105],arg23_l[37]);
    atomicAdd(&ind_arg11[38+map1idx*105],arg23_l[38]);
    atomicAdd(&ind_arg11[39+map1idx*105],arg23_l[39]);
    atomicAdd(&ind_arg11[40+map1idx*105],arg23_l[40]);
    atomicAdd(&ind_arg11[41+map1idx*105],arg23_l[41]);
    atomicAdd(&ind_arg11[42+map1idx*105],arg23_l[42]);
    atomicAdd(&ind_arg11[43+map1idx*105],arg23_l[43]);
    atomicAdd(&ind_arg11[44+map1idx*105],arg23_l[44]);
    atomicAdd(&ind_arg11[45+map1idx*105],arg23_l[45]);
    atomicAdd(&ind_arg11[46+map1idx*105],arg23_l[46]);
    atomicAdd(&ind_arg11[47+map1idx*105],arg23_l[47]);
    atomicAdd(&ind_arg11[48+map1idx*105],arg23_l[48]);
    atomicAdd(&ind_arg11[49+map1idx*105],arg23_l[49]);
    atomicAdd(&ind_arg11[50+map1idx*105],arg23_l[50]);
    atomicAdd(&ind_arg11[51+map1idx*105],arg23_l[51]);
    atomicAdd(&ind_arg11[52+map1idx*105],arg23_l[52]);
    atomicAdd(&ind_arg11[53+map1idx*105],arg23_l[53]);
    atomicAdd(&ind_arg11[54+map1idx*105],arg23_l[54]);
    atomicAdd(&ind_arg11[55+map1idx*105],arg23_l[55]);
    atomicAdd(&ind_arg11[56+map1idx*105],arg23_l[56]);
    atomicAdd(&ind_arg11[57+map1idx*105],arg23_l[57]);
    atomicAdd(&ind_arg11[58+map1idx*105],arg23_l[58]);
    atomicAdd(&ind_arg11[59+map1idx*105],arg23_l[59]);
    atomicAdd(&ind_arg11[60+map1idx*105],arg23_l[60]);
    atomicAdd(&ind_arg11[61+map1idx*105],arg23_l[61]);
    atomicAdd(&ind_arg11[62+map1idx*105],arg23_l[62]);
    atomicAdd(&ind_arg11[63+map1idx*105],arg23_l[63]);
    atomicAdd(&ind_arg11[64+map1idx*105],arg23_l[64]);
    atomicAdd(&ind_arg11[65+map1idx*105],arg23_l[65]);
    atomicAdd(&ind_arg11[66+map1idx*105],arg23_l[66]);
    atomicAdd(&ind_arg11[67+map1idx*105],arg23_l[67]);
    atomicAdd(&ind_arg11[68+map1idx*105],arg23_l[68]);
    atomicAdd(&ind_arg11[69+map1idx*105],arg23_l[69]);
    atomicAdd(&ind_arg11[70+map1idx*105],arg23_l[70]);
    atomicAdd(&ind_arg11[71+map1idx*105],arg23_l[71]);
    atomicAdd(&ind_arg11[72+map1idx*105],arg23_l[72]);
    atomicAdd(&ind_arg11[73+map1idx*105],arg23_l[73]);
    atomicAdd(&ind_arg11[74+map1idx*105],arg23_l[74]);
    atomicAdd(&ind_arg11[75+map1idx*105],arg23_l[75]);
    atomicAdd(&ind_arg11[76+map1idx*105],arg23_l[76]);
    atomicAdd(&ind_arg11[77+map1idx*105],arg23_l[77]);
    atomicAdd(&ind_arg11[78+map1idx*105],arg23_l[78]);
    atomicAdd(&ind_arg11[79+map1idx*105],arg23_l[79]);
    atomicAdd(&ind_arg11[80+map1idx*105],arg23_l[80]);
    atomicAdd(&ind_arg11[81+map1idx*105],arg23_l[81]);
    atomicAdd(&ind_arg11[82+map1idx*105],arg23_l[82]);
    atomicAdd(&ind_arg11[83+map1idx*105],arg23_l[83]);
    atomicAdd(&ind_arg11[84+map1idx*105],arg23_l[84]);
    atomicAdd(&ind_arg11[85+map1idx*105],arg23_l[85]);
    atomicAdd(&ind_arg11[86+map1idx*105],arg23_l[86]);
    atomicAdd(&ind_arg11[87+map1idx*105],arg23_l[87]);
    atomicAdd(&ind_arg11[88+map1idx*105],arg23_l[88]);
    atomicAdd(&ind_arg11[89+map1idx*105],arg23_l[89]);
    atomicAdd(&ind_arg11[90+map1idx*105],arg23_l[90]);
    atomicAdd(&ind_arg11[91+map1idx*105],arg23_l[91]);
    atomicAdd(&ind_arg11[92+map1idx*105],arg23_l[92]);
    atomicAdd(&ind_arg11[93+map1idx*105],arg23_l[93]);
    atomicAdd(&ind_arg11[94+map1idx*105],arg23_l[94]);
    atomicAdd(&ind_arg11[95+map1idx*105],arg23_l[95]);
    atomicAdd(&ind_arg11[96+map1idx*105],arg23_l[96]);
    atomicAdd(&ind_arg11[97+map1idx*105],arg23_l[97]);
    atomicAdd(&ind_arg11[98+map1idx*105],arg23_l[98]);
    atomicAdd(&ind_arg11[99+map1idx*105],arg23_l[99]);
    atomicAdd(&ind_arg11[100+map1idx*105],arg23_l[100]);
    atomicAdd(&ind_arg11[101+map1idx*105],arg23_l[101]);
    atomicAdd(&ind_arg11[102+map1idx*105],arg23_l[102]);
    atomicAdd(&ind_arg11[103+map1idx*105],arg23_l[103]);
    atomicAdd(&ind_arg11[104+map1idx*105],arg23_l[104]);
    atomicAdd(&ind_arg11[0+map2idx*105],arg24_l[0]);
    atomicAdd(&ind_arg11[1+map2idx*105],arg24_l[1]);
    atomicAdd(&ind_arg11[2+map2idx*105],arg24_l[2]);
    atomicAdd(&ind_arg11[3+map2idx*105],arg24_l[3]);
    atomicAdd(&ind_arg11[4+map2idx*105],arg24_l[4]);
    atomicAdd(&ind_arg11[5+map2idx*105],arg24_l[5]);
    atomicAdd(&ind_arg11[6+map2idx*105],arg24_l[6]);
    atomicAdd(&ind_arg11[7+map2idx*105],arg24_l[7]);
    atomicAdd(&ind_arg11[8+map2idx*105],arg24_l[8]);
    atomicAdd(&ind_arg11[9+map2idx*105],arg24_l[9]);
    atomicAdd(&ind_arg11[10+map2idx*105],arg24_l[10]);
    atomicAdd(&ind_arg11[11+map2idx*105],arg24_l[11]);
    atomicAdd(&ind_arg11[12+map2idx*105],arg24_l[12]);
    atomicAdd(&ind_arg11[13+map2idx*105],arg24_l[13]);
    atomicAdd(&ind_arg11[14+map2idx*105],arg24_l[14]);
    atomicAdd(&ind_arg11[15+map2idx*105],arg24_l[15]);
    atomicAdd(&ind_arg11[16+map2idx*105],arg24_l[16]);
    atomicAdd(&ind_arg11[17+map2idx*105],arg24_l[17]);
    atomicAdd(&ind_arg11[18+map2idx*105],arg24_l[18]);
    atomicAdd(&ind_arg11[19+map2idx*105],arg24_l[19]);
    atomicAdd(&ind_arg11[20+map2idx*105],arg24_l[20]);
    atomicAdd(&ind_arg11[21+map2idx*105],arg24_l[21]);
    atomicAdd(&ind_arg11[22+map2idx*105],arg24_l[22]);
    atomicAdd(&ind_arg11[23+map2idx*105],arg24_l[23]);
    atomicAdd(&ind_arg11[24+map2idx*105],arg24_l[24]);
    atomicAdd(&ind_arg11[25+map2idx*105],arg24_l[25]);
    atomicAdd(&ind_arg11[26+map2idx*105],arg24_l[26]);
    atomicAdd(&ind_arg11[27+map2idx*105],arg24_l[27]);
    atomicAdd(&ind_arg11[28+map2idx*105],arg24_l[28]);
    atomicAdd(&ind_arg11[29+map2idx*105],arg24_l[29]);
    atomicAdd(&ind_arg11[30+map2idx*105],arg24_l[30]);
    atomicAdd(&ind_arg11[31+map2idx*105],arg24_l[31]);
    atomicAdd(&ind_arg11[32+map2idx*105],arg24_l[32]);
    atomicAdd(&ind_arg11[33+map2idx*105],arg24_l[33]);
    atomicAdd(&ind_arg11[34+map2idx*105],arg24_l[34]);
    atomicAdd(&ind_arg11[35+map2idx*105],arg24_l[35]);
    atomicAdd(&ind_arg11[36+map2idx*105],arg24_l[36]);
    atomicAdd(&ind_arg11[37+map2idx*105],arg24_l[37]);
    atomicAdd(&ind_arg11[38+map2idx*105],arg24_l[38]);
    atomicAdd(&ind_arg11[39+map2idx*105],arg24_l[39]);
    atomicAdd(&ind_arg11[40+map2idx*105],arg24_l[40]);
    atomicAdd(&ind_arg11[41+map2idx*105],arg24_l[41]);
    atomicAdd(&ind_arg11[42+map2idx*105],arg24_l[42]);
    atomicAdd(&ind_arg11[43+map2idx*105],arg24_l[43]);
    atomicAdd(&ind_arg11[44+map2idx*105],arg24_l[44]);
    atomicAdd(&ind_arg11[45+map2idx*105],arg24_l[45]);
    atomicAdd(&ind_arg11[46+map2idx*105],arg24_l[46]);
    atomicAdd(&ind_arg11[47+map2idx*105],arg24_l[47]);
    atomicAdd(&ind_arg11[48+map2idx*105],arg24_l[48]);
    atomicAdd(&ind_arg11[49+map2idx*105],arg24_l[49]);
    atomicAdd(&ind_arg11[50+map2idx*105],arg24_l[50]);
    atomicAdd(&ind_arg11[51+map2idx*105],arg24_l[51]);
    atomicAdd(&ind_arg11[52+map2idx*105],arg24_l[52]);
    atomicAdd(&ind_arg11[53+map2idx*105],arg24_l[53]);
    atomicAdd(&ind_arg11[54+map2idx*105],arg24_l[54]);
    atomicAdd(&ind_arg11[55+map2idx*105],arg24_l[55]);
    atomicAdd(&ind_arg11[56+map2idx*105],arg24_l[56]);
    atomicAdd(&ind_arg11[57+map2idx*105],arg24_l[57]);
    atomicAdd(&ind_arg11[58+map2idx*105],arg24_l[58]);
    atomicAdd(&ind_arg11[59+map2idx*105],arg24_l[59]);
    atomicAdd(&ind_arg11[60+map2idx*105],arg24_l[60]);
    atomicAdd(&ind_arg11[61+map2idx*105],arg24_l[61]);
    atomicAdd(&ind_arg11[62+map2idx*105],arg24_l[62]);
    atomicAdd(&ind_arg11[63+map2idx*105],arg24_l[63]);
    atomicAdd(&ind_arg11[64+map2idx*105],arg24_l[64]);
    atomicAdd(&ind_arg11[65+map2idx*105],arg24_l[65]);
    atomicAdd(&ind_arg11[66+map2idx*105],arg24_l[66]);
    atomicAdd(&ind_arg11[67+map2idx*105],arg24_l[67]);
    atomicAdd(&ind_arg11[68+map2idx*105],arg24_l[68]);
    atomicAdd(&ind_arg11[69+map2idx*105],arg24_l[69]);
    atomicAdd(&ind_arg11[70+map2idx*105],arg24_l[70]);
    atomicAdd(&ind_arg11[71+map2idx*105],arg24_l[71]);
    atomicAdd(&ind_arg11[72+map2idx*105],arg24_l[72]);
    atomicAdd(&ind_arg11[73+map2idx*105],arg24_l[73]);
    atomicAdd(&ind_arg11[74+map2idx*105],arg24_l[74]);
    atomicAdd(&ind_arg11[75+map2idx*105],arg24_l[75]);
    atomicAdd(&ind_arg11[76+map2idx*105],arg24_l[76]);
    atomicAdd(&ind_arg11[77+map2idx*105],arg24_l[77]);
    atomicAdd(&ind_arg11[78+map2idx*105],arg24_l[78]);
    atomicAdd(&ind_arg11[79+map2idx*105],arg24_l[79]);
    atomicAdd(&ind_arg11[80+map2idx*105],arg24_l[80]);
    atomicAdd(&ind_arg11[81+map2idx*105],arg24_l[81]);
    atomicAdd(&ind_arg11[82+map2idx*105],arg24_l[82]);
    atomicAdd(&ind_arg11[83+map2idx*105],arg24_l[83]);
    atomicAdd(&ind_arg11[84+map2idx*105],arg24_l[84]);
    atomicAdd(&ind_arg11[85+map2idx*105],arg24_l[85]);
    atomicAdd(&ind_arg11[86+map2idx*105],arg24_l[86]);
    atomicAdd(&ind_arg11[87+map2idx*105],arg24_l[87]);
    atomicAdd(&ind_arg11[88+map2idx*105],arg24_l[88]);
    atomicAdd(&ind_arg11[89+map2idx*105],arg24_l[89]);
    atomicAdd(&ind_arg11[90+map2idx*105],arg24_l[90]);
    atomicAdd(&ind_arg11[91+map2idx*105],arg24_l[91]);
    atomicAdd(&ind_arg11[92+map2idx*105],arg24_l[92]);
    atomicAdd(&ind_arg11[93+map2idx*105],arg24_l[93]);
    atomicAdd(&ind_arg11[94+map2idx*105],arg24_l[94]);
    atomicAdd(&ind_arg11[95+map2idx*105],arg24_l[95]);
    atomicAdd(&ind_arg11[96+map2idx*105],arg24_l[96]);
    atomicAdd(&ind_arg11[97+map2idx*105],arg24_l[97]);
    atomicAdd(&ind_arg11[98+map2idx*105],arg24_l[98]);
    atomicAdd(&ind_arg11[99+map2idx*105],arg24_l[99]);
    atomicAdd(&ind_arg11[100+map2idx*105],arg24_l[100]);
    atomicAdd(&ind_arg11[101+map2idx*105],arg24_l[101]);
    atomicAdd(&ind_arg11[102+map2idx*105],arg24_l[102]);
    atomicAdd(&ind_arg11[103+map2idx*105],arg24_l[103]);
    atomicAdd(&ind_arg11[104+map2idx*105],arg24_l[104]);
    atomicAdd(&ind_arg12[0+map1idx*105],arg25_l[0]);
    atomicAdd(&ind_arg12[1+map1idx*105],arg25_l[1]);
    atomicAdd(&ind_arg12[2+map1idx*105],arg25_l[2]);
    atomicAdd(&ind_arg12[3+map1idx*105],arg25_l[3]);
    atomicAdd(&ind_arg12[4+map1idx*105],arg25_l[4]);
    atomicAdd(&ind_arg12[5+map1idx*105],arg25_l[5]);
    atomicAdd(&ind_arg12[6+map1idx*105],arg25_l[6]);
    atomicAdd(&ind_arg12[7+map1idx*105],arg25_l[7]);
    atomicAdd(&ind_arg12[8+map1idx*105],arg25_l[8]);
    atomicAdd(&ind_arg12[9+map1idx*105],arg25_l[9]);
    atomicAdd(&ind_arg12[10+map1idx*105],arg25_l[10]);
    atomicAdd(&ind_arg12[11+map1idx*105],arg25_l[11]);
    atomicAdd(&ind_arg12[12+map1idx*105],arg25_l[12]);
    atomicAdd(&ind_arg12[13+map1idx*105],arg25_l[13]);
    atomicAdd(&ind_arg12[14+map1idx*105],arg25_l[14]);
    atomicAdd(&ind_arg12[15+map1idx*105],arg25_l[15]);
    atomicAdd(&ind_arg12[16+map1idx*105],arg25_l[16]);
    atomicAdd(&ind_arg12[17+map1idx*105],arg25_l[17]);
    atomicAdd(&ind_arg12[18+map1idx*105],arg25_l[18]);
    atomicAdd(&ind_arg12[19+map1idx*105],arg25_l[19]);
    atomicAdd(&ind_arg12[20+map1idx*105],arg25_l[20]);
    atomicAdd(&ind_arg12[21+map1idx*105],arg25_l[21]);
    atomicAdd(&ind_arg12[22+map1idx*105],arg25_l[22]);
    atomicAdd(&ind_arg12[23+map1idx*105],arg25_l[23]);
    atomicAdd(&ind_arg12[24+map1idx*105],arg25_l[24]);
    atomicAdd(&ind_arg12[25+map1idx*105],arg25_l[25]);
    atomicAdd(&ind_arg12[26+map1idx*105],arg25_l[26]);
    atomicAdd(&ind_arg12[27+map1idx*105],arg25_l[27]);
    atomicAdd(&ind_arg12[28+map1idx*105],arg25_l[28]);
    atomicAdd(&ind_arg12[29+map1idx*105],arg25_l[29]);
    atomicAdd(&ind_arg12[30+map1idx*105],arg25_l[30]);
    atomicAdd(&ind_arg12[31+map1idx*105],arg25_l[31]);
    atomicAdd(&ind_arg12[32+map1idx*105],arg25_l[32]);
    atomicAdd(&ind_arg12[33+map1idx*105],arg25_l[33]);
    atomicAdd(&ind_arg12[34+map1idx*105],arg25_l[34]);
    atomicAdd(&ind_arg12[35+map1idx*105],arg25_l[35]);
    atomicAdd(&ind_arg12[36+map1idx*105],arg25_l[36]);
    atomicAdd(&ind_arg12[37+map1idx*105],arg25_l[37]);
    atomicAdd(&ind_arg12[38+map1idx*105],arg25_l[38]);
    atomicAdd(&ind_arg12[39+map1idx*105],arg25_l[39]);
    atomicAdd(&ind_arg12[40+map1idx*105],arg25_l[40]);
    atomicAdd(&ind_arg12[41+map1idx*105],arg25_l[41]);
    atomicAdd(&ind_arg12[42+map1idx*105],arg25_l[42]);
    atomicAdd(&ind_arg12[43+map1idx*105],arg25_l[43]);
    atomicAdd(&ind_arg12[44+map1idx*105],arg25_l[44]);
    atomicAdd(&ind_arg12[45+map1idx*105],arg25_l[45]);
    atomicAdd(&ind_arg12[46+map1idx*105],arg25_l[46]);
    atomicAdd(&ind_arg12[47+map1idx*105],arg25_l[47]);
    atomicAdd(&ind_arg12[48+map1idx*105],arg25_l[48]);
    atomicAdd(&ind_arg12[49+map1idx*105],arg25_l[49]);
    atomicAdd(&ind_arg12[50+map1idx*105],arg25_l[50]);
    atomicAdd(&ind_arg12[51+map1idx*105],arg25_l[51]);
    atomicAdd(&ind_arg12[52+map1idx*105],arg25_l[52]);
    atomicAdd(&ind_arg12[53+map1idx*105],arg25_l[53]);
    atomicAdd(&ind_arg12[54+map1idx*105],arg25_l[54]);
    atomicAdd(&ind_arg12[55+map1idx*105],arg25_l[55]);
    atomicAdd(&ind_arg12[56+map1idx*105],arg25_l[56]);
    atomicAdd(&ind_arg12[57+map1idx*105],arg25_l[57]);
    atomicAdd(&ind_arg12[58+map1idx*105],arg25_l[58]);
    atomicAdd(&ind_arg12[59+map1idx*105],arg25_l[59]);
    atomicAdd(&ind_arg12[60+map1idx*105],arg25_l[60]);
    atomicAdd(&ind_arg12[61+map1idx*105],arg25_l[61]);
    atomicAdd(&ind_arg12[62+map1idx*105],arg25_l[62]);
    atomicAdd(&ind_arg12[63+map1idx*105],arg25_l[63]);
    atomicAdd(&ind_arg12[64+map1idx*105],arg25_l[64]);
    atomicAdd(&ind_arg12[65+map1idx*105],arg25_l[65]);
    atomicAdd(&ind_arg12[66+map1idx*105],arg25_l[66]);
    atomicAdd(&ind_arg12[67+map1idx*105],arg25_l[67]);
    atomicAdd(&ind_arg12[68+map1idx*105],arg25_l[68]);
    atomicAdd(&ind_arg12[69+map1idx*105],arg25_l[69]);
    atomicAdd(&ind_arg12[70+map1idx*105],arg25_l[70]);
    atomicAdd(&ind_arg12[71+map1idx*105],arg25_l[71]);
    atomicAdd(&ind_arg12[72+map1idx*105],arg25_l[72]);
    atomicAdd(&ind_arg12[73+map1idx*105],arg25_l[73]);
    atomicAdd(&ind_arg12[74+map1idx*105],arg25_l[74]);
    atomicAdd(&ind_arg12[75+map1idx*105],arg25_l[75]);
    atomicAdd(&ind_arg12[76+map1idx*105],arg25_l[76]);
    atomicAdd(&ind_arg12[77+map1idx*105],arg25_l[77]);
    atomicAdd(&ind_arg12[78+map1idx*105],arg25_l[78]);
    atomicAdd(&ind_arg12[79+map1idx*105],arg25_l[79]);
    atomicAdd(&ind_arg12[80+map1idx*105],arg25_l[80]);
    atomicAdd(&ind_arg12[81+map1idx*105],arg25_l[81]);
    atomicAdd(&ind_arg12[82+map1idx*105],arg25_l[82]);
    atomicAdd(&ind_arg12[83+map1idx*105],arg25_l[83]);
    atomicAdd(&ind_arg12[84+map1idx*105],arg25_l[84]);
    atomicAdd(&ind_arg12[85+map1idx*105],arg25_l[85]);
    atomicAdd(&ind_arg12[86+map1idx*105],arg25_l[86]);
    atomicAdd(&ind_arg12[87+map1idx*105],arg25_l[87]);
    atomicAdd(&ind_arg12[88+map1idx*105],arg25_l[88]);
    atomicAdd(&ind_arg12[89+map1idx*105],arg25_l[89]);
    atomicAdd(&ind_arg12[90+map1idx*105],arg25_l[90]);
    atomicAdd(&ind_arg12[91+map1idx*105],arg25_l[91]);
    atomicAdd(&ind_arg12[92+map1idx*105],arg25_l[92]);
    atomicAdd(&ind_arg12[93+map1idx*105],arg25_l[93]);
    atomicAdd(&ind_arg12[94+map1idx*105],arg25_l[94]);
    atomicAdd(&ind_arg12[95+map1idx*105],arg25_l[95]);
    atomicAdd(&ind_arg12[96+map1idx*105],arg25_l[96]);
    atomicAdd(&ind_arg12[97+map1idx*105],arg25_l[97]);
    atomicAdd(&ind_arg12[98+map1idx*105],arg25_l[98]);
    atomicAdd(&ind_arg12[99+map1idx*105],arg25_l[99]);
    atomicAdd(&ind_arg12[100+map1idx*105],arg25_l[100]);
    atomicAdd(&ind_arg12[101+map1idx*105],arg25_l[101]);
    atomicAdd(&ind_arg12[102+map1idx*105],arg25_l[102]);
    atomicAdd(&ind_arg12[103+map1idx*105],arg25_l[103]);
    atomicAdd(&ind_arg12[104+map1idx*105],arg25_l[104]);
    atomicAdd(&ind_arg12[0+map2idx*105],arg26_l[0]);
    atomicAdd(&ind_arg12[1+map2idx*105],arg26_l[1]);
    atomicAdd(&ind_arg12[2+map2idx*105],arg26_l[2]);
    atomicAdd(&ind_arg12[3+map2idx*105],arg26_l[3]);
    atomicAdd(&ind_arg12[4+map2idx*105],arg26_l[4]);
    atomicAdd(&ind_arg12[5+map2idx*105],arg26_l[5]);
    atomicAdd(&ind_arg12[6+map2idx*105],arg26_l[6]);
    atomicAdd(&ind_arg12[7+map2idx*105],arg26_l[7]);
    atomicAdd(&ind_arg12[8+map2idx*105],arg26_l[8]);
    atomicAdd(&ind_arg12[9+map2idx*105],arg26_l[9]);
    atomicAdd(&ind_arg12[10+map2idx*105],arg26_l[10]);
    atomicAdd(&ind_arg12[11+map2idx*105],arg26_l[11]);
    atomicAdd(&ind_arg12[12+map2idx*105],arg26_l[12]);
    atomicAdd(&ind_arg12[13+map2idx*105],arg26_l[13]);
    atomicAdd(&ind_arg12[14+map2idx*105],arg26_l[14]);
    atomicAdd(&ind_arg12[15+map2idx*105],arg26_l[15]);
    atomicAdd(&ind_arg12[16+map2idx*105],arg26_l[16]);
    atomicAdd(&ind_arg12[17+map2idx*105],arg26_l[17]);
    atomicAdd(&ind_arg12[18+map2idx*105],arg26_l[18]);
    atomicAdd(&ind_arg12[19+map2idx*105],arg26_l[19]);
    atomicAdd(&ind_arg12[20+map2idx*105],arg26_l[20]);
    atomicAdd(&ind_arg12[21+map2idx*105],arg26_l[21]);
    atomicAdd(&ind_arg12[22+map2idx*105],arg26_l[22]);
    atomicAdd(&ind_arg12[23+map2idx*105],arg26_l[23]);
    atomicAdd(&ind_arg12[24+map2idx*105],arg26_l[24]);
    atomicAdd(&ind_arg12[25+map2idx*105],arg26_l[25]);
    atomicAdd(&ind_arg12[26+map2idx*105],arg26_l[26]);
    atomicAdd(&ind_arg12[27+map2idx*105],arg26_l[27]);
    atomicAdd(&ind_arg12[28+map2idx*105],arg26_l[28]);
    atomicAdd(&ind_arg12[29+map2idx*105],arg26_l[29]);
    atomicAdd(&ind_arg12[30+map2idx*105],arg26_l[30]);
    atomicAdd(&ind_arg12[31+map2idx*105],arg26_l[31]);
    atomicAdd(&ind_arg12[32+map2idx*105],arg26_l[32]);
    atomicAdd(&ind_arg12[33+map2idx*105],arg26_l[33]);
    atomicAdd(&ind_arg12[34+map2idx*105],arg26_l[34]);
    atomicAdd(&ind_arg12[35+map2idx*105],arg26_l[35]);
    atomicAdd(&ind_arg12[36+map2idx*105],arg26_l[36]);
    atomicAdd(&ind_arg12[37+map2idx*105],arg26_l[37]);
    atomicAdd(&ind_arg12[38+map2idx*105],arg26_l[38]);
    atomicAdd(&ind_arg12[39+map2idx*105],arg26_l[39]);
    atomicAdd(&ind_arg12[40+map2idx*105],arg26_l[40]);
    atomicAdd(&ind_arg12[41+map2idx*105],arg26_l[41]);
    atomicAdd(&ind_arg12[42+map2idx*105],arg26_l[42]);
    atomicAdd(&ind_arg12[43+map2idx*105],arg26_l[43]);
    atomicAdd(&ind_arg12[44+map2idx*105],arg26_l[44]);
    atomicAdd(&ind_arg12[45+map2idx*105],arg26_l[45]);
    atomicAdd(&ind_arg12[46+map2idx*105],arg26_l[46]);
    atomicAdd(&ind_arg12[47+map2idx*105],arg26_l[47]);
    atomicAdd(&ind_arg12[48+map2idx*105],arg26_l[48]);
    atomicAdd(&ind_arg12[49+map2idx*105],arg26_l[49]);
    atomicAdd(&ind_arg12[50+map2idx*105],arg26_l[50]);
    atomicAdd(&ind_arg12[51+map2idx*105],arg26_l[51]);
    atomicAdd(&ind_arg12[52+map2idx*105],arg26_l[52]);
    atomicAdd(&ind_arg12[53+map2idx*105],arg26_l[53]);
    atomicAdd(&ind_arg12[54+map2idx*105],arg26_l[54]);
    atomicAdd(&ind_arg12[55+map2idx*105],arg26_l[55]);
    atomicAdd(&ind_arg12[56+map2idx*105],arg26_l[56]);
    atomicAdd(&ind_arg12[57+map2idx*105],arg26_l[57]);
    atomicAdd(&ind_arg12[58+map2idx*105],arg26_l[58]);
    atomicAdd(&ind_arg12[59+map2idx*105],arg26_l[59]);
    atomicAdd(&ind_arg12[60+map2idx*105],arg26_l[60]);
    atomicAdd(&ind_arg12[61+map2idx*105],arg26_l[61]);
    atomicAdd(&ind_arg12[62+map2idx*105],arg26_l[62]);
    atomicAdd(&ind_arg12[63+map2idx*105],arg26_l[63]);
    atomicAdd(&ind_arg12[64+map2idx*105],arg26_l[64]);
    atomicAdd(&ind_arg12[65+map2idx*105],arg26_l[65]);
    atomicAdd(&ind_arg12[66+map2idx*105],arg26_l[66]);
    atomicAdd(&ind_arg12[67+map2idx*105],arg26_l[67]);
    atomicAdd(&ind_arg12[68+map2idx*105],arg26_l[68]);
    atomicAdd(&ind_arg12[69+map2idx*105],arg26_l[69]);
    atomicAdd(&ind_arg12[70+map2idx*105],arg26_l[70]);
    atomicAdd(&ind_arg12[71+map2idx*105],arg26_l[71]);
    atomicAdd(&ind_arg12[72+map2idx*105],arg26_l[72]);
    atomicAdd(&ind_arg12[73+map2idx*105],arg26_l[73]);
    atomicAdd(&ind_arg12[74+map2idx*105],arg26_l[74]);
    atomicAdd(&ind_arg12[75+map2idx*105],arg26_l[75]);
    atomicAdd(&ind_arg12[76+map2idx*105],arg26_l[76]);
    atomicAdd(&ind_arg12[77+map2idx*105],arg26_l[77]);
    atomicAdd(&ind_arg12[78+map2idx*105],arg26_l[78]);
    atomicAdd(&ind_arg12[79+map2idx*105],arg26_l[79]);
    atomicAdd(&ind_arg12[80+map2idx*105],arg26_l[80]);
    atomicAdd(&ind_arg12[81+map2idx*105],arg26_l[81]);
    atomicAdd(&ind_arg12[82+map2idx*105],arg26_l[82]);
    atomicAdd(&ind_arg12[83+map2idx*105],arg26_l[83]);
    atomicAdd(&ind_arg12[84+map2idx*105],arg26_l[84]);
    atomicAdd(&ind_arg12[85+map2idx*105],arg26_l[85]);
    atomicAdd(&ind_arg12[86+map2idx*105],arg26_l[86]);
    atomicAdd(&ind_arg12[87+map2idx*105],arg26_l[87]);
    atomicAdd(&ind_arg12[88+map2idx*105],arg26_l[88]);
    atomicAdd(&ind_arg12[89+map2idx*105],arg26_l[89]);
    atomicAdd(&ind_arg12[90+map2idx*105],arg26_l[90]);
    atomicAdd(&ind_arg12[91+map2idx*105],arg26_l[91]);
    atomicAdd(&ind_arg12[92+map2idx*105],arg26_l[92]);
    atomicAdd(&ind_arg12[93+map2idx*105],arg26_l[93]);
    atomicAdd(&ind_arg12[94+map2idx*105],arg26_l[94]);
    atomicAdd(&ind_arg12[95+map2idx*105],arg26_l[95]);
    atomicAdd(&ind_arg12[96+map2idx*105],arg26_l[96]);
    atomicAdd(&ind_arg12[97+map2idx*105],arg26_l[97]);
    atomicAdd(&ind_arg12[98+map2idx*105],arg26_l[98]);
    atomicAdd(&ind_arg12[99+map2idx*105],arg26_l[99]);
    atomicAdd(&ind_arg12[100+map2idx*105],arg26_l[100]);
    atomicAdd(&ind_arg12[101+map2idx*105],arg26_l[101]);
    atomicAdd(&ind_arg12[102+map2idx*105],arg26_l[102]);
    atomicAdd(&ind_arg12[103+map2idx*105],arg26_l[103]);
    atomicAdd(&ind_arg12[104+map2idx*105],arg26_l[104]);
    atomicAdd(&ind_arg13[0+map1idx*105],arg27_l[0]);
    atomicAdd(&ind_arg13[1+map1idx*105],arg27_l[1]);
    atomicAdd(&ind_arg13[2+map1idx*105],arg27_l[2]);
    atomicAdd(&ind_arg13[3+map1idx*105],arg27_l[3]);
    atomicAdd(&ind_arg13[4+map1idx*105],arg27_l[4]);
    atomicAdd(&ind_arg13[5+map1idx*105],arg27_l[5]);
    atomicAdd(&ind_arg13[6+map1idx*105],arg27_l[6]);
    atomicAdd(&ind_arg13[7+map1idx*105],arg27_l[7]);
    atomicAdd(&ind_arg13[8+map1idx*105],arg27_l[8]);
    atomicAdd(&ind_arg13[9+map1idx*105],arg27_l[9]);
    atomicAdd(&ind_arg13[10+map1idx*105],arg27_l[10]);
    atomicAdd(&ind_arg13[11+map1idx*105],arg27_l[11]);
    atomicAdd(&ind_arg13[12+map1idx*105],arg27_l[12]);
    atomicAdd(&ind_arg13[13+map1idx*105],arg27_l[13]);
    atomicAdd(&ind_arg13[14+map1idx*105],arg27_l[14]);
    atomicAdd(&ind_arg13[15+map1idx*105],arg27_l[15]);
    atomicAdd(&ind_arg13[16+map1idx*105],arg27_l[16]);
    atomicAdd(&ind_arg13[17+map1idx*105],arg27_l[17]);
    atomicAdd(&ind_arg13[18+map1idx*105],arg27_l[18]);
    atomicAdd(&ind_arg13[19+map1idx*105],arg27_l[19]);
    atomicAdd(&ind_arg13[20+map1idx*105],arg27_l[20]);
    atomicAdd(&ind_arg13[21+map1idx*105],arg27_l[21]);
    atomicAdd(&ind_arg13[22+map1idx*105],arg27_l[22]);
    atomicAdd(&ind_arg13[23+map1idx*105],arg27_l[23]);
    atomicAdd(&ind_arg13[24+map1idx*105],arg27_l[24]);
    atomicAdd(&ind_arg13[25+map1idx*105],arg27_l[25]);
    atomicAdd(&ind_arg13[26+map1idx*105],arg27_l[26]);
    atomicAdd(&ind_arg13[27+map1idx*105],arg27_l[27]);
    atomicAdd(&ind_arg13[28+map1idx*105],arg27_l[28]);
    atomicAdd(&ind_arg13[29+map1idx*105],arg27_l[29]);
    atomicAdd(&ind_arg13[30+map1idx*105],arg27_l[30]);
    atomicAdd(&ind_arg13[31+map1idx*105],arg27_l[31]);
    atomicAdd(&ind_arg13[32+map1idx*105],arg27_l[32]);
    atomicAdd(&ind_arg13[33+map1idx*105],arg27_l[33]);
    atomicAdd(&ind_arg13[34+map1idx*105],arg27_l[34]);
    atomicAdd(&ind_arg13[35+map1idx*105],arg27_l[35]);
    atomicAdd(&ind_arg13[36+map1idx*105],arg27_l[36]);
    atomicAdd(&ind_arg13[37+map1idx*105],arg27_l[37]);
    atomicAdd(&ind_arg13[38+map1idx*105],arg27_l[38]);
    atomicAdd(&ind_arg13[39+map1idx*105],arg27_l[39]);
    atomicAdd(&ind_arg13[40+map1idx*105],arg27_l[40]);
    atomicAdd(&ind_arg13[41+map1idx*105],arg27_l[41]);
    atomicAdd(&ind_arg13[42+map1idx*105],arg27_l[42]);
    atomicAdd(&ind_arg13[43+map1idx*105],arg27_l[43]);
    atomicAdd(&ind_arg13[44+map1idx*105],arg27_l[44]);
    atomicAdd(&ind_arg13[45+map1idx*105],arg27_l[45]);
    atomicAdd(&ind_arg13[46+map1idx*105],arg27_l[46]);
    atomicAdd(&ind_arg13[47+map1idx*105],arg27_l[47]);
    atomicAdd(&ind_arg13[48+map1idx*105],arg27_l[48]);
    atomicAdd(&ind_arg13[49+map1idx*105],arg27_l[49]);
    atomicAdd(&ind_arg13[50+map1idx*105],arg27_l[50]);
    atomicAdd(&ind_arg13[51+map1idx*105],arg27_l[51]);
    atomicAdd(&ind_arg13[52+map1idx*105],arg27_l[52]);
    atomicAdd(&ind_arg13[53+map1idx*105],arg27_l[53]);
    atomicAdd(&ind_arg13[54+map1idx*105],arg27_l[54]);
    atomicAdd(&ind_arg13[55+map1idx*105],arg27_l[55]);
    atomicAdd(&ind_arg13[56+map1idx*105],arg27_l[56]);
    atomicAdd(&ind_arg13[57+map1idx*105],arg27_l[57]);
    atomicAdd(&ind_arg13[58+map1idx*105],arg27_l[58]);
    atomicAdd(&ind_arg13[59+map1idx*105],arg27_l[59]);
    atomicAdd(&ind_arg13[60+map1idx*105],arg27_l[60]);
    atomicAdd(&ind_arg13[61+map1idx*105],arg27_l[61]);
    atomicAdd(&ind_arg13[62+map1idx*105],arg27_l[62]);
    atomicAdd(&ind_arg13[63+map1idx*105],arg27_l[63]);
    atomicAdd(&ind_arg13[64+map1idx*105],arg27_l[64]);
    atomicAdd(&ind_arg13[65+map1idx*105],arg27_l[65]);
    atomicAdd(&ind_arg13[66+map1idx*105],arg27_l[66]);
    atomicAdd(&ind_arg13[67+map1idx*105],arg27_l[67]);
    atomicAdd(&ind_arg13[68+map1idx*105],arg27_l[68]);
    atomicAdd(&ind_arg13[69+map1idx*105],arg27_l[69]);
    atomicAdd(&ind_arg13[70+map1idx*105],arg27_l[70]);
    atomicAdd(&ind_arg13[71+map1idx*105],arg27_l[71]);
    atomicAdd(&ind_arg13[72+map1idx*105],arg27_l[72]);
    atomicAdd(&ind_arg13[73+map1idx*105],arg27_l[73]);
    atomicAdd(&ind_arg13[74+map1idx*105],arg27_l[74]);
    atomicAdd(&ind_arg13[75+map1idx*105],arg27_l[75]);
    atomicAdd(&ind_arg13[76+map1idx*105],arg27_l[76]);
    atomicAdd(&ind_arg13[77+map1idx*105],arg27_l[77]);
    atomicAdd(&ind_arg13[78+map1idx*105],arg27_l[78]);
    atomicAdd(&ind_arg13[79+map1idx*105],arg27_l[79]);
    atomicAdd(&ind_arg13[80+map1idx*105],arg27_l[80]);
    atomicAdd(&ind_arg13[81+map1idx*105],arg27_l[81]);
    atomicAdd(&ind_arg13[82+map1idx*105],arg27_l[82]);
    atomicAdd(&ind_arg13[83+map1idx*105],arg27_l[83]);
    atomicAdd(&ind_arg13[84+map1idx*105],arg27_l[84]);
    atomicAdd(&ind_arg13[85+map1idx*105],arg27_l[85]);
    atomicAdd(&ind_arg13[86+map1idx*105],arg27_l[86]);
    atomicAdd(&ind_arg13[87+map1idx*105],arg27_l[87]);
    atomicAdd(&ind_arg13[88+map1idx*105],arg27_l[88]);
    atomicAdd(&ind_arg13[89+map1idx*105],arg27_l[89]);
    atomicAdd(&ind_arg13[90+map1idx*105],arg27_l[90]);
    atomicAdd(&ind_arg13[91+map1idx*105],arg27_l[91]);
    atomicAdd(&ind_arg13[92+map1idx*105],arg27_l[92]);
    atomicAdd(&ind_arg13[93+map1idx*105],arg27_l[93]);
    atomicAdd(&ind_arg13[94+map1idx*105],arg27_l[94]);
    atomicAdd(&ind_arg13[95+map1idx*105],arg27_l[95]);
    atomicAdd(&ind_arg13[96+map1idx*105],arg27_l[96]);
    atomicAdd(&ind_arg13[97+map1idx*105],arg27_l[97]);
    atomicAdd(&ind_arg13[98+map1idx*105],arg27_l[98]);
    atomicAdd(&ind_arg13[99+map1idx*105],arg27_l[99]);
    atomicAdd(&ind_arg13[100+map1idx*105],arg27_l[100]);
    atomicAdd(&ind_arg13[101+map1idx*105],arg27_l[101]);
    atomicAdd(&ind_arg13[102+map1idx*105],arg27_l[102]);
    atomicAdd(&ind_arg13[103+map1idx*105],arg27_l[103]);
    atomicAdd(&ind_arg13[104+map1idx*105],arg27_l[104]);
    atomicAdd(&ind_arg13[0+map2idx*105],arg28_l[0]);
    atomicAdd(&ind_arg13[1+map2idx*105],arg28_l[1]);
    atomicAdd(&ind_arg13[2+map2idx*105],arg28_l[2]);
    atomicAdd(&ind_arg13[3+map2idx*105],arg28_l[3]);
    atomicAdd(&ind_arg13[4+map2idx*105],arg28_l[4]);
    atomicAdd(&ind_arg13[5+map2idx*105],arg28_l[5]);
    atomicAdd(&ind_arg13[6+map2idx*105],arg28_l[6]);
    atomicAdd(&ind_arg13[7+map2idx*105],arg28_l[7]);
    atomicAdd(&ind_arg13[8+map2idx*105],arg28_l[8]);
    atomicAdd(&ind_arg13[9+map2idx*105],arg28_l[9]);
    atomicAdd(&ind_arg13[10+map2idx*105],arg28_l[10]);
    atomicAdd(&ind_arg13[11+map2idx*105],arg28_l[11]);
    atomicAdd(&ind_arg13[12+map2idx*105],arg28_l[12]);
    atomicAdd(&ind_arg13[13+map2idx*105],arg28_l[13]);
    atomicAdd(&ind_arg13[14+map2idx*105],arg28_l[14]);
    atomicAdd(&ind_arg13[15+map2idx*105],arg28_l[15]);
    atomicAdd(&ind_arg13[16+map2idx*105],arg28_l[16]);
    atomicAdd(&ind_arg13[17+map2idx*105],arg28_l[17]);
    atomicAdd(&ind_arg13[18+map2idx*105],arg28_l[18]);
    atomicAdd(&ind_arg13[19+map2idx*105],arg28_l[19]);
    atomicAdd(&ind_arg13[20+map2idx*105],arg28_l[20]);
    atomicAdd(&ind_arg13[21+map2idx*105],arg28_l[21]);
    atomicAdd(&ind_arg13[22+map2idx*105],arg28_l[22]);
    atomicAdd(&ind_arg13[23+map2idx*105],arg28_l[23]);
    atomicAdd(&ind_arg13[24+map2idx*105],arg28_l[24]);
    atomicAdd(&ind_arg13[25+map2idx*105],arg28_l[25]);
    atomicAdd(&ind_arg13[26+map2idx*105],arg28_l[26]);
    atomicAdd(&ind_arg13[27+map2idx*105],arg28_l[27]);
    atomicAdd(&ind_arg13[28+map2idx*105],arg28_l[28]);
    atomicAdd(&ind_arg13[29+map2idx*105],arg28_l[29]);
    atomicAdd(&ind_arg13[30+map2idx*105],arg28_l[30]);
    atomicAdd(&ind_arg13[31+map2idx*105],arg28_l[31]);
    atomicAdd(&ind_arg13[32+map2idx*105],arg28_l[32]);
    atomicAdd(&ind_arg13[33+map2idx*105],arg28_l[33]);
    atomicAdd(&ind_arg13[34+map2idx*105],arg28_l[34]);
    atomicAdd(&ind_arg13[35+map2idx*105],arg28_l[35]);
    atomicAdd(&ind_arg13[36+map2idx*105],arg28_l[36]);
    atomicAdd(&ind_arg13[37+map2idx*105],arg28_l[37]);
    atomicAdd(&ind_arg13[38+map2idx*105],arg28_l[38]);
    atomicAdd(&ind_arg13[39+map2idx*105],arg28_l[39]);
    atomicAdd(&ind_arg13[40+map2idx*105],arg28_l[40]);
    atomicAdd(&ind_arg13[41+map2idx*105],arg28_l[41]);
    atomicAdd(&ind_arg13[42+map2idx*105],arg28_l[42]);
    atomicAdd(&ind_arg13[43+map2idx*105],arg28_l[43]);
    atomicAdd(&ind_arg13[44+map2idx*105],arg28_l[44]);
    atomicAdd(&ind_arg13[45+map2idx*105],arg28_l[45]);
    atomicAdd(&ind_arg13[46+map2idx*105],arg28_l[46]);
    atomicAdd(&ind_arg13[47+map2idx*105],arg28_l[47]);
    atomicAdd(&ind_arg13[48+map2idx*105],arg28_l[48]);
    atomicAdd(&ind_arg13[49+map2idx*105],arg28_l[49]);
    atomicAdd(&ind_arg13[50+map2idx*105],arg28_l[50]);
    atomicAdd(&ind_arg13[51+map2idx*105],arg28_l[51]);
    atomicAdd(&ind_arg13[52+map2idx*105],arg28_l[52]);
    atomicAdd(&ind_arg13[53+map2idx*105],arg28_l[53]);
    atomicAdd(&ind_arg13[54+map2idx*105],arg28_l[54]);
    atomicAdd(&ind_arg13[55+map2idx*105],arg28_l[55]);
    atomicAdd(&ind_arg13[56+map2idx*105],arg28_l[56]);
    atomicAdd(&ind_arg13[57+map2idx*105],arg28_l[57]);
    atomicAdd(&ind_arg13[58+map2idx*105],arg28_l[58]);
    atomicAdd(&ind_arg13[59+map2idx*105],arg28_l[59]);
    atomicAdd(&ind_arg13[60+map2idx*105],arg28_l[60]);
    atomicAdd(&ind_arg13[61+map2idx*105],arg28_l[61]);
    atomicAdd(&ind_arg13[62+map2idx*105],arg28_l[62]);
    atomicAdd(&ind_arg13[63+map2idx*105],arg28_l[63]);
    atomicAdd(&ind_arg13[64+map2idx*105],arg28_l[64]);
    atomicAdd(&ind_arg13[65+map2idx*105],arg28_l[65]);
    atomicAdd(&ind_arg13[66+map2idx*105],arg28_l[66]);
    atomicAdd(&ind_arg13[67+map2idx*105],arg28_l[67]);
    atomicAdd(&ind_arg13[68+map2idx*105],arg28_l[68]);
    atomicAdd(&ind_arg13[69+map2idx*105],arg28_l[69]);
    atomicAdd(&ind_arg13[70+map2idx*105],arg28_l[70]);
    atomicAdd(&ind_arg13[71+map2idx*105],arg28_l[71]);
    atomicAdd(&ind_arg13[72+map2idx*105],arg28_l[72]);
    atomicAdd(&ind_arg13[73+map2idx*105],arg28_l[73]);
    atomicAdd(&ind_arg13[74+map2idx*105],arg28_l[74]);
    atomicAdd(&ind_arg13[75+map2idx*105],arg28_l[75]);
    atomicAdd(&ind_arg13[76+map2idx*105],arg28_l[76]);
    atomicAdd(&ind_arg13[77+map2idx*105],arg28_l[77]);
    atomicAdd(&ind_arg13[78+map2idx*105],arg28_l[78]);
    atomicAdd(&ind_arg13[79+map2idx*105],arg28_l[79]);
    atomicAdd(&ind_arg13[80+map2idx*105],arg28_l[80]);
    atomicAdd(&ind_arg13[81+map2idx*105],arg28_l[81]);
    atomicAdd(&ind_arg13[82+map2idx*105],arg28_l[82]);
    atomicAdd(&ind_arg13[83+map2idx*105],arg28_l[83]);
    atomicAdd(&ind_arg13[84+map2idx*105],arg28_l[84]);
    atomicAdd(&ind_arg13[85+map2idx*105],arg28_l[85]);
    atomicAdd(&ind_arg13[86+map2idx*105],arg28_l[86]);
    atomicAdd(&ind_arg13[87+map2idx*105],arg28_l[87]);
    atomicAdd(&ind_arg13[88+map2idx*105],arg28_l[88]);
    atomicAdd(&ind_arg13[89+map2idx*105],arg28_l[89]);
    atomicAdd(&ind_arg13[90+map2idx*105],arg28_l[90]);
    atomicAdd(&ind_arg13[91+map2idx*105],arg28_l[91]);
    atomicAdd(&ind_arg13[92+map2idx*105],arg28_l[92]);
    atomicAdd(&ind_arg13[93+map2idx*105],arg28_l[93]);
    atomicAdd(&ind_arg13[94+map2idx*105],arg28_l[94]);
    atomicAdd(&ind_arg13[95+map2idx*105],arg28_l[95]);
    atomicAdd(&ind_arg13[96+map2idx*105],arg28_l[96]);
    atomicAdd(&ind_arg13[97+map2idx*105],arg28_l[97]);
    atomicAdd(&ind_arg13[98+map2idx*105],arg28_l[98]);
    atomicAdd(&ind_arg13[99+map2idx*105],arg28_l[99]);
    atomicAdd(&ind_arg13[100+map2idx*105],arg28_l[100]);
    atomicAdd(&ind_arg13[101+map2idx*105],arg28_l[101]);
    atomicAdd(&ind_arg13[102+map2idx*105],arg28_l[102]);
    atomicAdd(&ind_arg13[103+map2idx*105],arg28_l[103]);
    atomicAdd(&ind_arg13[104+map2idx*105],arg28_l[104]);
  }
}


//host stub function
void op_par_loop_gauss_grad_faces(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg3,
  op_arg arg5,
  op_arg arg7,
  op_arg arg9,
  op_arg arg11,
  op_arg arg13,
  op_arg arg15,
  op_arg arg17,
  op_arg arg19,
  op_arg arg21,
  op_arg arg23,
  op_arg arg25,
  op_arg arg27){

  int nargs = 29;
  op_arg args[29];

  args[0] = arg0;
  arg1.idx = 0;
  args[1] = arg1;
  for ( int v=1; v<2; v++ ){
    args[1 + v] = op_arg_dat(arg1.dat, v, arg1.map, 3, "double", OP_READ);
  }

  arg3.idx = 0;
  args[3] = arg3;
  for ( int v=1; v<2; v++ ){
    args[3 + v] = op_arg_dat(arg3.dat, v, arg3.map, 3, "double", OP_READ);
  }

  arg5.idx = 0;
  args[5] = arg5;
  for ( int v=1; v<2; v++ ){
    args[5 + v] = op_arg_dat(arg5.dat, v, arg5.map, 105, "double", OP_READ);
  }

  arg7.idx = 0;
  args[7] = arg7;
  for ( int v=1; v<2; v++ ){
    args[7 + v] = op_arg_dat(arg7.dat, v, arg7.map, 105, "double", OP_READ);
  }

  arg9.idx = 0;
  args[9] = arg9;
  for ( int v=1; v<2; v++ ){
    args[9 + v] = op_arg_dat(arg9.dat, v, arg9.map, 105, "double", OP_READ);
  }

  arg11.idx = 0;
  args[11] = arg11;
  for ( int v=1; v<2; v++ ){
    args[11 + v] = op_arg_dat(arg11.dat, v, arg11.map, 105, "double", OP_READ);
  }

  arg13.idx = 0;
  args[13] = arg13;
  for ( int v=1; v<2; v++ ){
    args[13 + v] = op_arg_dat(arg13.dat, v, arg13.map, 105, "double", OP_READ);
  }

  arg15.idx = 0;
  args[15] = arg15;
  for ( int v=1; v<2; v++ ){
    args[15 + v] = op_arg_dat(arg15.dat, v, arg15.map, 105, "double", OP_READ);
  }

  arg17.idx = 0;
  args[17] = arg17;
  for ( int v=1; v<2; v++ ){
    args[17 + v] = op_arg_dat(arg17.dat, v, arg17.map, 105, "double", OP_INC);
  }

  arg19.idx = 0;
  args[19] = arg19;
  for ( int v=1; v<2; v++ ){
    args[19 + v] = op_arg_dat(arg19.dat, v, arg19.map, 105, "double", OP_INC);
  }

  arg21.idx = 0;
  args[21] = arg21;
  for ( int v=1; v<2; v++ ){
    args[21 + v] = op_arg_dat(arg21.dat, v, arg21.map, 105, "double", OP_INC);
  }

  arg23.idx = 0;
  args[23] = arg23;
  for ( int v=1; v<2; v++ ){
    args[23 + v] = op_arg_dat(arg23.dat, v, arg23.map, 105, "double", OP_INC);
  }

  arg25.idx = 0;
  args[25] = arg25;
  for ( int v=1; v<2; v++ ){
    args[25 + v] = op_arg_dat(arg25.dat, v, arg25.map, 105, "double", OP_INC);
  }

  arg27.idx = 0;
  args[27] = arg27;
  for ( int v=1; v<2; v++ ){
    args[27 + v] = op_arg_dat(arg27.dat, v, arg27.map, 105, "double", OP_INC);
  }


  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(19);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[19].name      = name;
  OP_kernels[19].count    += 1;


  int    ninds   = 14;
  int    inds[29] = {-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: gauss_grad_faces\n");
  }
  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (set_size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_19
      int nthread = OP_BLOCK_SIZE_19;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_gauss_grad_faces<<<nblocks,nthread>>>(
        (double *)arg1.data_d,
        (double *)arg3.data_d,
        (double *)arg5.data_d,
        (double *)arg7.data_d,
        (double *)arg9.data_d,
        (double *)arg11.data_d,
        (double *)arg13.data_d,
        (double *)arg15.data_d,
        (double *)arg17.data_d,
        (double *)arg19.data_d,
        (double *)arg21.data_d,
        (double *)arg23.data_d,
        (double *)arg25.data_d,
        (double *)arg27.data_d,
        arg1.map_data_d,
        (int*)arg0.data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[19].time     += wall_t2 - wall_t1;
}
