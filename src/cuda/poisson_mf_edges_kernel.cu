//
// auto-generated by op2.py
//

//user function
__device__ void poisson_mf_edges_gpu( const int *edgeNum, const bool *rev,
                             const double **sJ, const double **nx,
                             const double **ny, const double **tau,
                             const double **u, const double **dudx,
                             const double **dudy, double **fluxX,
                             double **fluxY, double **flux) {
  int edgeL = edgeNum[0];
  int edgeR = edgeNum[1];
  bool reverse = *rev;

  int exIndL = 0;
  if(edgeL == 1) exIndL = 7;
  else if(edgeL == 2) exIndL = 2 * 7;

  int exIndR = 0;
  if(edgeR == 1) exIndR = 7;
  else if(edgeR == 2) exIndR = 2 * 7;

  for(int i = 0; i < 7; i++) {
    int rInd;
    int lInd = exIndL + i;
    if(reverse) {
      rInd = exIndR + 7 - i - 1;
    } else {
      rInd = exIndR + i;
    }

    double tmp = (u[0][lInd] + u[1][rInd]) / 2.0;
    tmp *= gaussW_g_cuda[i] * sJ[0][lInd];
    fluxX[0][lInd] += nx[0][lInd] * tmp;
    fluxY[0][lInd] += ny[0][lInd] * tmp;
    tmp = nx[0][lInd] * ((dudx[0][lInd] + dudx[1][rInd]) / 2.0);
    tmp += ny[0][lInd] * ((dudy[0][lInd] + dudy[1][rInd]) / 2.0);
    tmp -= tau[0][edgeL] * (u[0][lInd] - u[1][rInd]) / 2.0;
    tmp *= gaussW_g_cuda[i] * sJ[0][lInd];
    flux[0][lInd] += tmp;
  }

  for(int i = 0; i < 7; i++) {
    int lInd;
    int rInd = exIndR + i;
    if(reverse) {
      lInd = exIndL + 7 - i - 1;
    } else {
      lInd = exIndL + i;
    }

    double tmp = (u[0][lInd] + u[1][rInd]) / 2.0;
    tmp *= gaussW_g_cuda[i] * sJ[1][rInd];
    fluxX[1][rInd] += nx[1][rInd] * tmp;
    fluxY[1][rInd] += ny[1][rInd] * tmp;
    tmp = nx[1][rInd] * ((dudx[0][lInd] + dudx[1][rInd]) / 2.0);
    tmp += ny[1][rInd] * ((dudy[0][lInd] + dudy[1][rInd]) / 2.0);
    tmp -= tau[1][edgeR] * (u[1][rInd] - u[0][lInd]) / 2.0;
    tmp *= gaussW_g_cuda[i] * sJ[1][rInd];
    flux[1][rInd] += tmp;
  }

}

// CUDA kernel function
__global__ void op_cuda_poisson_mf_edges(
  const double *__restrict ind_arg0,
  const double *__restrict ind_arg1,
  const double *__restrict ind_arg2,
  const double *__restrict ind_arg3,
  const double *__restrict ind_arg4,
  const double *__restrict ind_arg5,
  const double *__restrict ind_arg6,
  double *__restrict ind_arg7,
  double *__restrict ind_arg8,
  double *__restrict ind_arg9,
  const int *__restrict opDat2Map,
  const int *__restrict arg0,
  const bool *__restrict arg1,
  int start,
  int end,
  int   set_size) {
  double arg16_l[21];
  double arg17_l[21];
  double arg18_l[21];
  double arg19_l[21];
  double arg20_l[21];
  double arg21_l[21];
  double *arg16_vec[2] = {
    arg16_l,
    arg17_l,
  };
  double *arg18_vec[2] = {
    arg18_l,
    arg19_l,
  };
  double *arg20_vec[2] = {
    arg20_l,
    arg21_l,
  };
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    double arg16_l[21];
    for ( int d=0; d<21; d++ ){
      arg16_l[d] = ZERO_double;
    }
    double arg17_l[21];
    for ( int d=0; d<21; d++ ){
      arg17_l[d] = ZERO_double;
    }
    double arg18_l[21];
    for ( int d=0; d<21; d++ ){
      arg18_l[d] = ZERO_double;
    }
    double arg19_l[21];
    for ( int d=0; d<21; d++ ){
      arg19_l[d] = ZERO_double;
    }
    double arg20_l[21];
    for ( int d=0; d<21; d++ ){
      arg20_l[d] = ZERO_double;
    }
    double arg21_l[21];
    for ( int d=0; d<21; d++ ){
      arg21_l[d] = ZERO_double;
    }
    int map2idx;
    int map3idx;
    map2idx = opDat2Map[n + set_size * 0];
    map3idx = opDat2Map[n + set_size * 1];
    const double* arg2_vec[] = {
       &ind_arg0[21 * map2idx],
       &ind_arg0[21 * map3idx]};
    const double* arg4_vec[] = {
       &ind_arg1[21 * map2idx],
       &ind_arg1[21 * map3idx]};
    const double* arg6_vec[] = {
       &ind_arg2[21 * map2idx],
       &ind_arg2[21 * map3idx]};
    const double* arg8_vec[] = {
       &ind_arg3[3 * map2idx],
       &ind_arg3[3 * map3idx]};
    const double* arg10_vec[] = {
       &ind_arg4[21 * map2idx],
       &ind_arg4[21 * map3idx]};
    const double* arg12_vec[] = {
       &ind_arg5[21 * map2idx],
       &ind_arg5[21 * map3idx]};
    const double* arg14_vec[] = {
       &ind_arg6[21 * map2idx],
       &ind_arg6[21 * map3idx]};
    double* arg16_vec[] = {
       &ind_arg7[21 * map2idx],
       &ind_arg7[21 * map3idx]};
    double* arg18_vec[] = {
       &ind_arg8[21 * map2idx],
       &ind_arg8[21 * map3idx]};
    double* arg20_vec[] = {
       &ind_arg9[21 * map2idx],
       &ind_arg9[21 * map3idx]};

    //user-supplied kernel call
    poisson_mf_edges_gpu(arg0+n*2,
                     arg1+n*1,
                     arg2_vec,
                     arg4_vec,
                     arg6_vec,
                     arg8_vec,
                     arg10_vec,
                     arg12_vec,
                     arg14_vec,
                     arg16_vec,
                     arg18_vec,
                     arg20_vec);
    atomicAdd(&ind_arg7[0+map2idx*21],arg16_l[0]);
    atomicAdd(&ind_arg7[1+map2idx*21],arg16_l[1]);
    atomicAdd(&ind_arg7[2+map2idx*21],arg16_l[2]);
    atomicAdd(&ind_arg7[3+map2idx*21],arg16_l[3]);
    atomicAdd(&ind_arg7[4+map2idx*21],arg16_l[4]);
    atomicAdd(&ind_arg7[5+map2idx*21],arg16_l[5]);
    atomicAdd(&ind_arg7[6+map2idx*21],arg16_l[6]);
    atomicAdd(&ind_arg7[7+map2idx*21],arg16_l[7]);
    atomicAdd(&ind_arg7[8+map2idx*21],arg16_l[8]);
    atomicAdd(&ind_arg7[9+map2idx*21],arg16_l[9]);
    atomicAdd(&ind_arg7[10+map2idx*21],arg16_l[10]);
    atomicAdd(&ind_arg7[11+map2idx*21],arg16_l[11]);
    atomicAdd(&ind_arg7[12+map2idx*21],arg16_l[12]);
    atomicAdd(&ind_arg7[13+map2idx*21],arg16_l[13]);
    atomicAdd(&ind_arg7[14+map2idx*21],arg16_l[14]);
    atomicAdd(&ind_arg7[15+map2idx*21],arg16_l[15]);
    atomicAdd(&ind_arg7[16+map2idx*21],arg16_l[16]);
    atomicAdd(&ind_arg7[17+map2idx*21],arg16_l[17]);
    atomicAdd(&ind_arg7[18+map2idx*21],arg16_l[18]);
    atomicAdd(&ind_arg7[19+map2idx*21],arg16_l[19]);
    atomicAdd(&ind_arg7[20+map2idx*21],arg16_l[20]);
    atomicAdd(&ind_arg7[0+map3idx*21],arg17_l[0]);
    atomicAdd(&ind_arg7[1+map3idx*21],arg17_l[1]);
    atomicAdd(&ind_arg7[2+map3idx*21],arg17_l[2]);
    atomicAdd(&ind_arg7[3+map3idx*21],arg17_l[3]);
    atomicAdd(&ind_arg7[4+map3idx*21],arg17_l[4]);
    atomicAdd(&ind_arg7[5+map3idx*21],arg17_l[5]);
    atomicAdd(&ind_arg7[6+map3idx*21],arg17_l[6]);
    atomicAdd(&ind_arg7[7+map3idx*21],arg17_l[7]);
    atomicAdd(&ind_arg7[8+map3idx*21],arg17_l[8]);
    atomicAdd(&ind_arg7[9+map3idx*21],arg17_l[9]);
    atomicAdd(&ind_arg7[10+map3idx*21],arg17_l[10]);
    atomicAdd(&ind_arg7[11+map3idx*21],arg17_l[11]);
    atomicAdd(&ind_arg7[12+map3idx*21],arg17_l[12]);
    atomicAdd(&ind_arg7[13+map3idx*21],arg17_l[13]);
    atomicAdd(&ind_arg7[14+map3idx*21],arg17_l[14]);
    atomicAdd(&ind_arg7[15+map3idx*21],arg17_l[15]);
    atomicAdd(&ind_arg7[16+map3idx*21],arg17_l[16]);
    atomicAdd(&ind_arg7[17+map3idx*21],arg17_l[17]);
    atomicAdd(&ind_arg7[18+map3idx*21],arg17_l[18]);
    atomicAdd(&ind_arg7[19+map3idx*21],arg17_l[19]);
    atomicAdd(&ind_arg7[20+map3idx*21],arg17_l[20]);
    atomicAdd(&ind_arg8[0+map2idx*21],arg18_l[0]);
    atomicAdd(&ind_arg8[1+map2idx*21],arg18_l[1]);
    atomicAdd(&ind_arg8[2+map2idx*21],arg18_l[2]);
    atomicAdd(&ind_arg8[3+map2idx*21],arg18_l[3]);
    atomicAdd(&ind_arg8[4+map2idx*21],arg18_l[4]);
    atomicAdd(&ind_arg8[5+map2idx*21],arg18_l[5]);
    atomicAdd(&ind_arg8[6+map2idx*21],arg18_l[6]);
    atomicAdd(&ind_arg8[7+map2idx*21],arg18_l[7]);
    atomicAdd(&ind_arg8[8+map2idx*21],arg18_l[8]);
    atomicAdd(&ind_arg8[9+map2idx*21],arg18_l[9]);
    atomicAdd(&ind_arg8[10+map2idx*21],arg18_l[10]);
    atomicAdd(&ind_arg8[11+map2idx*21],arg18_l[11]);
    atomicAdd(&ind_arg8[12+map2idx*21],arg18_l[12]);
    atomicAdd(&ind_arg8[13+map2idx*21],arg18_l[13]);
    atomicAdd(&ind_arg8[14+map2idx*21],arg18_l[14]);
    atomicAdd(&ind_arg8[15+map2idx*21],arg18_l[15]);
    atomicAdd(&ind_arg8[16+map2idx*21],arg18_l[16]);
    atomicAdd(&ind_arg8[17+map2idx*21],arg18_l[17]);
    atomicAdd(&ind_arg8[18+map2idx*21],arg18_l[18]);
    atomicAdd(&ind_arg8[19+map2idx*21],arg18_l[19]);
    atomicAdd(&ind_arg8[20+map2idx*21],arg18_l[20]);
    atomicAdd(&ind_arg8[0+map3idx*21],arg19_l[0]);
    atomicAdd(&ind_arg8[1+map3idx*21],arg19_l[1]);
    atomicAdd(&ind_arg8[2+map3idx*21],arg19_l[2]);
    atomicAdd(&ind_arg8[3+map3idx*21],arg19_l[3]);
    atomicAdd(&ind_arg8[4+map3idx*21],arg19_l[4]);
    atomicAdd(&ind_arg8[5+map3idx*21],arg19_l[5]);
    atomicAdd(&ind_arg8[6+map3idx*21],arg19_l[6]);
    atomicAdd(&ind_arg8[7+map3idx*21],arg19_l[7]);
    atomicAdd(&ind_arg8[8+map3idx*21],arg19_l[8]);
    atomicAdd(&ind_arg8[9+map3idx*21],arg19_l[9]);
    atomicAdd(&ind_arg8[10+map3idx*21],arg19_l[10]);
    atomicAdd(&ind_arg8[11+map3idx*21],arg19_l[11]);
    atomicAdd(&ind_arg8[12+map3idx*21],arg19_l[12]);
    atomicAdd(&ind_arg8[13+map3idx*21],arg19_l[13]);
    atomicAdd(&ind_arg8[14+map3idx*21],arg19_l[14]);
    atomicAdd(&ind_arg8[15+map3idx*21],arg19_l[15]);
    atomicAdd(&ind_arg8[16+map3idx*21],arg19_l[16]);
    atomicAdd(&ind_arg8[17+map3idx*21],arg19_l[17]);
    atomicAdd(&ind_arg8[18+map3idx*21],arg19_l[18]);
    atomicAdd(&ind_arg8[19+map3idx*21],arg19_l[19]);
    atomicAdd(&ind_arg8[20+map3idx*21],arg19_l[20]);
    atomicAdd(&ind_arg9[0+map2idx*21],arg20_l[0]);
    atomicAdd(&ind_arg9[1+map2idx*21],arg20_l[1]);
    atomicAdd(&ind_arg9[2+map2idx*21],arg20_l[2]);
    atomicAdd(&ind_arg9[3+map2idx*21],arg20_l[3]);
    atomicAdd(&ind_arg9[4+map2idx*21],arg20_l[4]);
    atomicAdd(&ind_arg9[5+map2idx*21],arg20_l[5]);
    atomicAdd(&ind_arg9[6+map2idx*21],arg20_l[6]);
    atomicAdd(&ind_arg9[7+map2idx*21],arg20_l[7]);
    atomicAdd(&ind_arg9[8+map2idx*21],arg20_l[8]);
    atomicAdd(&ind_arg9[9+map2idx*21],arg20_l[9]);
    atomicAdd(&ind_arg9[10+map2idx*21],arg20_l[10]);
    atomicAdd(&ind_arg9[11+map2idx*21],arg20_l[11]);
    atomicAdd(&ind_arg9[12+map2idx*21],arg20_l[12]);
    atomicAdd(&ind_arg9[13+map2idx*21],arg20_l[13]);
    atomicAdd(&ind_arg9[14+map2idx*21],arg20_l[14]);
    atomicAdd(&ind_arg9[15+map2idx*21],arg20_l[15]);
    atomicAdd(&ind_arg9[16+map2idx*21],arg20_l[16]);
    atomicAdd(&ind_arg9[17+map2idx*21],arg20_l[17]);
    atomicAdd(&ind_arg9[18+map2idx*21],arg20_l[18]);
    atomicAdd(&ind_arg9[19+map2idx*21],arg20_l[19]);
    atomicAdd(&ind_arg9[20+map2idx*21],arg20_l[20]);
    atomicAdd(&ind_arg9[0+map3idx*21],arg21_l[0]);
    atomicAdd(&ind_arg9[1+map3idx*21],arg21_l[1]);
    atomicAdd(&ind_arg9[2+map3idx*21],arg21_l[2]);
    atomicAdd(&ind_arg9[3+map3idx*21],arg21_l[3]);
    atomicAdd(&ind_arg9[4+map3idx*21],arg21_l[4]);
    atomicAdd(&ind_arg9[5+map3idx*21],arg21_l[5]);
    atomicAdd(&ind_arg9[6+map3idx*21],arg21_l[6]);
    atomicAdd(&ind_arg9[7+map3idx*21],arg21_l[7]);
    atomicAdd(&ind_arg9[8+map3idx*21],arg21_l[8]);
    atomicAdd(&ind_arg9[9+map3idx*21],arg21_l[9]);
    atomicAdd(&ind_arg9[10+map3idx*21],arg21_l[10]);
    atomicAdd(&ind_arg9[11+map3idx*21],arg21_l[11]);
    atomicAdd(&ind_arg9[12+map3idx*21],arg21_l[12]);
    atomicAdd(&ind_arg9[13+map3idx*21],arg21_l[13]);
    atomicAdd(&ind_arg9[14+map3idx*21],arg21_l[14]);
    atomicAdd(&ind_arg9[15+map3idx*21],arg21_l[15]);
    atomicAdd(&ind_arg9[16+map3idx*21],arg21_l[16]);
    atomicAdd(&ind_arg9[17+map3idx*21],arg21_l[17]);
    atomicAdd(&ind_arg9[18+map3idx*21],arg21_l[18]);
    atomicAdd(&ind_arg9[19+map3idx*21],arg21_l[19]);
    atomicAdd(&ind_arg9[20+map3idx*21],arg21_l[20]);
  }
}


//host stub function
void op_par_loop_poisson_mf_edges(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg4,
  op_arg arg6,
  op_arg arg8,
  op_arg arg10,
  op_arg arg12,
  op_arg arg14,
  op_arg arg16,
  op_arg arg18,
  op_arg arg20){

  int nargs = 22;
  op_arg args[22];

  args[0] = arg0;
  args[1] = arg1;
  arg2.idx = 0;
  args[2] = arg2;
  for ( int v=1; v<2; v++ ){
    args[2 + v] = op_arg_dat(arg2.dat, v, arg2.map, 21, "double", OP_READ);
  }

  arg4.idx = 0;
  args[4] = arg4;
  for ( int v=1; v<2; v++ ){
    args[4 + v] = op_arg_dat(arg4.dat, v, arg4.map, 21, "double", OP_READ);
  }

  arg6.idx = 0;
  args[6] = arg6;
  for ( int v=1; v<2; v++ ){
    args[6 + v] = op_arg_dat(arg6.dat, v, arg6.map, 21, "double", OP_READ);
  }

  arg8.idx = 0;
  args[8] = arg8;
  for ( int v=1; v<2; v++ ){
    args[8 + v] = op_arg_dat(arg8.dat, v, arg8.map, 3, "double", OP_READ);
  }

  arg10.idx = 0;
  args[10] = arg10;
  for ( int v=1; v<2; v++ ){
    args[10 + v] = op_arg_dat(arg10.dat, v, arg10.map, 21, "double", OP_READ);
  }

  arg12.idx = 0;
  args[12] = arg12;
  for ( int v=1; v<2; v++ ){
    args[12 + v] = op_arg_dat(arg12.dat, v, arg12.map, 21, "double", OP_READ);
  }

  arg14.idx = 0;
  args[14] = arg14;
  for ( int v=1; v<2; v++ ){
    args[14 + v] = op_arg_dat(arg14.dat, v, arg14.map, 21, "double", OP_READ);
  }

  arg16.idx = 0;
  args[16] = arg16;
  for ( int v=1; v<2; v++ ){
    args[16 + v] = op_arg_dat(arg16.dat, v, arg16.map, 21, "double", OP_INC);
  }

  arg18.idx = 0;
  args[18] = arg18;
  for ( int v=1; v<2; v++ ){
    args[18 + v] = op_arg_dat(arg18.dat, v, arg18.map, 21, "double", OP_INC);
  }

  arg20.idx = 0;
  args[20] = arg20;
  for ( int v=1; v<2; v++ ){
    args[20 + v] = op_arg_dat(arg20.dat, v, arg20.map, 21, "double", OP_INC);
  }


  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(30);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[30].name      = name;
  OP_kernels[30].count    += 1;


  int    ninds   = 10;
  int    inds[22] = {-1,-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: poisson_mf_edges\n");
  }
  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (set_size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_30
      int nthread = OP_BLOCK_SIZE_30;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_poisson_mf_edges<<<nblocks,nthread>>>(
        (double *)arg2.data_d,
        (double *)arg4.data_d,
        (double *)arg6.data_d,
        (double *)arg8.data_d,
        (double *)arg10.data_d,
        (double *)arg12.data_d,
        (double *)arg14.data_d,
        (double *)arg16.data_d,
        (double *)arg18.data_d,
        (double *)arg20.data_d,
        arg2.map_data_d,
        (int*)arg0.data_d,
        (bool*)arg1.data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[30].time     += wall_t2 - wall_t1;
}
