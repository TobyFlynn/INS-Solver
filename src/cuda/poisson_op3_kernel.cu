//
// auto-generated by op2.py
//

//user function
__device__ void poisson_op3_gpu( const int *edgeType, const int *edgeNum,
                        const int *d0, const int *d1, const int *d2,
                        const double *mD0, const double *mD1,
                        const double *mD2, const double *sJ,
                        const double *h, const double *gFactor,
                        const double *factor, double *op1) {
  if(*edgeType != *d0 && *edgeType != *d1 && *edgeType != *d2)
    return;


  const double *mD, *gVM;
  if(*edgeNum == 0) {
    mD  = mD0;
    gVM = gFInterp0_g_cuda;
  } else if(*edgeNum == 1) {
    mD  = mD1;
    gVM = gFInterp1_g_cuda;
  } else {
    mD  = mD2;
    gVM = gFInterp2_g_cuda;
  }


  for(int i = 0; i < 15; i++) {
    for(int j = 0; j < 15; j++) {
      int c_ind = i * 15 + j;
      for(int k = 0; k < 7; k++) {

        int b_ind = k * 15 + j;

        int ind = i * 7 + k;
        int a_ind = ((ind * 15) % (15 * 7)) + (ind / 7);

        int factors_ind = *edgeNum * 7 + k;

        op1[c_ind] += -0.5 * gVM[a_ind] * gaussW_g_cuda[k] * sJ[factors_ind]
                      * gFactor[factors_ind] * mD[b_ind];
      }
    }
  }


  for(int i = 0; i < 15; i++) {
    for(int j = 0; j < 15; j++) {
      int c_ind = i * 15 + j;
      for(int k = 0; k < 7; k++) {

        int b_ind = k * 15 + j;

        int ind = i * 7 + k;
        int a_ind = ((ind * 15) % (15 * 7)) + (ind / 7);

        int factors_ind = *edgeNum * 7 + k;

        op1[c_ind] += -factor[i] * mD[a_ind] * gaussW_g_cuda[k]
                      * sJ[factors_ind] * gVM[b_ind];
      }
    }
  }


  double tauA[7];
  for(int i = 0; i < 7; i++) {
    int ind = *edgeNum  * 7 + i;
    tauA[i] = 10 * 0.5 * 5 * 6 * (*h * gFactor[ind]);
  }



  for(int i = 0; i < 15; i++) {
    for(int j = 0; j < 15; j++) {
      int c_ind = i * 15 + j;
      for(int k = 0; k < 7; k++) {

        int b_ind = k * 15 + j;

        int ind = i * 7 + k;
        int a_ind = ((ind * 15) % (15 * 7)) + (ind / 7);

        int factors_ind = *edgeNum * 7 + k;

        op1[c_ind] += gVM[a_ind] * gaussW_g_cuda[k] * sJ[factors_ind]
                      * tauA[k] * gVM[b_ind];
      }
    }
  }

}

// CUDA kernel function
__global__ void op_cuda_poisson_op3(
  const double *__restrict ind_arg0,
  const double *__restrict ind_arg1,
  const double *__restrict ind_arg2,
  const double *__restrict ind_arg3,
  const double *__restrict ind_arg4,
  const double *__restrict ind_arg5,
  const double *__restrict ind_arg6,
  double *__restrict ind_arg7,
  const int *__restrict opDat5Map,
  const int *__restrict arg0,
  const int *__restrict arg1,
  const int *arg2,
  const int *arg3,
  const int *arg4,
  int start,
  int end,
  int   set_size) {
  double arg12_l[225];
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    double arg12_l[225];
    for ( int d=0; d<225; d++ ){
      arg12_l[d] = ZERO_double;
    }
    int map5idx;
    map5idx = opDat5Map[n + set_size * 0];

    //user-supplied kernel call
    poisson_op3_gpu(arg0+n*1,
                arg1+n*1,
                arg2,
                arg3,
                arg4,
                ind_arg0+map5idx*105,
                ind_arg1+map5idx*105,
                ind_arg2+map5idx*105,
                ind_arg3+map5idx*21,
                ind_arg4+map5idx*1,
                ind_arg5+map5idx*21,
                ind_arg6+map5idx*15,
                arg12_l);
    atomicAdd(&ind_arg7[0+map5idx*225],arg12_l[0]);
    atomicAdd(&ind_arg7[1+map5idx*225],arg12_l[1]);
    atomicAdd(&ind_arg7[2+map5idx*225],arg12_l[2]);
    atomicAdd(&ind_arg7[3+map5idx*225],arg12_l[3]);
    atomicAdd(&ind_arg7[4+map5idx*225],arg12_l[4]);
    atomicAdd(&ind_arg7[5+map5idx*225],arg12_l[5]);
    atomicAdd(&ind_arg7[6+map5idx*225],arg12_l[6]);
    atomicAdd(&ind_arg7[7+map5idx*225],arg12_l[7]);
    atomicAdd(&ind_arg7[8+map5idx*225],arg12_l[8]);
    atomicAdd(&ind_arg7[9+map5idx*225],arg12_l[9]);
    atomicAdd(&ind_arg7[10+map5idx*225],arg12_l[10]);
    atomicAdd(&ind_arg7[11+map5idx*225],arg12_l[11]);
    atomicAdd(&ind_arg7[12+map5idx*225],arg12_l[12]);
    atomicAdd(&ind_arg7[13+map5idx*225],arg12_l[13]);
    atomicAdd(&ind_arg7[14+map5idx*225],arg12_l[14]);
    atomicAdd(&ind_arg7[15+map5idx*225],arg12_l[15]);
    atomicAdd(&ind_arg7[16+map5idx*225],arg12_l[16]);
    atomicAdd(&ind_arg7[17+map5idx*225],arg12_l[17]);
    atomicAdd(&ind_arg7[18+map5idx*225],arg12_l[18]);
    atomicAdd(&ind_arg7[19+map5idx*225],arg12_l[19]);
    atomicAdd(&ind_arg7[20+map5idx*225],arg12_l[20]);
    atomicAdd(&ind_arg7[21+map5idx*225],arg12_l[21]);
    atomicAdd(&ind_arg7[22+map5idx*225],arg12_l[22]);
    atomicAdd(&ind_arg7[23+map5idx*225],arg12_l[23]);
    atomicAdd(&ind_arg7[24+map5idx*225],arg12_l[24]);
    atomicAdd(&ind_arg7[25+map5idx*225],arg12_l[25]);
    atomicAdd(&ind_arg7[26+map5idx*225],arg12_l[26]);
    atomicAdd(&ind_arg7[27+map5idx*225],arg12_l[27]);
    atomicAdd(&ind_arg7[28+map5idx*225],arg12_l[28]);
    atomicAdd(&ind_arg7[29+map5idx*225],arg12_l[29]);
    atomicAdd(&ind_arg7[30+map5idx*225],arg12_l[30]);
    atomicAdd(&ind_arg7[31+map5idx*225],arg12_l[31]);
    atomicAdd(&ind_arg7[32+map5idx*225],arg12_l[32]);
    atomicAdd(&ind_arg7[33+map5idx*225],arg12_l[33]);
    atomicAdd(&ind_arg7[34+map5idx*225],arg12_l[34]);
    atomicAdd(&ind_arg7[35+map5idx*225],arg12_l[35]);
    atomicAdd(&ind_arg7[36+map5idx*225],arg12_l[36]);
    atomicAdd(&ind_arg7[37+map5idx*225],arg12_l[37]);
    atomicAdd(&ind_arg7[38+map5idx*225],arg12_l[38]);
    atomicAdd(&ind_arg7[39+map5idx*225],arg12_l[39]);
    atomicAdd(&ind_arg7[40+map5idx*225],arg12_l[40]);
    atomicAdd(&ind_arg7[41+map5idx*225],arg12_l[41]);
    atomicAdd(&ind_arg7[42+map5idx*225],arg12_l[42]);
    atomicAdd(&ind_arg7[43+map5idx*225],arg12_l[43]);
    atomicAdd(&ind_arg7[44+map5idx*225],arg12_l[44]);
    atomicAdd(&ind_arg7[45+map5idx*225],arg12_l[45]);
    atomicAdd(&ind_arg7[46+map5idx*225],arg12_l[46]);
    atomicAdd(&ind_arg7[47+map5idx*225],arg12_l[47]);
    atomicAdd(&ind_arg7[48+map5idx*225],arg12_l[48]);
    atomicAdd(&ind_arg7[49+map5idx*225],arg12_l[49]);
    atomicAdd(&ind_arg7[50+map5idx*225],arg12_l[50]);
    atomicAdd(&ind_arg7[51+map5idx*225],arg12_l[51]);
    atomicAdd(&ind_arg7[52+map5idx*225],arg12_l[52]);
    atomicAdd(&ind_arg7[53+map5idx*225],arg12_l[53]);
    atomicAdd(&ind_arg7[54+map5idx*225],arg12_l[54]);
    atomicAdd(&ind_arg7[55+map5idx*225],arg12_l[55]);
    atomicAdd(&ind_arg7[56+map5idx*225],arg12_l[56]);
    atomicAdd(&ind_arg7[57+map5idx*225],arg12_l[57]);
    atomicAdd(&ind_arg7[58+map5idx*225],arg12_l[58]);
    atomicAdd(&ind_arg7[59+map5idx*225],arg12_l[59]);
    atomicAdd(&ind_arg7[60+map5idx*225],arg12_l[60]);
    atomicAdd(&ind_arg7[61+map5idx*225],arg12_l[61]);
    atomicAdd(&ind_arg7[62+map5idx*225],arg12_l[62]);
    atomicAdd(&ind_arg7[63+map5idx*225],arg12_l[63]);
    atomicAdd(&ind_arg7[64+map5idx*225],arg12_l[64]);
    atomicAdd(&ind_arg7[65+map5idx*225],arg12_l[65]);
    atomicAdd(&ind_arg7[66+map5idx*225],arg12_l[66]);
    atomicAdd(&ind_arg7[67+map5idx*225],arg12_l[67]);
    atomicAdd(&ind_arg7[68+map5idx*225],arg12_l[68]);
    atomicAdd(&ind_arg7[69+map5idx*225],arg12_l[69]);
    atomicAdd(&ind_arg7[70+map5idx*225],arg12_l[70]);
    atomicAdd(&ind_arg7[71+map5idx*225],arg12_l[71]);
    atomicAdd(&ind_arg7[72+map5idx*225],arg12_l[72]);
    atomicAdd(&ind_arg7[73+map5idx*225],arg12_l[73]);
    atomicAdd(&ind_arg7[74+map5idx*225],arg12_l[74]);
    atomicAdd(&ind_arg7[75+map5idx*225],arg12_l[75]);
    atomicAdd(&ind_arg7[76+map5idx*225],arg12_l[76]);
    atomicAdd(&ind_arg7[77+map5idx*225],arg12_l[77]);
    atomicAdd(&ind_arg7[78+map5idx*225],arg12_l[78]);
    atomicAdd(&ind_arg7[79+map5idx*225],arg12_l[79]);
    atomicAdd(&ind_arg7[80+map5idx*225],arg12_l[80]);
    atomicAdd(&ind_arg7[81+map5idx*225],arg12_l[81]);
    atomicAdd(&ind_arg7[82+map5idx*225],arg12_l[82]);
    atomicAdd(&ind_arg7[83+map5idx*225],arg12_l[83]);
    atomicAdd(&ind_arg7[84+map5idx*225],arg12_l[84]);
    atomicAdd(&ind_arg7[85+map5idx*225],arg12_l[85]);
    atomicAdd(&ind_arg7[86+map5idx*225],arg12_l[86]);
    atomicAdd(&ind_arg7[87+map5idx*225],arg12_l[87]);
    atomicAdd(&ind_arg7[88+map5idx*225],arg12_l[88]);
    atomicAdd(&ind_arg7[89+map5idx*225],arg12_l[89]);
    atomicAdd(&ind_arg7[90+map5idx*225],arg12_l[90]);
    atomicAdd(&ind_arg7[91+map5idx*225],arg12_l[91]);
    atomicAdd(&ind_arg7[92+map5idx*225],arg12_l[92]);
    atomicAdd(&ind_arg7[93+map5idx*225],arg12_l[93]);
    atomicAdd(&ind_arg7[94+map5idx*225],arg12_l[94]);
    atomicAdd(&ind_arg7[95+map5idx*225],arg12_l[95]);
    atomicAdd(&ind_arg7[96+map5idx*225],arg12_l[96]);
    atomicAdd(&ind_arg7[97+map5idx*225],arg12_l[97]);
    atomicAdd(&ind_arg7[98+map5idx*225],arg12_l[98]);
    atomicAdd(&ind_arg7[99+map5idx*225],arg12_l[99]);
    atomicAdd(&ind_arg7[100+map5idx*225],arg12_l[100]);
    atomicAdd(&ind_arg7[101+map5idx*225],arg12_l[101]);
    atomicAdd(&ind_arg7[102+map5idx*225],arg12_l[102]);
    atomicAdd(&ind_arg7[103+map5idx*225],arg12_l[103]);
    atomicAdd(&ind_arg7[104+map5idx*225],arg12_l[104]);
    atomicAdd(&ind_arg7[105+map5idx*225],arg12_l[105]);
    atomicAdd(&ind_arg7[106+map5idx*225],arg12_l[106]);
    atomicAdd(&ind_arg7[107+map5idx*225],arg12_l[107]);
    atomicAdd(&ind_arg7[108+map5idx*225],arg12_l[108]);
    atomicAdd(&ind_arg7[109+map5idx*225],arg12_l[109]);
    atomicAdd(&ind_arg7[110+map5idx*225],arg12_l[110]);
    atomicAdd(&ind_arg7[111+map5idx*225],arg12_l[111]);
    atomicAdd(&ind_arg7[112+map5idx*225],arg12_l[112]);
    atomicAdd(&ind_arg7[113+map5idx*225],arg12_l[113]);
    atomicAdd(&ind_arg7[114+map5idx*225],arg12_l[114]);
    atomicAdd(&ind_arg7[115+map5idx*225],arg12_l[115]);
    atomicAdd(&ind_arg7[116+map5idx*225],arg12_l[116]);
    atomicAdd(&ind_arg7[117+map5idx*225],arg12_l[117]);
    atomicAdd(&ind_arg7[118+map5idx*225],arg12_l[118]);
    atomicAdd(&ind_arg7[119+map5idx*225],arg12_l[119]);
    atomicAdd(&ind_arg7[120+map5idx*225],arg12_l[120]);
    atomicAdd(&ind_arg7[121+map5idx*225],arg12_l[121]);
    atomicAdd(&ind_arg7[122+map5idx*225],arg12_l[122]);
    atomicAdd(&ind_arg7[123+map5idx*225],arg12_l[123]);
    atomicAdd(&ind_arg7[124+map5idx*225],arg12_l[124]);
    atomicAdd(&ind_arg7[125+map5idx*225],arg12_l[125]);
    atomicAdd(&ind_arg7[126+map5idx*225],arg12_l[126]);
    atomicAdd(&ind_arg7[127+map5idx*225],arg12_l[127]);
    atomicAdd(&ind_arg7[128+map5idx*225],arg12_l[128]);
    atomicAdd(&ind_arg7[129+map5idx*225],arg12_l[129]);
    atomicAdd(&ind_arg7[130+map5idx*225],arg12_l[130]);
    atomicAdd(&ind_arg7[131+map5idx*225],arg12_l[131]);
    atomicAdd(&ind_arg7[132+map5idx*225],arg12_l[132]);
    atomicAdd(&ind_arg7[133+map5idx*225],arg12_l[133]);
    atomicAdd(&ind_arg7[134+map5idx*225],arg12_l[134]);
    atomicAdd(&ind_arg7[135+map5idx*225],arg12_l[135]);
    atomicAdd(&ind_arg7[136+map5idx*225],arg12_l[136]);
    atomicAdd(&ind_arg7[137+map5idx*225],arg12_l[137]);
    atomicAdd(&ind_arg7[138+map5idx*225],arg12_l[138]);
    atomicAdd(&ind_arg7[139+map5idx*225],arg12_l[139]);
    atomicAdd(&ind_arg7[140+map5idx*225],arg12_l[140]);
    atomicAdd(&ind_arg7[141+map5idx*225],arg12_l[141]);
    atomicAdd(&ind_arg7[142+map5idx*225],arg12_l[142]);
    atomicAdd(&ind_arg7[143+map5idx*225],arg12_l[143]);
    atomicAdd(&ind_arg7[144+map5idx*225],arg12_l[144]);
    atomicAdd(&ind_arg7[145+map5idx*225],arg12_l[145]);
    atomicAdd(&ind_arg7[146+map5idx*225],arg12_l[146]);
    atomicAdd(&ind_arg7[147+map5idx*225],arg12_l[147]);
    atomicAdd(&ind_arg7[148+map5idx*225],arg12_l[148]);
    atomicAdd(&ind_arg7[149+map5idx*225],arg12_l[149]);
    atomicAdd(&ind_arg7[150+map5idx*225],arg12_l[150]);
    atomicAdd(&ind_arg7[151+map5idx*225],arg12_l[151]);
    atomicAdd(&ind_arg7[152+map5idx*225],arg12_l[152]);
    atomicAdd(&ind_arg7[153+map5idx*225],arg12_l[153]);
    atomicAdd(&ind_arg7[154+map5idx*225],arg12_l[154]);
    atomicAdd(&ind_arg7[155+map5idx*225],arg12_l[155]);
    atomicAdd(&ind_arg7[156+map5idx*225],arg12_l[156]);
    atomicAdd(&ind_arg7[157+map5idx*225],arg12_l[157]);
    atomicAdd(&ind_arg7[158+map5idx*225],arg12_l[158]);
    atomicAdd(&ind_arg7[159+map5idx*225],arg12_l[159]);
    atomicAdd(&ind_arg7[160+map5idx*225],arg12_l[160]);
    atomicAdd(&ind_arg7[161+map5idx*225],arg12_l[161]);
    atomicAdd(&ind_arg7[162+map5idx*225],arg12_l[162]);
    atomicAdd(&ind_arg7[163+map5idx*225],arg12_l[163]);
    atomicAdd(&ind_arg7[164+map5idx*225],arg12_l[164]);
    atomicAdd(&ind_arg7[165+map5idx*225],arg12_l[165]);
    atomicAdd(&ind_arg7[166+map5idx*225],arg12_l[166]);
    atomicAdd(&ind_arg7[167+map5idx*225],arg12_l[167]);
    atomicAdd(&ind_arg7[168+map5idx*225],arg12_l[168]);
    atomicAdd(&ind_arg7[169+map5idx*225],arg12_l[169]);
    atomicAdd(&ind_arg7[170+map5idx*225],arg12_l[170]);
    atomicAdd(&ind_arg7[171+map5idx*225],arg12_l[171]);
    atomicAdd(&ind_arg7[172+map5idx*225],arg12_l[172]);
    atomicAdd(&ind_arg7[173+map5idx*225],arg12_l[173]);
    atomicAdd(&ind_arg7[174+map5idx*225],arg12_l[174]);
    atomicAdd(&ind_arg7[175+map5idx*225],arg12_l[175]);
    atomicAdd(&ind_arg7[176+map5idx*225],arg12_l[176]);
    atomicAdd(&ind_arg7[177+map5idx*225],arg12_l[177]);
    atomicAdd(&ind_arg7[178+map5idx*225],arg12_l[178]);
    atomicAdd(&ind_arg7[179+map5idx*225],arg12_l[179]);
    atomicAdd(&ind_arg7[180+map5idx*225],arg12_l[180]);
    atomicAdd(&ind_arg7[181+map5idx*225],arg12_l[181]);
    atomicAdd(&ind_arg7[182+map5idx*225],arg12_l[182]);
    atomicAdd(&ind_arg7[183+map5idx*225],arg12_l[183]);
    atomicAdd(&ind_arg7[184+map5idx*225],arg12_l[184]);
    atomicAdd(&ind_arg7[185+map5idx*225],arg12_l[185]);
    atomicAdd(&ind_arg7[186+map5idx*225],arg12_l[186]);
    atomicAdd(&ind_arg7[187+map5idx*225],arg12_l[187]);
    atomicAdd(&ind_arg7[188+map5idx*225],arg12_l[188]);
    atomicAdd(&ind_arg7[189+map5idx*225],arg12_l[189]);
    atomicAdd(&ind_arg7[190+map5idx*225],arg12_l[190]);
    atomicAdd(&ind_arg7[191+map5idx*225],arg12_l[191]);
    atomicAdd(&ind_arg7[192+map5idx*225],arg12_l[192]);
    atomicAdd(&ind_arg7[193+map5idx*225],arg12_l[193]);
    atomicAdd(&ind_arg7[194+map5idx*225],arg12_l[194]);
    atomicAdd(&ind_arg7[195+map5idx*225],arg12_l[195]);
    atomicAdd(&ind_arg7[196+map5idx*225],arg12_l[196]);
    atomicAdd(&ind_arg7[197+map5idx*225],arg12_l[197]);
    atomicAdd(&ind_arg7[198+map5idx*225],arg12_l[198]);
    atomicAdd(&ind_arg7[199+map5idx*225],arg12_l[199]);
    atomicAdd(&ind_arg7[200+map5idx*225],arg12_l[200]);
    atomicAdd(&ind_arg7[201+map5idx*225],arg12_l[201]);
    atomicAdd(&ind_arg7[202+map5idx*225],arg12_l[202]);
    atomicAdd(&ind_arg7[203+map5idx*225],arg12_l[203]);
    atomicAdd(&ind_arg7[204+map5idx*225],arg12_l[204]);
    atomicAdd(&ind_arg7[205+map5idx*225],arg12_l[205]);
    atomicAdd(&ind_arg7[206+map5idx*225],arg12_l[206]);
    atomicAdd(&ind_arg7[207+map5idx*225],arg12_l[207]);
    atomicAdd(&ind_arg7[208+map5idx*225],arg12_l[208]);
    atomicAdd(&ind_arg7[209+map5idx*225],arg12_l[209]);
    atomicAdd(&ind_arg7[210+map5idx*225],arg12_l[210]);
    atomicAdd(&ind_arg7[211+map5idx*225],arg12_l[211]);
    atomicAdd(&ind_arg7[212+map5idx*225],arg12_l[212]);
    atomicAdd(&ind_arg7[213+map5idx*225],arg12_l[213]);
    atomicAdd(&ind_arg7[214+map5idx*225],arg12_l[214]);
    atomicAdd(&ind_arg7[215+map5idx*225],arg12_l[215]);
    atomicAdd(&ind_arg7[216+map5idx*225],arg12_l[216]);
    atomicAdd(&ind_arg7[217+map5idx*225],arg12_l[217]);
    atomicAdd(&ind_arg7[218+map5idx*225],arg12_l[218]);
    atomicAdd(&ind_arg7[219+map5idx*225],arg12_l[219]);
    atomicAdd(&ind_arg7[220+map5idx*225],arg12_l[220]);
    atomicAdd(&ind_arg7[221+map5idx*225],arg12_l[221]);
    atomicAdd(&ind_arg7[222+map5idx*225],arg12_l[222]);
    atomicAdd(&ind_arg7[223+map5idx*225],arg12_l[223]);
    atomicAdd(&ind_arg7[224+map5idx*225],arg12_l[224]);
  }
}


//host stub function
void op_par_loop_poisson_op3(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11,
  op_arg arg12){

  int*arg2h = (int *)arg2.data;
  int*arg3h = (int *)arg3.data;
  int*arg4h = (int *)arg4.data;
  int nargs = 13;
  op_arg args[13];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;
  args[9] = arg9;
  args[10] = arg10;
  args[11] = arg11;
  args[12] = arg12;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(31);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[31].name      = name;
  OP_kernels[31].count    += 1;


  int    ninds   = 8;
  int    inds[13] = {-1,-1,-1,-1,-1,0,1,2,3,4,5,6,7};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: poisson_op3\n");
  }
  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (set_size > 0) {

    //transfer constants to GPU
    int consts_bytes = 0;
    consts_bytes += ROUND_UP(1*sizeof(int));
    consts_bytes += ROUND_UP(1*sizeof(int));
    consts_bytes += ROUND_UP(1*sizeof(int));
    reallocConstArrays(consts_bytes);
    consts_bytes = 0;
    arg2.data   = OP_consts_h + consts_bytes;
    arg2.data_d = OP_consts_d + consts_bytes;
    for ( int d=0; d<1; d++ ){
      ((int *)arg2.data)[d] = arg2h[d];
    }
    consts_bytes += ROUND_UP(1*sizeof(int));
    arg3.data   = OP_consts_h + consts_bytes;
    arg3.data_d = OP_consts_d + consts_bytes;
    for ( int d=0; d<1; d++ ){
      ((int *)arg3.data)[d] = arg3h[d];
    }
    consts_bytes += ROUND_UP(1*sizeof(int));
    arg4.data   = OP_consts_h + consts_bytes;
    arg4.data_d = OP_consts_d + consts_bytes;
    for ( int d=0; d<1; d++ ){
      ((int *)arg4.data)[d] = arg4h[d];
    }
    consts_bytes += ROUND_UP(1*sizeof(int));
    mvConstArraysToDevice(consts_bytes);

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_31
      int nthread = OP_BLOCK_SIZE_31;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_poisson_op3<<<nblocks,nthread>>>(
        (double *)arg5.data_d,
        (double *)arg6.data_d,
        (double *)arg7.data_d,
        (double *)arg8.data_d,
        (double *)arg9.data_d,
        (double *)arg10.data_d,
        (double *)arg11.data_d,
        (double *)arg12.data_d,
        arg5.map_data_d,
        (int*)arg0.data_d,
        (int*)arg1.data_d,
        (int*)arg2.data_d,
        (int*)arg3.data_d,
        (int*)arg4.data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[31].time     += wall_t2 - wall_t1;
}
