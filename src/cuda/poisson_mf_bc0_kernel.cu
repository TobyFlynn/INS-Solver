//
// auto-generated by op2.py
//

//user function
__device__ void poisson_mf_bc0_gpu( const int *bedgeType, const int *bedgeNum,
                           const double *sJ, const double *nx, const double *ny,
                           const double *tau, const double *bc, double *fluxX,
                           double *fluxY, double *flux) {
  int exInd = 0;
  if(*bedgeNum == 1) exInd = 7;
  else if(*bedgeNum == 2) exInd = 2 * 7;

  for(int i = 0; i < 7; i++) {
    fluxX[exInd + i] += nx[exInd + i] * gaussW_g_cuda[i] * sJ[exInd + i] * bc[exInd + i];
    fluxY[exInd + i] += ny[exInd + i] * gaussW_g_cuda[i] * sJ[exInd + i] * bc[exInd + i];
    flux[exInd + i] += gaussW_g_cuda[i] * sJ[exInd + i] * tau[*bedgeNum] * bc[exInd + i];
  }

}

// CUDA kernel function
__global__ void op_cuda_poisson_mf_bc0(
  const double *__restrict ind_arg0,
  const double *__restrict ind_arg1,
  const double *__restrict ind_arg2,
  const double *__restrict ind_arg3,
  const double *__restrict ind_arg4,
  double *__restrict ind_arg5,
  double *__restrict ind_arg6,
  double *__restrict ind_arg7,
  const int *__restrict opDat2Map,
  const int *__restrict arg0,
  const int *__restrict arg1,
  int start,
  int end,
  int   set_size) {
  double arg7_l[21];
  double arg8_l[21];
  double arg9_l[21];
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    double arg7_l[21];
    for ( int d=0; d<21; d++ ){
      arg7_l[d] = ZERO_double;
    }
    double arg8_l[21];
    for ( int d=0; d<21; d++ ){
      arg8_l[d] = ZERO_double;
    }
    double arg9_l[21];
    for ( int d=0; d<21; d++ ){
      arg9_l[d] = ZERO_double;
    }
    int map2idx;
    map2idx = opDat2Map[n + set_size * 0];

    //user-supplied kernel call
    poisson_mf_bc0_gpu(arg0+n*1,
                   arg1+n*1,
                   ind_arg0+map2idx*21,
                   ind_arg1+map2idx*21,
                   ind_arg2+map2idx*21,
                   ind_arg3+map2idx*3,
                   ind_arg4+map2idx*21,
                   arg7_l,
                   arg8_l,
                   arg9_l);
    atomicAdd(&ind_arg5[0+map2idx*21],arg7_l[0]);
    atomicAdd(&ind_arg5[1+map2idx*21],arg7_l[1]);
    atomicAdd(&ind_arg5[2+map2idx*21],arg7_l[2]);
    atomicAdd(&ind_arg5[3+map2idx*21],arg7_l[3]);
    atomicAdd(&ind_arg5[4+map2idx*21],arg7_l[4]);
    atomicAdd(&ind_arg5[5+map2idx*21],arg7_l[5]);
    atomicAdd(&ind_arg5[6+map2idx*21],arg7_l[6]);
    atomicAdd(&ind_arg5[7+map2idx*21],arg7_l[7]);
    atomicAdd(&ind_arg5[8+map2idx*21],arg7_l[8]);
    atomicAdd(&ind_arg5[9+map2idx*21],arg7_l[9]);
    atomicAdd(&ind_arg5[10+map2idx*21],arg7_l[10]);
    atomicAdd(&ind_arg5[11+map2idx*21],arg7_l[11]);
    atomicAdd(&ind_arg5[12+map2idx*21],arg7_l[12]);
    atomicAdd(&ind_arg5[13+map2idx*21],arg7_l[13]);
    atomicAdd(&ind_arg5[14+map2idx*21],arg7_l[14]);
    atomicAdd(&ind_arg5[15+map2idx*21],arg7_l[15]);
    atomicAdd(&ind_arg5[16+map2idx*21],arg7_l[16]);
    atomicAdd(&ind_arg5[17+map2idx*21],arg7_l[17]);
    atomicAdd(&ind_arg5[18+map2idx*21],arg7_l[18]);
    atomicAdd(&ind_arg5[19+map2idx*21],arg7_l[19]);
    atomicAdd(&ind_arg5[20+map2idx*21],arg7_l[20]);
    atomicAdd(&ind_arg6[0+map2idx*21],arg8_l[0]);
    atomicAdd(&ind_arg6[1+map2idx*21],arg8_l[1]);
    atomicAdd(&ind_arg6[2+map2idx*21],arg8_l[2]);
    atomicAdd(&ind_arg6[3+map2idx*21],arg8_l[3]);
    atomicAdd(&ind_arg6[4+map2idx*21],arg8_l[4]);
    atomicAdd(&ind_arg6[5+map2idx*21],arg8_l[5]);
    atomicAdd(&ind_arg6[6+map2idx*21],arg8_l[6]);
    atomicAdd(&ind_arg6[7+map2idx*21],arg8_l[7]);
    atomicAdd(&ind_arg6[8+map2idx*21],arg8_l[8]);
    atomicAdd(&ind_arg6[9+map2idx*21],arg8_l[9]);
    atomicAdd(&ind_arg6[10+map2idx*21],arg8_l[10]);
    atomicAdd(&ind_arg6[11+map2idx*21],arg8_l[11]);
    atomicAdd(&ind_arg6[12+map2idx*21],arg8_l[12]);
    atomicAdd(&ind_arg6[13+map2idx*21],arg8_l[13]);
    atomicAdd(&ind_arg6[14+map2idx*21],arg8_l[14]);
    atomicAdd(&ind_arg6[15+map2idx*21],arg8_l[15]);
    atomicAdd(&ind_arg6[16+map2idx*21],arg8_l[16]);
    atomicAdd(&ind_arg6[17+map2idx*21],arg8_l[17]);
    atomicAdd(&ind_arg6[18+map2idx*21],arg8_l[18]);
    atomicAdd(&ind_arg6[19+map2idx*21],arg8_l[19]);
    atomicAdd(&ind_arg6[20+map2idx*21],arg8_l[20]);
    atomicAdd(&ind_arg7[0+map2idx*21],arg9_l[0]);
    atomicAdd(&ind_arg7[1+map2idx*21],arg9_l[1]);
    atomicAdd(&ind_arg7[2+map2idx*21],arg9_l[2]);
    atomicAdd(&ind_arg7[3+map2idx*21],arg9_l[3]);
    atomicAdd(&ind_arg7[4+map2idx*21],arg9_l[4]);
    atomicAdd(&ind_arg7[5+map2idx*21],arg9_l[5]);
    atomicAdd(&ind_arg7[6+map2idx*21],arg9_l[6]);
    atomicAdd(&ind_arg7[7+map2idx*21],arg9_l[7]);
    atomicAdd(&ind_arg7[8+map2idx*21],arg9_l[8]);
    atomicAdd(&ind_arg7[9+map2idx*21],arg9_l[9]);
    atomicAdd(&ind_arg7[10+map2idx*21],arg9_l[10]);
    atomicAdd(&ind_arg7[11+map2idx*21],arg9_l[11]);
    atomicAdd(&ind_arg7[12+map2idx*21],arg9_l[12]);
    atomicAdd(&ind_arg7[13+map2idx*21],arg9_l[13]);
    atomicAdd(&ind_arg7[14+map2idx*21],arg9_l[14]);
    atomicAdd(&ind_arg7[15+map2idx*21],arg9_l[15]);
    atomicAdd(&ind_arg7[16+map2idx*21],arg9_l[16]);
    atomicAdd(&ind_arg7[17+map2idx*21],arg9_l[17]);
    atomicAdd(&ind_arg7[18+map2idx*21],arg9_l[18]);
    atomicAdd(&ind_arg7[19+map2idx*21],arg9_l[19]);
    atomicAdd(&ind_arg7[20+map2idx*21],arg9_l[20]);
  }
}


//host stub function
void op_par_loop_poisson_mf_bc0(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9){

  int nargs = 10;
  op_arg args[10];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;
  args[9] = arg9;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(34);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[34].name      = name;
  OP_kernels[34].count    += 1;


  int    ninds   = 8;
  int    inds[10] = {-1,-1,0,1,2,3,4,5,6,7};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: poisson_mf_bc0\n");
  }
  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (set_size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_34
      int nthread = OP_BLOCK_SIZE_34;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_poisson_mf_bc0<<<nblocks,nthread>>>(
        (double *)arg2.data_d,
        (double *)arg3.data_d,
        (double *)arg4.data_d,
        (double *)arg5.data_d,
        (double *)arg6.data_d,
        (double *)arg7.data_d,
        (double *)arg8.data_d,
        (double *)arg9.data_d,
        arg2.map_data_d,
        (int*)arg0.data_d,
        (int*)arg1.data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[34].time     += wall_t2 - wall_t1;
}
