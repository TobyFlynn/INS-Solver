//
// auto-generated by op2.py
//

//user function
__device__ void pressure_faces_gpu( const int *edgeNum, const double **pRHS, double **exP) {

  int edgeL = edgeNum[0];
  int edgeR = edgeNum[1];

  int exInd = 0;
  if(edgeL == 1) exInd = 5;
  else if(edgeL == 2) exInd = 2 * 5;

  int *fmask;

  if(edgeL == 0) {
    fmask = FMASK_cuda;
  } else if(edgeL == 1) {
    fmask = &FMASK_cuda[5];
  } else {
    fmask = &FMASK_cuda[2 * 5];
  }

  for(int i = 0; i < 5; i++) {
    int lInd = fmask[i];
    exP[0][exInd + i] += pRHS[0][lInd];
  }

  exInd = 0;
  if(edgeR == 1) exInd = 5;
  else if(edgeR == 2) exInd = 2 * 5;

  if(edgeR == 0) {
    fmask = FMASK_cuda;
  } else if(edgeR == 1) {
    fmask = &FMASK_cuda[5];
  } else {
    fmask = &FMASK_cuda[2 * 5];
  }

  for(int i = 0; i < 5; i++) {
    int rInd = fmask[i];
    exP[1][exInd + i] += pRHS[1][rInd];
  }

}

// CUDA kernel function
__global__ void op_cuda_pressure_faces(
  const double *__restrict ind_arg0,
  double *__restrict ind_arg1,
  const int *__restrict opDat1Map,
  const int *__restrict arg0,
  int start,
  int end,
  int   set_size) {
  double arg3_l[15];
  double arg4_l[15];
  double *arg3_vec[2] = {
    arg3_l,
    arg4_l,
  };
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    double arg3_l[15];
    for ( int d=0; d<15; d++ ){
      arg3_l[d] = ZERO_double;
    }
    double arg4_l[15];
    for ( int d=0; d<15; d++ ){
      arg4_l[d] = ZERO_double;
    }
    int map1idx;
    int map2idx;
    map1idx = opDat1Map[n + set_size * 0];
    map2idx = opDat1Map[n + set_size * 1];
    const double* arg1_vec[] = {
       &ind_arg0[15 * map1idx],
       &ind_arg0[15 * map2idx]};
    double* arg3_vec[] = {
       &ind_arg1[15 * map1idx],
       &ind_arg1[15 * map2idx]};

    //user-supplied kernel call
    pressure_faces_gpu(arg0+n*2,
                   arg1_vec,
                   arg3_vec);
    atomicAdd(&ind_arg1[0+map1idx*15],arg3_l[0]);
    atomicAdd(&ind_arg1[1+map1idx*15],arg3_l[1]);
    atomicAdd(&ind_arg1[2+map1idx*15],arg3_l[2]);
    atomicAdd(&ind_arg1[3+map1idx*15],arg3_l[3]);
    atomicAdd(&ind_arg1[4+map1idx*15],arg3_l[4]);
    atomicAdd(&ind_arg1[5+map1idx*15],arg3_l[5]);
    atomicAdd(&ind_arg1[6+map1idx*15],arg3_l[6]);
    atomicAdd(&ind_arg1[7+map1idx*15],arg3_l[7]);
    atomicAdd(&ind_arg1[8+map1idx*15],arg3_l[8]);
    atomicAdd(&ind_arg1[9+map1idx*15],arg3_l[9]);
    atomicAdd(&ind_arg1[10+map1idx*15],arg3_l[10]);
    atomicAdd(&ind_arg1[11+map1idx*15],arg3_l[11]);
    atomicAdd(&ind_arg1[12+map1idx*15],arg3_l[12]);
    atomicAdd(&ind_arg1[13+map1idx*15],arg3_l[13]);
    atomicAdd(&ind_arg1[14+map1idx*15],arg3_l[14]);
    atomicAdd(&ind_arg1[0+map2idx*15],arg4_l[0]);
    atomicAdd(&ind_arg1[1+map2idx*15],arg4_l[1]);
    atomicAdd(&ind_arg1[2+map2idx*15],arg4_l[2]);
    atomicAdd(&ind_arg1[3+map2idx*15],arg4_l[3]);
    atomicAdd(&ind_arg1[4+map2idx*15],arg4_l[4]);
    atomicAdd(&ind_arg1[5+map2idx*15],arg4_l[5]);
    atomicAdd(&ind_arg1[6+map2idx*15],arg4_l[6]);
    atomicAdd(&ind_arg1[7+map2idx*15],arg4_l[7]);
    atomicAdd(&ind_arg1[8+map2idx*15],arg4_l[8]);
    atomicAdd(&ind_arg1[9+map2idx*15],arg4_l[9]);
    atomicAdd(&ind_arg1[10+map2idx*15],arg4_l[10]);
    atomicAdd(&ind_arg1[11+map2idx*15],arg4_l[11]);
    atomicAdd(&ind_arg1[12+map2idx*15],arg4_l[12]);
    atomicAdd(&ind_arg1[13+map2idx*15],arg4_l[13]);
    atomicAdd(&ind_arg1[14+map2idx*15],arg4_l[14]);
  }
}


//host stub function
void op_par_loop_pressure_faces(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg3){

  int nargs = 5;
  op_arg args[5];

  args[0] = arg0;
  arg1.idx = 0;
  args[1] = arg1;
  for ( int v=1; v<2; v++ ){
    args[1 + v] = op_arg_dat(arg1.dat, v, arg1.map, 15, "double", OP_READ);
  }

  arg3.idx = 0;
  args[3] = arg3;
  for ( int v=1; v<2; v++ ){
    args[3 + v] = op_arg_dat(arg3.dat, v, arg3.map, 15, "double", OP_INC);
  }


  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(10);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[10].name      = name;
  OP_kernels[10].count    += 1;


  int    ninds   = 2;
  int    inds[5] = {-1,0,0,1,1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: pressure_faces\n");
  }
  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (set_size > 0) {

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_10
      int nthread = OP_BLOCK_SIZE_10;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_pressure_faces<<<nblocks,nthread>>>(
        (double *)arg1.data_d,
        (double *)arg3.data_d,
        arg1.map_data_d,
        (int*)arg0.data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[10].time     += wall_t2 - wall_t1;
}
