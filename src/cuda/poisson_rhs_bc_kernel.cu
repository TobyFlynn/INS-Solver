//
// auto-generated by op2.py
//

//user function
__device__ void poisson_rhs_bc_gpu( const int *bedge_type, const int *bedgeNum,
                           const int *dirichlet0, const int *dirichlet1, const int *dirichlet2,
                           const double *dBC, const double *U, double *exU) {
  int exInd = 0;
  if(*bedgeNum == 1) {
    exInd = 5;
  } else if(*bedgeNum == 2) {
    exInd = 2 * 5;
  }

  int *fmask;

  if(*bedgeNum == 0) {
    fmask = FMASK_cuda;
  } else if(*bedgeNum == 1) {
    fmask = &FMASK_cuda[5];
  } else {
    fmask = &FMASK_cuda[2 * 5];
  }

  if(*bedge_type == *dirichlet0 || *bedge_type == *dirichlet1 || *bedge_type == *dirichlet2) {
    for(int i = 0; i < 5; i++) {
      exU[exInd + i] += -U[fmask[i]] + 2.0 * dBC[exInd + i];


    }
  } else {

    for(int i = 0; i < 5; i++) {
      exU[exInd + i] += U[fmask[i]];
    }
  }

}

// CUDA kernel function
__global__ void op_cuda_poisson_rhs_bc(
  const double *__restrict ind_arg0,
  const double *__restrict ind_arg1,
  double *__restrict ind_arg2,
  const int *__restrict opDat5Map,
  const int *__restrict arg0,
  const int *__restrict arg1,
  const int *arg2,
  const int *arg3,
  const int *arg4,
  int start,
  int end,
  int   set_size) {
  double arg7_l[15];
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    double arg7_l[15];
    for ( int d=0; d<15; d++ ){
      arg7_l[d] = ZERO_double;
    }
    int map5idx;
    map5idx = opDat5Map[n + set_size * 0];

    //user-supplied kernel call
    poisson_rhs_bc_gpu(arg0+n*1,
                   arg1+n*1,
                   arg2,
                   arg3,
                   arg4,
                   ind_arg0+map5idx*15,
                   ind_arg1+map5idx*15,
                   arg7_l);
    atomicAdd(&ind_arg2[0+map5idx*15],arg7_l[0]);
    atomicAdd(&ind_arg2[1+map5idx*15],arg7_l[1]);
    atomicAdd(&ind_arg2[2+map5idx*15],arg7_l[2]);
    atomicAdd(&ind_arg2[3+map5idx*15],arg7_l[3]);
    atomicAdd(&ind_arg2[4+map5idx*15],arg7_l[4]);
    atomicAdd(&ind_arg2[5+map5idx*15],arg7_l[5]);
    atomicAdd(&ind_arg2[6+map5idx*15],arg7_l[6]);
    atomicAdd(&ind_arg2[7+map5idx*15],arg7_l[7]);
    atomicAdd(&ind_arg2[8+map5idx*15],arg7_l[8]);
    atomicAdd(&ind_arg2[9+map5idx*15],arg7_l[9]);
    atomicAdd(&ind_arg2[10+map5idx*15],arg7_l[10]);
    atomicAdd(&ind_arg2[11+map5idx*15],arg7_l[11]);
    atomicAdd(&ind_arg2[12+map5idx*15],arg7_l[12]);
    atomicAdd(&ind_arg2[13+map5idx*15],arg7_l[13]);
    atomicAdd(&ind_arg2[14+map5idx*15],arg7_l[14]);
  }
}


//host stub function
void op_par_loop_poisson_rhs_bc(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7){

  int*arg2h = (int *)arg2.data;
  int*arg3h = (int *)arg3.data;
  int*arg4h = (int *)arg4.data;
  int nargs = 8;
  op_arg args[8];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(32);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[32].name      = name;
  OP_kernels[32].count    += 1;


  int    ninds   = 3;
  int    inds[8] = {-1,-1,-1,-1,-1,0,1,2};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: poisson_rhs_bc\n");
  }
  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (set_size > 0) {

    //transfer constants to GPU
    int consts_bytes = 0;
    consts_bytes += ROUND_UP(1*sizeof(int));
    consts_bytes += ROUND_UP(1*sizeof(int));
    consts_bytes += ROUND_UP(1*sizeof(int));
    reallocConstArrays(consts_bytes);
    consts_bytes = 0;
    arg2.data   = OP_consts_h + consts_bytes;
    arg2.data_d = OP_consts_d + consts_bytes;
    for ( int d=0; d<1; d++ ){
      ((int *)arg2.data)[d] = arg2h[d];
    }
    consts_bytes += ROUND_UP(1*sizeof(int));
    arg3.data   = OP_consts_h + consts_bytes;
    arg3.data_d = OP_consts_d + consts_bytes;
    for ( int d=0; d<1; d++ ){
      ((int *)arg3.data)[d] = arg3h[d];
    }
    consts_bytes += ROUND_UP(1*sizeof(int));
    arg4.data   = OP_consts_h + consts_bytes;
    arg4.data_d = OP_consts_d + consts_bytes;
    for ( int d=0; d<1; d++ ){
      ((int *)arg4.data)[d] = arg4h[d];
    }
    consts_bytes += ROUND_UP(1*sizeof(int));
    mvConstArraysToDevice(consts_bytes);

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_32
      int nthread = OP_BLOCK_SIZE_32;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_poisson_rhs_bc<<<nblocks,nthread>>>(
        (double *)arg5.data_d,
        (double *)arg6.data_d,
        (double *)arg7.data_d,
        arg5.map_data_d,
        (int*)arg0.data_d,
        (int*)arg1.data_d,
        (int*)arg2.data_d,
        (int*)arg3.data_d,
        (int*)arg4.data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[32].time     += wall_t2 - wall_t1;
}
