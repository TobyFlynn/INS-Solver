//
// auto-generated by op2.py
//

//user function
__device__ void poisson_mf_bc_gpu( const int *bedgeType, const int *bedgeNum,
                          const int *d0, const int *d1, const int *d2,
                          const double *mD0, const double *mD1,
                          const double *mD2, const double *sJ,
                          const double *tau, const double *bc, double *rhs) {
  int exInd = 0;
  if(*bedgeNum == 1) exInd = 7;
  else if(*bedgeNum == 2) exInd = 2 * 7;

  if(*bedgeType == *d0 || *bedgeType == *d1 || *bedgeType == *d2) {

    double op[15 * 7];
    for(int j = 0; j < 7 * 15; j++) {
      int indT = (j % 7) * 15 + (j / 7);
      int col  = j % 7;
      int row  = j / 7;
      double val = gaussW_g_cuda[j % 7] * sJ[*bedgeNum * 7 + (j % 7)] * tau[*bedgeNum];
      double mD;
      if(*bedgeNum == 0) {
        val *= gFInterp0_g_cuda[indT];
        mD = mD0[indT];
      } else if(*bedgeNum == 1) {
        val *= gFInterp1_g_cuda[indT];
        mD = mD1[indT];
      } else {
        val *= gFInterp2_g_cuda[indT];
        mD = mD2[indT];
      }
      val -= mD * gaussW_g_cuda[j % 7] * sJ[*bedgeNum * 7 + (j % 7)];

        op[row * 7 + col] += val;
    }

    for(int m = 0; m < 15; m++) {
      int ind = m * 7;
      double val = 0.0;
      for(int n = 0; n < 7; n++) {
        val += op[ind + n] * bc[exInd + n];
      }
      rhs[m] += val;
    }
  } else {
    double op[15 * 7];
    for(int j = 0; j < 7 * 15; j++) {
      int indT = (j % 7) * 15 + (j / 7);
      int col  = j % 7;
      int row  = j / 7;
      double val = gaussW_g_cuda[j % 7] * sJ[*bedgeNum * 7 + (j % 7)];
      if(*bedgeNum == 0) {
        val *= gFInterp0_g_cuda[indT];
      } else if(*bedgeNum == 1) {
        val *= gFInterp1_g_cuda[indT];
      } else {
        val *= gFInterp2_g_cuda[indT];
      }

        op[row * 7 + col] += val;
    }

    for(int m = 0; m < 15; m++) {
      int ind = m * 7;
      double val = 0.0;
      for(int n = 0; n < 7; n++) {
        val += op[ind + n] * bc[exInd + n];
      }
      rhs[m] += val;
    }
  }

}

// CUDA kernel function
__global__ void op_cuda_poisson_mf_bc(
  const double *__restrict ind_arg0,
  const double *__restrict ind_arg1,
  const double *__restrict ind_arg2,
  const double *__restrict ind_arg3,
  const double *__restrict ind_arg4,
  const double *__restrict ind_arg5,
  double *__restrict ind_arg6,
  const int *__restrict opDat5Map,
  const int *__restrict arg0,
  const int *__restrict arg1,
  const int *arg2,
  const int *arg3,
  const int *arg4,
  int start,
  int end,
  int   set_size) {
  double arg11_l[15];
  int tid = threadIdx.x + blockIdx.x * blockDim.x;
  if (tid + start < end) {
    int n = tid + start;
    //initialise local variables
    double arg11_l[15];
    for ( int d=0; d<15; d++ ){
      arg11_l[d] = ZERO_double;
    }
    int map5idx;
    map5idx = opDat5Map[n + set_size * 0];

    //user-supplied kernel call
    poisson_mf_bc_gpu(arg0+n*1,
                  arg1+n*1,
                  arg2,
                  arg3,
                  arg4,
                  ind_arg0+map5idx*105,
                  ind_arg1+map5idx*105,
                  ind_arg2+map5idx*105,
                  ind_arg3+map5idx*21,
                  ind_arg4+map5idx*3,
                  ind_arg5+map5idx*21,
                  arg11_l);
    atomicAdd(&ind_arg6[0+map5idx*15],arg11_l[0]);
    atomicAdd(&ind_arg6[1+map5idx*15],arg11_l[1]);
    atomicAdd(&ind_arg6[2+map5idx*15],arg11_l[2]);
    atomicAdd(&ind_arg6[3+map5idx*15],arg11_l[3]);
    atomicAdd(&ind_arg6[4+map5idx*15],arg11_l[4]);
    atomicAdd(&ind_arg6[5+map5idx*15],arg11_l[5]);
    atomicAdd(&ind_arg6[6+map5idx*15],arg11_l[6]);
    atomicAdd(&ind_arg6[7+map5idx*15],arg11_l[7]);
    atomicAdd(&ind_arg6[8+map5idx*15],arg11_l[8]);
    atomicAdd(&ind_arg6[9+map5idx*15],arg11_l[9]);
    atomicAdd(&ind_arg6[10+map5idx*15],arg11_l[10]);
    atomicAdd(&ind_arg6[11+map5idx*15],arg11_l[11]);
    atomicAdd(&ind_arg6[12+map5idx*15],arg11_l[12]);
    atomicAdd(&ind_arg6[13+map5idx*15],arg11_l[13]);
    atomicAdd(&ind_arg6[14+map5idx*15],arg11_l[14]);
  }
}


//host stub function
void op_par_loop_poisson_mf_bc(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8,
  op_arg arg9,
  op_arg arg10,
  op_arg arg11){

  int*arg2h = (int *)arg2.data;
  int*arg3h = (int *)arg3.data;
  int*arg4h = (int *)arg4.data;
  int nargs = 12;
  op_arg args[12];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;
  args[9] = arg9;
  args[10] = arg10;
  args[11] = arg11;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(37);
  op_timers_core(&cpu_t1, &wall_t1);
  OP_kernels[37].name      = name;
  OP_kernels[37].count    += 1;


  int    ninds   = 7;
  int    inds[12] = {-1,-1,-1,-1,-1,0,1,2,3,4,5,6};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: poisson_mf_bc\n");
  }
  int set_size = op_mpi_halo_exchanges_cuda(set, nargs, args);
  if (set_size > 0) {

    //transfer constants to GPU
    int consts_bytes = 0;
    consts_bytes += ROUND_UP(1*sizeof(int));
    consts_bytes += ROUND_UP(1*sizeof(int));
    consts_bytes += ROUND_UP(1*sizeof(int));
    reallocConstArrays(consts_bytes);
    consts_bytes = 0;
    arg2.data   = OP_consts_h + consts_bytes;
    arg2.data_d = OP_consts_d + consts_bytes;
    for ( int d=0; d<1; d++ ){
      ((int *)arg2.data)[d] = arg2h[d];
    }
    consts_bytes += ROUND_UP(1*sizeof(int));
    arg3.data   = OP_consts_h + consts_bytes;
    arg3.data_d = OP_consts_d + consts_bytes;
    for ( int d=0; d<1; d++ ){
      ((int *)arg3.data)[d] = arg3h[d];
    }
    consts_bytes += ROUND_UP(1*sizeof(int));
    arg4.data   = OP_consts_h + consts_bytes;
    arg4.data_d = OP_consts_d + consts_bytes;
    for ( int d=0; d<1; d++ ){
      ((int *)arg4.data)[d] = arg4h[d];
    }
    consts_bytes += ROUND_UP(1*sizeof(int));
    mvConstArraysToDevice(consts_bytes);

    //set CUDA execution parameters
    #ifdef OP_BLOCK_SIZE_37
      int nthread = OP_BLOCK_SIZE_37;
    #else
      int nthread = OP_block_size;
    #endif

    for ( int round=0; round<2; round++ ){
      if (round==1) {
        op_mpi_wait_all_cuda(nargs, args);
      }
      int start = round==0 ? 0 : set->core_size;
      int end = round==0 ? set->core_size : set->size + set->exec_size;
      if (end-start>0) {
        int nblocks = (end-start-1)/nthread+1;
        op_cuda_poisson_mf_bc<<<nblocks,nthread>>>(
        (double *)arg5.data_d,
        (double *)arg6.data_d,
        (double *)arg7.data_d,
        (double *)arg8.data_d,
        (double *)arg9.data_d,
        (double *)arg10.data_d,
        (double *)arg11.data_d,
        arg5.map_data_d,
        (int*)arg0.data_d,
        (int*)arg1.data_d,
        (int*)arg2.data_d,
        (int*)arg3.data_d,
        (int*)arg4.data_d,
        start,end,set->size+set->exec_size);
      }
    }
  }
  op_mpi_set_dirtybit_cuda(nargs, args);
  cutilSafeCall(cudaDeviceSynchronize());
  //update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[37].time     += wall_t2 - wall_t1;
}
