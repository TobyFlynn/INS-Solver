//
// auto-generated by op2.py
//

//user function
#include "../kernels/poisson_mf_edges.h"

// host stub function
void op_par_loop_poisson_mf_edges(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg4,
  op_arg arg6,
  op_arg arg8,
  op_arg arg10,
  op_arg arg12,
  op_arg arg14,
  op_arg arg16,
  op_arg arg18,
  op_arg arg20){

  int nargs = 22;
  op_arg args[22];

  args[0] = arg0;
  args[1] = arg1;
  arg2.idx = 0;
  args[2] = arg2;
  for ( int v=1; v<2; v++ ){
    args[2 + v] = op_arg_dat(arg2.dat, v, arg2.map, 21, "double", OP_READ);
  }

  arg4.idx = 0;
  args[4] = arg4;
  for ( int v=1; v<2; v++ ){
    args[4 + v] = op_arg_dat(arg4.dat, v, arg4.map, 21, "double", OP_READ);
  }

  arg6.idx = 0;
  args[6] = arg6;
  for ( int v=1; v<2; v++ ){
    args[6 + v] = op_arg_dat(arg6.dat, v, arg6.map, 21, "double", OP_READ);
  }

  arg8.idx = 0;
  args[8] = arg8;
  for ( int v=1; v<2; v++ ){
    args[8 + v] = op_arg_dat(arg8.dat, v, arg8.map, 3, "double", OP_READ);
  }

  arg10.idx = 0;
  args[10] = arg10;
  for ( int v=1; v<2; v++ ){
    args[10 + v] = op_arg_dat(arg10.dat, v, arg10.map, 21, "double", OP_READ);
  }

  arg12.idx = 0;
  args[12] = arg12;
  for ( int v=1; v<2; v++ ){
    args[12 + v] = op_arg_dat(arg12.dat, v, arg12.map, 21, "double", OP_READ);
  }

  arg14.idx = 0;
  args[14] = arg14;
  for ( int v=1; v<2; v++ ){
    args[14 + v] = op_arg_dat(arg14.dat, v, arg14.map, 21, "double", OP_READ);
  }

  arg16.idx = 0;
  args[16] = arg16;
  for ( int v=1; v<2; v++ ){
    args[16 + v] = op_arg_dat(arg16.dat, v, arg16.map, 21, "double", OP_INC);
  }

  arg18.idx = 0;
  args[18] = arg18;
  for ( int v=1; v<2; v++ ){
    args[18 + v] = op_arg_dat(arg18.dat, v, arg18.map, 21, "double", OP_INC);
  }

  arg20.idx = 0;
  args[20] = arg20;
  for ( int v=1; v<2; v++ ){
    args[20 + v] = op_arg_dat(arg20.dat, v, arg20.map, 21, "double", OP_INC);
  }


  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(30);
  OP_kernels[30].name      = name;
  OP_kernels[30].count    += 1;
  op_timers_core(&cpu_t1, &wall_t1);

  int  ninds   = 10;
  int  inds[22] = {-1,-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: poisson_mf_edges\n");
  }

  // get plan
  #ifdef OP_PART_SIZE_30
    int part_size = OP_PART_SIZE_30;
  #else
    int part_size = OP_part_size;
  #endif

  int set_size = op_mpi_halo_exchanges(set, nargs, args);

  if (set_size >0) {

    op_plan *Plan = op_plan_get_stage_upload(name,set,part_size,nargs,args,ninds,inds,OP_STAGE_ALL,0);

    // execute plan
    int block_offset = 0;
    for ( int col=0; col<Plan->ncolors; col++ ){
      if (col==Plan->ncolors_core) {
        op_mpi_wait_all(nargs, args);
      }
      int nblocks = Plan->ncolblk[col];

      #pragma omp parallel for
      for ( int blockIdx=0; blockIdx<nblocks; blockIdx++ ){
        int blockId  = Plan->blkmap[blockIdx + block_offset];
        int nelem    = Plan->nelems[blockId];
        int offset_b = Plan->offset[blockId];
        for ( int n=offset_b; n<offset_b+nelem; n++ ){
          int map2idx;
          int map3idx;
          map2idx = arg2.map_data[n * arg2.map->dim + 0];
          map3idx = arg2.map_data[n * arg2.map->dim + 1];

          const double* arg2_vec[] = {
             &((double*)arg2.data)[21 * map2idx],
             &((double*)arg2.data)[21 * map3idx]};
          const double* arg4_vec[] = {
             &((double*)arg4.data)[21 * map2idx],
             &((double*)arg4.data)[21 * map3idx]};
          const double* arg6_vec[] = {
             &((double*)arg6.data)[21 * map2idx],
             &((double*)arg6.data)[21 * map3idx]};
          const double* arg8_vec[] = {
             &((double*)arg8.data)[3 * map2idx],
             &((double*)arg8.data)[3 * map3idx]};
          const double* arg10_vec[] = {
             &((double*)arg10.data)[21 * map2idx],
             &((double*)arg10.data)[21 * map3idx]};
          const double* arg12_vec[] = {
             &((double*)arg12.data)[21 * map2idx],
             &((double*)arg12.data)[21 * map3idx]};
          const double* arg14_vec[] = {
             &((double*)arg14.data)[21 * map2idx],
             &((double*)arg14.data)[21 * map3idx]};
          double* arg16_vec[] = {
             &((double*)arg16.data)[21 * map2idx],
             &((double*)arg16.data)[21 * map3idx]};
          double* arg18_vec[] = {
             &((double*)arg18.data)[21 * map2idx],
             &((double*)arg18.data)[21 * map3idx]};
          double* arg20_vec[] = {
             &((double*)arg20.data)[21 * map2idx],
             &((double*)arg20.data)[21 * map3idx]};

          poisson_mf_edges(
            &((int*)arg0.data)[2 * n],
            &((bool*)arg1.data)[1 * n],
            arg2_vec,
            arg4_vec,
            arg6_vec,
            arg8_vec,
            arg10_vec,
            arg12_vec,
            arg14_vec,
            arg16_vec,
            arg18_vec,
            arg20_vec);
        }
      }

      block_offset += nblocks;
    }
    OP_kernels[30].transfer  += Plan->transfer;
    OP_kernels[30].transfer2 += Plan->transfer2;
  }

  if (set_size == 0 || set_size == set->core_size) {
    op_mpi_wait_all(nargs, args);
  }
  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[30].time     += wall_t2 - wall_t1;
}
