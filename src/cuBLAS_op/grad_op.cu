//
// auto-generated by op2.py
//

#include "cublas_v2.h"

#include  "op_lib_cpp.h"

//
// op_par_loop declarations
//
#ifdef OPENACC
#ifdef __cplusplus
extern "C" {
#endif
#endif
#ifdef OPENACC
#ifdef __cplusplus
}
#endif
#endif

#include "../blas_calls.h"

inline void cublas_grad(cublasHandle_t handle, const int numCells, const double *u_d,
                        double *div0_d, double *div1_d) {
  // CUBLAS_OP_T because cublas is column major but constants are stored row major
  double alpha = 1.0;
  double beta = 0.0;
  cublasDgemm(handle, CUBLAS_OP_T, CUBLAS_OP_N, 15, numCells, 15, &alpha, constants->Dr_d, 15, u_d, 15, &beta, div0_d, 15);
  cublasDgemm(handle, CUBLAS_OP_T, CUBLAS_OP_N, 15, numCells, 15, &alpha, constants->Ds_d, 15, u_d, 15, &beta, div1_d, 15);
}

void grad_blas(INSData *nsData, op_dat u) {
  // Make sure OP2 data is in the right place
  op_arg grad_args[] = {
    op_arg_dat(u, -1, OP_ID, 15, "double", OP_READ),
    op_arg_dat(nsData->div[0], -1, OP_ID, 15, "double", OP_WRITE),
    op_arg_dat(nsData->div[1], -1, OP_ID, 15, "double", OP_WRITE)
  };
  op_mpi_halo_exchanges_cuda(nsData->cells, 3, grad_args);

  cublas_grad(constants->handle, nsData->numCells, (double *)u->data_d,
              (double *)nsData->div[0]->data_d, (double *)nsData->div[1]->data_d);

  // Set correct dirty bits for OP2
  op_mpi_set_dirtybit_cuda(3, grad_args);
}
